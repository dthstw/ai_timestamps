00:00:00 - 00:00:03: okay so first up we have tab n which is
00:00:01 - 00:00:05: sort of like GitHub co-pilot if you've
00:00:03 - 00:00:07: used that if you haven't I'll be looking
00:00:05 - 00:00:09: at it in a minute but the core idea is
00:00:07 - 00:00:11: that within vs code or whatever IDE you
00:00:09 - 00:00:14: use it can autocomplete code as you're
00:00:11 - 00:00:16: writing it and we get this AI chat
00:00:14 - 00:00:17: feature as well so let's say function
00:00:16 - 00:00:19: and we can see it tries to autocomplete
00:00:17 - 00:00:20: the function and let's say we want a
00:00:19 - 00:00:22: factorial function which it will
00:00:20 - 00:00:24: autocomplete and there we have it we
00:00:22 - 00:00:26: have a factorial function that I didn't
00:00:24 - 00:00:28: even have to write I wish this was on
00:00:26 - 00:00:31: multiple lines but that's nitpicky it is
00:00:28 - 00:00:33: a correct function and let's try the
00:00:31 - 00:00:36: chat feature as well so let's say what
00:00:33 - 00:00:38: is the time complexity of factorial okay
00:00:36 - 00:00:39: so it says the time complexity of
00:00:38 - 00:00:41: factorial is o n where n is the number
00:00:39 - 00:00:43: of iterations which is correct but then
00:00:41 - 00:00:45: at the end here it says the time
00:00:43 - 00:00:47: complexity is therefore of N squared
00:00:45 - 00:00:49: which is incorrect so it was correct and
00:00:47 - 00:00:50: then it sort of lost the thread a little
00:00:49 - 00:00:53: bit and said in squared and it was
00:00:50 - 00:00:54: incorrect so close but this is not
00:00:53 - 00:00:56: correct information but okay let's try
00:00:54 - 00:00:58: to break this code a little bit and see
00:00:56 - 00:01:00: if it's able to fix it so I'm going to
00:00:58 - 00:01:02: make this equals instead of less than or
00:01:00 - 00:01:03: equals and see if it realizes that this
00:01:02 - 00:01:07: is not going to work for a negative
00:01:03 - 00:01:11: input anymore so let's say the code for
00:01:07 - 00:01:13: factorial is incorrect how can I fix it
00:01:11 - 00:01:14: let's see if it's able to figure this
00:01:13 - 00:01:16: out okay so it says the code for the
00:01:14 - 00:01:17: factorial function is incorrect because
00:01:16 - 00:01:20: the condition for the base case is
00:01:17 - 00:01:22: incorrect the correct condition is if n
00:01:20 - 00:01:23: is equal to 1 so that's the condition I
00:01:22 - 00:01:26: have so it's correct that the base case
00:01:23 - 00:01:27: was wrong but it didn't do a good job of
00:01:26 - 00:01:29: actually telling me why it was wrong
00:01:27 - 00:01:31: let's look at the other response it has
00:01:29 - 00:01:33: and and okay so this one the response
00:01:31 - 00:01:35: number two is actually correct it should
00:01:33 - 00:01:37: be n is less than or equal to one
00:01:35 - 00:01:39: instead of n equals 1 so I'll give it
00:01:37 - 00:01:40: sort of partial credit for that out of
00:01:39 - 00:01:42: curiosity this first one it doesn't look
00:01:40 - 00:01:44: like I have multiple responses here but
00:01:42 - 00:01:45: this one at least it gave me a second
00:01:44 - 00:01:47: response and the second response was
00:01:45 - 00:01:49: correct okay so now I want to try some
00:01:47 - 00:01:50: of the other command options we have so
00:01:49 - 00:01:52: let's say just explain the code and
00:01:50 - 00:01:54: let's see what we get for an explanation
00:01:52 - 00:01:56: of this code okay so I'm not going to
00:01:54 - 00:01:58: read all of this but this is a correct
00:01:56 - 00:02:00: explanation of how a factorial function
00:01:58 - 00:02:01: works so good job on Tab 9 there okay so
00:02:00 - 00:02:03: now I'm curious if it can write some
00:02:01 - 00:02:05: comments for me so I'm going to come up
00:02:03 - 00:02:07: here and try to write a JS St style
00:02:05 - 00:02:09: comment and let's see if it's able to
00:02:07 - 00:02:11: autoc complete this I'll remove this
00:02:09 - 00:02:12: thing that was added by vs code okay so
00:02:11 - 00:02:15: it's autoc completing something we have
00:02:12 - 00:02:18: a parameter of n that is correct we do
00:02:15 - 00:02:20: return a number okay and now we're sort
00:02:18 - 00:02:23: of going off the rails a bit we have API
00:02:20 - 00:02:25: private and we're just sort of adding
00:02:23 - 00:02:27: random stuff now it was close it started
00:02:25 - 00:02:28: getting it right and then it was sort of
00:02:27 - 00:02:30: going off the rails a little bit but
00:02:28 - 00:02:32: what if I just add a blank comment like
00:02:30 - 00:02:34: this it just says factorial function
00:02:32 - 00:02:36: that's not particularly useful I know
00:02:34 - 00:02:38: that by just the name of the function
00:02:36 - 00:02:39: it' be better to tell me things like
00:02:38 - 00:02:40: what inputs it takes and what it returns
00:02:39 - 00:02:42: all right so now what I want to do is
00:02:40 - 00:02:44: see if it can generate some test cases
00:02:42 - 00:02:47: for me so let's come down here and just
00:02:44 - 00:02:49: say test cases and see what it generates
00:02:47 - 00:02:53: below us okay so it generated a bunch of
00:02:49 - 00:02:55: test cases factorial 5 120 0 1 2 3 4 and
00:02:53 - 00:02:57: if I run this that is exactly what I get
00:02:55 - 00:02:59: so these test cases are correct I'm
00:02:57 - 00:03:01: curious also there was a test cases
00:02:59 - 00:03:03: command here here so let's do that as
00:03:01 - 00:03:05: well and see what we get so generate
00:03:03 - 00:03:07: test for code and let's see what it does
00:03:05 - 00:03:09: with that okay so it does basically the
00:03:07 - 00:03:11: same thing and we got a few more test
00:03:09 - 00:03:12: cases now what about a slightly more
00:03:11 - 00:03:15: complicated function so let's say
00:03:12 - 00:03:17: function let's do merge sort okay so it
00:03:15 - 00:03:19: knows it takes in an array okay so it
00:03:17 - 00:03:21: does seem to be a merge sort function
00:03:19 - 00:03:23: but it just added this merge function
00:03:21 - 00:03:25: and didn't actually give that to me so
00:03:23 - 00:03:27: let's see if we can get it to add that
00:03:25 - 00:03:29: as well so function merge it seems to
00:03:27 - 00:03:31: know that that's what it needs to add
00:03:29 - 00:03:32: okay so it seems to have added the
00:03:31 - 00:03:36: function and let's add a test case as
00:03:32 - 00:03:38: well so let's say merge sort test cases
00:03:36 - 00:03:40: and let's see if it adds some of those
00:03:38 - 00:03:41: all right so merge sort the first one is
00:03:40 - 00:03:43: just already sorted the second one is in
00:03:41 - 00:03:45: backwards order and it looks like it did
00:03:43 - 00:03:47: sort those correctly and let's see if we
00:03:45 - 00:03:49: can add some more test cases all right
00:03:47 - 00:03:51: so that one just said merge sort of one
00:03:49 - 00:03:53: and it didn't really give me full test
00:03:51 - 00:03:54: case oh wait it started doing it and now
00:03:53 - 00:03:56: we just have basically the same test
00:03:54 - 00:03:58: case again I would like to see it just
00:03:56 - 00:04:00: generate more random test cases let's
00:03:58 - 00:04:02: see if we use the command and instead
00:04:00 - 00:04:05: generate test for code all right so it
00:04:02 - 00:04:06: did generate a few more merge sort test
00:04:05 - 00:04:09: cases but these are basically the exact
00:04:06 - 00:04:11: same so we have 3 2 1 10 n down to zero
00:04:09 - 00:04:13: and then all ones but I'd like to see
00:04:11 - 00:04:15: something with just like random numbers
00:04:13 - 00:04:16: and random orders but regardless it was
00:04:15 - 00:04:18: pretty close and definitely still
00:04:16 - 00:04:20: helpful okay so tab 9 works but there's
00:04:18 - 00:04:21: better options that we'll see later in
00:04:20 - 00:04:23: the video so I'm going to put it in the
00:04:21 - 00:04:24: decent tier for now and by the way in
00:04:23 - 00:04:26: this video we'll be building up this
00:04:24 - 00:04:28: tier list of all of these different AI
00:04:26 - 00:04:30: coding tools all the way from the 10x
00:04:28 - 00:04:32: developer tools down to the artificially
00:04:30 - 00:04:34: unintelligent okay so next we have chat
00:04:32 - 00:04:35: GPT but I'm not going to spend too much
00:04:34 - 00:04:37: time on this because I'm sure you've all
00:04:35 - 00:04:38: used it at this point and I've made a
00:04:37 - 00:04:41: lot of videos on it but here's my
00:04:38 - 00:04:42: thoughts on chat GPT as a coding tool as
00:04:41 - 00:04:44: it stands right now so I do think it's
00:04:42 - 00:04:47: an amazing tool and a lot of the other
00:04:44 - 00:04:50: ones on this list actually use the GPT
00:04:47 - 00:04:52: API but that said I don't think for most
00:04:50 - 00:04:53: coding tasks that it's actually the best
00:04:52 - 00:04:55: option it's great if you're trying to
00:04:53 - 00:04:56: learn something because it gives you so
00:04:55 - 00:04:59: much extra context and it's great at
00:04:56 - 00:05:00: holding a conversation however if you
00:04:59 - 00:05:02: are just just trying to work through
00:05:00 - 00:05:04: some problem going back and forth
00:05:02 - 00:05:06: between your code editor and chat GPT
00:05:04 - 00:05:08: just adds a lot of context switching
00:05:06 - 00:05:10: which I think can be a bit of a problem
00:05:08 - 00:05:12: and this can still work but why do this
00:05:10 - 00:05:14: when there's other options on this list
00:05:12 - 00:05:15: that work just as well without the extra
00:05:14 - 00:05:16: context switching and the other thing I
00:05:15 - 00:05:19: don't like about it is that it doesn't
00:05:16 - 00:05:20: really site any sources and it just
00:05:19 - 00:05:22: confidently tells you incorrect
00:05:20 - 00:05:24: information sometimes which of course
00:05:22 - 00:05:26: isn't a great thing so on occasion you
00:05:24 - 00:05:27: just get bad information and you don't
00:05:26 - 00:05:29: know it's bad because it's not citing
00:05:27 - 00:05:31: sources and it's so confident in the
00:05:29 - 00:05:32: information it's giving you that said of
00:05:31 - 00:05:35: course chat GPT is useful so I'm going
00:05:32 - 00:05:36: to put it in the actually useful tier
00:05:35 - 00:05:38: but there are still ones that are going
00:05:36 - 00:05:39: to be going above it next have GitHub
00:05:38 - 00:05:42: co-pilot so it's going to have an AI
00:05:39 - 00:05:45: chat similar to chat GPT we can also do
00:05:42 - 00:05:47: command I to ask questions in line or we
00:05:45 - 00:05:49: can just use autoc completion similar to
00:05:47 - 00:05:52: what we had in tab 9 so we can say
00:05:49 - 00:05:53: function factorial once again and it's
00:05:52 - 00:05:55: going to complete the function
00:05:53 - 00:05:57: interestingly it changed the name to
00:05:55 - 00:06:00: factorial Li but I guess that's fine and
00:05:57 - 00:06:03: we say if the number is zero return one
00:06:00 - 00:06:04: otherwise return num * factorial num
00:06:03 - 00:06:06: minus one and this will work but it's
00:06:04 - 00:06:08: not going to work for negative numbers
00:06:06 - 00:06:09: so let's see if it actually able to fix
00:06:08 - 00:06:13: that so I'm going to come here and
00:06:09 - 00:06:16: simply say handle negative numbers and
00:06:13 - 00:06:17: let's see what it does to fix this nice
00:06:16 - 00:06:20: so it gives me sort of a diff here where
00:06:17 - 00:06:23: it added this if number is less than
00:06:20 - 00:06:25: zero return not a number which seems
00:06:23 - 00:06:26: like a totally reasonable way to do this
00:06:25 - 00:06:28: I think I would have preferred it just
00:06:26 - 00:06:30: throw an error but I think this works as
00:06:28 - 00:06:32: well all right now come over here and
00:06:30 - 00:06:35: let's just ask it what is the time
00:06:32 - 00:06:37: complexity of this code and let's see if
00:06:35 - 00:06:38: it's able to answer that question all
00:06:37 - 00:06:40: right so it says the time complexity is
00:06:38 - 00:06:43: o in which is completely correct let's
00:06:40 - 00:06:45: see if it's able to add a comment up
00:06:43 - 00:06:47: here we tried to do this last time and
00:06:45 - 00:06:49: it didn't really work so it wants to add
00:06:47 - 00:06:51: something that's like challenge let's do
00:06:49 - 00:06:54: JS do style and see if it figures out
00:06:51 - 00:06:57: that that's what I want factorial lie a
00:06:54 - 00:06:58: number okay so it's just kind of adding
00:06:57 - 00:07:00: comments like that but let's see because
00:06:58 - 00:07:02: we do have the option here to do the
00:07:00 - 00:07:05: sort of inline command ey thing so let's
00:07:02 - 00:07:07: say JS doc comment and let's see if it
00:07:05 - 00:07:10: can just add that in for me so it was
00:07:07 - 00:07:12: able to generate this JS do comment with
00:07:10 - 00:07:13: the parameter and the return so if you
00:07:12 - 00:07:15: did want to use some commenting syntax
00:07:13 - 00:07:17: like JS do it seems to do a pretty good
00:07:15 - 00:07:18: job of that all right so now what I want
00:07:17 - 00:07:20: is some test cases so let's see we have
00:07:18 - 00:07:21: some commands here as well so we can
00:07:20 - 00:07:24: explain the code let's actually do that
00:07:21 - 00:07:26: first and then we can after we explain
00:07:24 - 00:07:27: the code do the test cases you can pause
00:07:26 - 00:07:29: and read the whole thing if you want but
00:07:27 - 00:07:31: this is a great explanation of how the
00:07:29 - 00:07:33: factorial function actually works so now
00:07:31 - 00:07:36: let's see if we can generate some test
00:07:33 - 00:07:38: cases so let's go to/ tests and see what
00:07:36 - 00:07:41: it generates for us awesome so it
00:07:38 - 00:07:43: actually generated an entire file for
00:07:41 - 00:07:46: test and it uses the just testing
00:07:43 - 00:07:48: framework so whereas tab9 was just sort
00:07:46 - 00:07:50: of adding some console logs this used an
00:07:48 - 00:07:52: entire testing framework and created an
00:07:50 - 00:07:54: entire test suite and these tests look
00:07:52 - 00:07:56: pretty exhaustive they include negative
00:07:54 - 00:07:58: numbers which is good and I like how we
00:07:56 - 00:08:00: have a few options here so we can copy
00:07:58 - 00:08:02: the code we can insert the code into
00:08:00 - 00:08:05: this file or we can insert this into a
00:08:02 - 00:08:07: brand new file so it's going to create
00:08:05 - 00:08:08: this testing file for us which is super
00:08:07 - 00:08:10: cool all right so now coming back to the
00:08:08 - 00:08:12: main file let's try to do the same merge
00:08:10 - 00:08:15: sort function again so let's say
00:08:12 - 00:08:17: function merge sort and see if it's able
00:08:15 - 00:08:19: to autocomplete this for us okay so it
00:08:17 - 00:08:21: takes in an array and it did the same
00:08:19 - 00:08:22: thing that tab 9 did where it added this
00:08:21 - 00:08:24: merge function but didn't actually
00:08:22 - 00:08:25: implement it for us so let's see if it
00:08:24 - 00:08:27: figures out on its own okay so it does
00:08:25 - 00:08:29: figure out that we need the merge
00:08:27 - 00:08:31: function just like tab 9 did let's see
00:08:29 - 00:08:34: if it's able to implement that function
00:08:31 - 00:08:37: it is now let's see can we just get test
00:08:34 - 00:08:39: cases for merge sort all right so it
00:08:37 - 00:08:41: generated test cases so let's just
00:08:39 - 00:08:45: accept this and interestingly it
00:08:41 - 00:08:46: actually put it in a new file for us I
00:08:45 - 00:08:48: probably had an option not to do that
00:08:46 - 00:08:49: but I'm just going to copy this into the
00:08:48 - 00:08:51: same file it's also interesting that
00:08:49 - 00:08:53: this one just generated it with console
00:08:51 - 00:08:55: logs whereas when I did it over here in
00:08:53 - 00:08:57: the chat function it actually used just
00:08:55 - 00:08:59: although I'm sure if I specified which I
00:08:57 - 00:09:00: wanted it would have done that for me
00:08:59 - 00:09:02: but we can run this and yeah these
00:09:00 - 00:09:03: sorting seems to be working and these
00:09:02 - 00:09:05: are pretty good test cases much better
00:09:03 - 00:09:07: test cases than we got from tab n
00:09:05 - 00:09:08: because they're just more exhaustive for
00:09:07 - 00:09:09: example we have arrays with duplicate
00:09:08 - 00:09:11: elements and elements in different
00:09:09 - 00:09:13: orders instead of just having like 0
00:09:11 - 00:09:15: through 10 and 10 through zero so yeah
00:09:13 - 00:09:17: I'm a huge fan of copilot I've been
00:09:15 - 00:09:18: playing with this all day long and it's
00:09:17 - 00:09:20: working absolutely incredibly I've been
00:09:18 - 00:09:22: trying to find some examples to give you
00:09:20 - 00:09:24: all where it's not working very well and
00:09:22 - 00:09:25: I just haven't been able to find many I
00:09:24 - 00:09:27: do wish sometimes it would give a little
00:09:25 - 00:09:28: bit more context with its sensors I
00:09:27 - 00:09:30: think chat GPT on its own does a bit of
00:09:28 - 00:09:33: a better job with this but overall
00:09:30 - 00:09:35: co-pilot is incredible as a tool for
00:09:33 - 00:09:37: actually writing code more efficiently I
00:09:35 - 00:09:39: think chat GPT is where it go to
00:09:37 - 00:09:41: actually learn something and co-pilot to
00:09:39 - 00:09:43: just code more efficiently so this is
00:09:41 - 00:09:45: going all the way at the top in the 10x
00:09:43 - 00:09:46: developer category all right so next we
00:09:45 - 00:09:48: have Bard and I'm not going to waste a
00:09:46 - 00:09:49: ton of time on Bard just like chat GPT
00:09:48 - 00:09:52: because I'm sure you get the idea of how
00:09:49 - 00:09:54: it works but here's my thoughts on Bard
00:09:52 - 00:09:56: and Bard specifically compared to chat
00:09:54 - 00:09:58: GPT so I spent a few hours giving the
00:09:56 - 00:10:00: exact same prompts to Bard and chat GPT
00:09:58 - 00:10:03: today and honestly I was pretty
00:10:00 - 00:10:05: surprised that in most cases Bard gave
00:10:03 - 00:10:08: basically the exact same answer that
00:10:05 - 00:10:10: said there were some pros and some cons
00:10:08 - 00:10:12: so the big Pro I saw with Bard is that
00:10:10 - 00:10:14: it does actually site some sources which
00:10:12 - 00:10:15: is a great way to get some further
00:10:14 - 00:10:17: reading and just to know that the
00:10:15 - 00:10:19: information it's giving you is correct
00:10:17 - 00:10:22: but on the negative side it does seem to
00:10:19 - 00:10:23: just be a little bit less accurate than
00:10:22 - 00:10:25: chat GPT for example I asked both of
00:10:23 - 00:10:28: them to generate a tic tac toe game
00:10:25 - 00:10:30: using react and chat gpt's game worked
00:10:28 - 00:10:32: perfectly and B's code was close but it
00:10:30 - 00:10:33: didn't fully work it didn't change which
00:10:32 - 00:10:35: player it was and it wasn't correct at
00:10:33 - 00:10:37: figuring out who the actual winner of
00:10:35 - 00:10:39: the game was so I'm going to put Bard in
00:10:37 - 00:10:42: the actually useful category with chat
00:10:39 - 00:10:44: GPT although it's definitely in my mind
00:10:42 - 00:10:46: a notch below chat GPT within that same
00:10:44 - 00:10:47: category I don't think there's any
00:10:46 - 00:10:50: problem with using it but personally I
00:10:47 - 00:10:51: would just use GPT instead of Bard okay
00:10:50 - 00:10:53: so next we have Amazon code whisper
00:10:51 - 00:10:55: which is sort of Amazon's version of
00:10:53 - 00:10:56: co-pilot although it doesn't have a chat
00:10:55 - 00:10:59: feature this time but let's try it out
00:10:56 - 00:11:01: so let's say function and again the
00:10:59 - 00:11:02: factorial function you can take any
00:11:01 - 00:11:04: number it's not autoc completing this
00:11:02 - 00:11:06: part yet but let's see does it
00:11:04 - 00:11:08: autocomplete now okay so it does and we
00:11:06 - 00:11:11: have if number is less than or equal to
00:11:08 - 00:11:13: one return one otherwise return num time
00:11:11 - 00:11:15: factorial num minus one it added a weird
00:11:13 - 00:11:17: blank line at the end here but I'll
00:11:15 - 00:11:19: delete that and this is correct and now
00:11:17 - 00:11:22: let's see if we can get it to generate
00:11:19 - 00:11:24: some test cases so let's say test cases
00:11:22 - 00:11:26: and let's see if it generates anything
00:11:24 - 00:11:28: okay so factorial of zero is one and
00:11:26 - 00:11:29: then let's see do we get more factorial
00:11:28 - 00:11:31: of one
00:11:29 - 00:11:32: do we keep getting them factorial 5 I
00:11:31 - 00:11:35: don't like that it's doing one line at a
00:11:32 - 00:11:37: time but this is working and we can run
00:11:35 - 00:11:38: this and this is all correct but so now
00:11:37 - 00:11:41: let's do the same tests we did with the
00:11:38 - 00:11:43: others and try merge sort so we can say
00:11:41 - 00:11:47: function merge sort let's see if it's
00:11:43 - 00:11:48: able to automatically do this for us so
00:11:47 - 00:11:51: let's see if it's going to complete the
00:11:48 - 00:11:52: function okay there it goes and again it
00:11:51 - 00:11:54: added a blank line at the end which is
00:11:52 - 00:11:56: odd and it did the same merge thing
00:11:54 - 00:11:57: where it doesn't give us the merge
00:11:56 - 00:11:59: function but that seems to be a
00:11:57 - 00:12:01: recurring theme and this one though is
00:11:59 - 00:12:02: not automatically knowing that now it's
00:12:01 - 00:12:06: time for the merge function but let's
00:12:02 - 00:12:08: try doing function merge left and right
00:12:06 - 00:12:11: and there it goes okay so it added the
00:12:08 - 00:12:13: rest of the merge function for merge
00:12:11 - 00:12:14: sort and I don't know where that came
00:12:13 - 00:12:16: from I might have typed that though now
00:12:14 - 00:12:21: let's see if we can also get some test
00:12:16 - 00:12:23: cases so test cases for merge sort let's
00:12:21 - 00:12:25: see what it generates nice so this one
00:12:23 - 00:12:27: actually generated a bunch of different
00:12:25 - 00:12:29: test cases although again these are
00:12:27 - 00:12:30: already sorted for the most part so
00:12:29 - 00:12:32: great test cases but at least it was
00:12:30 - 00:12:34: able to generate some and I'm curious
00:12:32 - 00:12:35: again to see if this can write comments
00:12:34 - 00:12:36: for me but I'm guessing it can't because
00:12:35 - 00:12:38: I don't really have a great way to
00:12:36 - 00:12:39: actually interface with it to tell it
00:12:38 - 00:12:42: that that's what I want but I'm going to
00:12:39 - 00:12:44: try once again to put the beginnings of
00:12:42 - 00:12:46: a js. comment and see what it
00:12:44 - 00:12:48: autocompletes to if it autocompletes
00:12:46 - 00:12:51: anything at all which doesn't seem like
00:12:48 - 00:12:53: it's doing anything so that's a no on a
00:12:51 - 00:12:55: j. comment what about just a standard
00:12:53 - 00:12:56: comment all right so that doesn't seem
00:12:55 - 00:12:59: like it's going to generate so I'm going
00:12:56 - 00:13:00: to do option C so I manually generate it
00:12:59 - 00:13:02: write a function that takes in a number
00:13:00 - 00:13:04: and returns its factorial so this is
00:13:02 - 00:13:06: like a prompt for a question on a quiz
00:13:04 - 00:13:08: rather than an actual comment so that's
00:13:06 - 00:13:10: a bit strange as well although I did
00:13:08 - 00:13:12: want to show one cool feature of code
00:13:10 - 00:13:13: whisper which is that it has this
00:13:12 - 00:13:16: reference log where it actually gives
00:13:13 - 00:13:18: you an idea of where the code came from
00:13:16 - 00:13:21: so for example it actually says that
00:13:18 - 00:13:23: this was from a reference from this code
00:13:21 - 00:13:25: Wars repository which is kind of cool to
00:13:23 - 00:13:27: be able to see that and then to make
00:13:25 - 00:13:29: sure that the code that's being used
00:13:27 - 00:13:31: doesn't have some license that you can't
00:13:29 - 00:13:33: actually use it so overall code whisper
00:13:31 - 00:13:35: is fine but its only feature is
00:13:33 - 00:13:37: basically just one of the co-pilot
00:13:35 - 00:13:39: features and it seems to do it worse
00:13:37 - 00:13:41: than co-pilot does it might be better if
00:13:39 - 00:13:43: you're specifically using AWS features
00:13:41 - 00:13:45: and it might be really good at autocom
00:13:43 - 00:13:47: completing for those AWS specific
00:13:45 - 00:13:49: features but other than that for just
00:13:47 - 00:13:50: like General coding I don't think it's
00:13:49 - 00:13:52: all that great so I'm going to put it in
00:13:50 - 00:13:54: the acceptable category all right so
00:13:52 - 00:13:55: next we have Source graph Cody which is
00:13:54 - 00:13:58: pretty interesting so it's similar to
00:13:55 - 00:13:59: tab9 and co-pilot and all of these it's
00:13:58 - 00:14:01: got an AI chat and the ability to
00:13:59 - 00:14:03: autocomplete code but what it also
00:14:01 - 00:14:05: claims to be able to do is understand
00:14:03 - 00:14:07: your code repository and to make
00:14:05 - 00:14:08: suggestions based on the entire
00:14:07 - 00:14:10: repository so we'll see how that works
00:14:08 - 00:14:12: in a minute but first let's give it some
00:14:10 - 00:14:14: of these same tests so let's add a
00:14:12 - 00:14:16: factorial function okay so it knows it
00:14:14 - 00:14:18: takes in a number and it autocom
00:14:16 - 00:14:20: completed the whole function so if n is
00:14:18 - 00:14:23: one return one otherwise return n *
00:14:20 - 00:14:25: factorial of n minus one so this is
00:14:23 - 00:14:28: correct again although this is not going
00:14:25 - 00:14:30: to work for the case of zero or a
00:14:28 - 00:14:32: negative number so let's see if we can
00:14:30 - 00:14:34: actually just get it to fix this so we
00:14:32 - 00:14:38: can add an inline question so let's say
00:14:34 - 00:14:39: can you improve this function so I'll
00:14:38 - 00:14:41: give it this open-ended question to see
00:14:39 - 00:14:43: how it does and if it doesn't answer it
00:14:41 - 00:14:46: I'll give it a more direct question to
00:14:43 - 00:14:47: fix the cases it's not handling okay so
00:14:46 - 00:14:49: it says here's a few ways the function
00:14:47 - 00:14:51: can be improved use a loop instead of
00:14:49 - 00:14:53: recursion to avoid call stack limits on
00:14:51 - 00:14:55: large inputs okay that's not what I was
00:14:53 - 00:14:56: looking for but that is a good way to
00:14:55 - 00:14:59: improve the function and then we have
00:14:56 - 00:15:01: use big int to allow for larg inputs I
00:14:59 - 00:15:03: don't know that we need that but decent
00:15:01 - 00:15:05: suggestion I guess use memorization so
00:15:03 - 00:15:08: another actually good suggestion to
00:15:05 - 00:15:09: improve the function and simplify the
00:15:08 - 00:15:10: conditional logic I don't really like
00:15:09 - 00:15:13: this I don't think this is simpler I
00:15:10 - 00:15:16: think it's just less lines but none of
00:15:13 - 00:15:19: these are actually getting at exactly
00:15:16 - 00:15:22: what we want so let me get rid of this
00:15:19 - 00:15:22: and let's
00:15:22 - 00:15:28: say how do I add another question in
00:15:25 - 00:15:31: here do I close this I guess kind of a
00:15:28 - 00:15:36: conf using UI okay so let's say make
00:15:31 - 00:15:39: this handle inputs less than one ask
00:15:36 - 00:15:41: Cody okay so here's how you can handle
00:15:39 - 00:15:43: inputs less than one and it added this
00:15:41 - 00:15:45: check if n is less than one return one
00:15:43 - 00:15:47: so this kind of handles what I asked it
00:15:45 - 00:15:49: to do but this is just redundant because
00:15:47 - 00:15:51: you don't need all of this it can just
00:15:49 - 00:15:55: be if n is less than or equal to one and
00:15:51 - 00:15:56: also if n is less than zero we probably
00:15:55 - 00:15:58: don't want to be returning one we should
00:15:56 - 00:16:01: be throwing an error or returning in a
00:15:58 - 00:16:03: in but some of the other ones did that
00:16:01 - 00:16:06: as well so not horrible but not a great
00:16:03 - 00:16:09: suggestion either but now let's see if
00:16:06 - 00:16:10: it can actually add a comment so let's
00:16:09 - 00:16:12: start by doing the test to see if it
00:16:10 - 00:16:14: just autocompletes the comment for me
00:16:12 - 00:16:17: which has not worked on any of them but
00:16:14 - 00:16:20: we'll see if it works so parameter Good
00:16:17 - 00:16:23: Start return
00:16:20 - 00:16:24: number and we're sort of lost there so
00:16:23 - 00:16:26: sort of started doing a good comment
00:16:24 - 00:16:29: what if we just do the standard comment
00:16:26 - 00:16:31: syntax factorial. Js so not a very good
00:16:29 - 00:16:36: comment there either but now let's try
00:16:31 - 00:16:38: to do JS doc comment like this ask Cody
00:16:36 - 00:16:40: okay so that took a very long time to
00:16:38 - 00:16:42: actually come back and it wasn't able to
00:16:40 - 00:16:43: actually do it it explained what a js.
00:16:42 - 00:16:46: comment is but it wasn't able to
00:16:43 - 00:16:48: actually add it in for me but okay let's
00:16:46 - 00:16:49: come over to Cody chat now and let's say
00:16:48 - 00:16:51: let's see what we can get with the
00:16:49 - 00:16:53: forward slash let's do some generate
00:16:51 - 00:16:55: unit tests and see if it can generate
00:16:53 - 00:16:57: some good test cases for us awesome so
00:16:55 - 00:16:59: I'm going to expand this a bit and it
00:16:57 - 00:17:01: generated some just tests for us so I
00:16:59 - 00:17:02: like that it used an actual testing
00:17:01 - 00:17:05: framework and we have some reasonable
00:17:02 - 00:17:06: tests interestingly it does know to
00:17:05 - 00:17:08: throw an error on a negative in but it
00:17:06 - 00:17:09: didn't actually do that in the function
00:17:08 - 00:17:11: which is kind of funny so this test
00:17:09 - 00:17:12: would actually fail but I guess that's
00:17:11 - 00:17:14: actually good because that means it's
00:17:12 - 00:17:15: going to catch its own air all right but
00:17:14 - 00:17:17: now what I want to do is test this
00:17:15 - 00:17:19: ability to understand the entire
00:17:17 - 00:17:21: codebase so I'm actually in the codebase
00:17:19 - 00:17:22: for a video you might have seen on this
00:17:21 - 00:17:25: channel a few months back where I had
00:17:22 - 00:17:27: some Fiverr developers build this sort
00:17:25 - 00:17:29: of task management application so this
00:17:27 - 00:17:31: is a task management application and
00:17:29 - 00:17:35: what I'm going to do is ask Cody about
00:17:31 - 00:17:41: it so first of all let's say
00:17:35 - 00:17:42: can you show me the logic for saving a
00:17:41 - 00:17:44: task so if I'm new to this codebase I
00:17:42 - 00:17:46: might want to see where exactly is that
00:17:44 - 00:17:48: logic for saving a task so let's see if
00:17:46 - 00:17:50: it's able to actually find it within the
00:17:48 - 00:17:51: code base okay so it says it read eight
00:17:50 - 00:17:53: files and it wasn't able to figure it
00:17:51 - 00:17:55: out so let's see what file was it
00:17:53 - 00:17:57: actually read so all it read was this
00:17:55 - 00:17:58: file I have opened which I'm probably
00:17:57 - 00:18:00: not helping it by having that open and
00:17:58 - 00:18:02: then a bunch of node modules files so it
00:18:00 - 00:18:04: didn't even really look to any of the
00:18:02 - 00:18:07: actual codebase but let's close this
00:18:04 - 00:18:10: file to give it the benefit of the doubt
00:18:07 - 00:18:12: and maybe go into something near the
00:18:10 - 00:18:14: tasks let's actually even go into I
00:18:12 - 00:18:16: think it's this task section that
00:18:14 - 00:18:18: actually has that logic yeah so this is
00:18:16 - 00:18:21: the one that actually has the saving
00:18:18 - 00:18:22: task logic in it so now let's ask the
00:18:21 - 00:18:24: same question but it will give it a
00:18:22 - 00:18:29: little bit more context so let's say
00:18:24 - 00:18:30: this is a task management react
00:18:29 - 00:18:37: application
00:18:30 - 00:18:40: find the logic that saves a task on
00:18:37 - 00:18:42: the server okay so let's see what we got
00:18:40 - 00:18:44: back so first of all what files did it
00:18:42 - 00:18:46: even read so again it just sort of
00:18:44 - 00:18:48: looked through the node modules and then
00:18:46 - 00:18:50: it looked at this file that I've opened
00:18:48 - 00:18:51: and one other file so this whole idea of
00:18:50 - 00:18:54: it just looking through the node modules
00:18:51 - 00:18:56: is not very useful but okay let's see
00:18:54 - 00:19:00: what exactly it shows so we have used
00:18:56 - 00:19:02: dispatch and save task from actions and
00:19:00 - 00:19:04: handle safe task dispatch safe task so
00:19:02 - 00:19:07: is there any way to actually find this
00:19:04 - 00:19:09: in the codes let's see this is going to
00:19:07 - 00:19:11: copy it this is going to insert it and
00:19:09 - 00:19:13: this is going to save it in a new file
00:19:11 - 00:19:15: so I don't see any way to actually find
00:19:13 - 00:19:18: this but let me see if I can find this
00:19:15 - 00:19:20: in here if this is actually the correct
00:19:18 - 00:19:21: code yeah so as far as I can tell the
00:19:20 - 00:19:23: code that it gave me back is not
00:19:21 - 00:19:26: actually code from the repo so this is
00:19:23 - 00:19:28: the actual save task function which
00:19:26 - 00:19:30: looks nothing like this so
00:19:28 - 00:19:32: it really wasn't able to actually find
00:19:30 - 00:19:34: that and provide me any useful
00:19:32 - 00:19:35: information on how saving a task Works
00:19:34 - 00:19:38: in this repository okay so my thoughts
00:19:35 - 00:19:40: on Source graph Cody first of all it's
00:19:38 - 00:19:42: just sort of slow probably because it's
00:19:40 - 00:19:44: having to parse all of these files and
00:19:42 - 00:19:46: it doesn't even really do a good job at
00:19:44 - 00:19:47: the thing it says it's made to do of
00:19:46 - 00:19:49: actually parsing files it was mostly
00:19:47 - 00:19:51: just looking through the node modules
00:19:49 - 00:19:53: and even when I sort of spoonfed it the
00:19:51 - 00:19:55: right file to look at it still wasn't
00:19:53 - 00:19:57: able to find the logic that had
00:19:55 - 00:19:59: basically the exact same function name
00:19:57 - 00:20:01: as what I asked it to find so it didn't
00:19:59 - 00:20:03: do a great job of actually integrating
00:20:01 - 00:20:04: with the repository at all from what I
00:20:03 - 00:20:06: could tell so this is a cool idea and I
00:20:04 - 00:20:07: like that they're trying to do something
00:20:06 - 00:20:09: different and this has been one of my
00:20:07 - 00:20:11: main complaints about AI coding
00:20:09 - 00:20:12: assistants is like they work in these
00:20:11 - 00:20:15: small projects but the second you go
00:20:12 - 00:20:17: work at Google and there's two million
00:20:15 - 00:20:19: files with aund lines of code in each of
00:20:17 - 00:20:21: them they're just not that useful
00:20:19 - 00:20:23: anymore and this is trying to solve that
00:20:21 - 00:20:25: but it just doesn't seem to actually be
00:20:23 - 00:20:27: solving it in a very good way that said
00:20:25 - 00:20:29: the code Auto completion was decent and
00:20:27 - 00:20:31: the AI chatbot was also for the most
00:20:29 - 00:20:33: part decent as well so I do hope they
00:20:31 - 00:20:35: continue working on this and maybe one
00:20:33 - 00:20:37: day we'll be at the point where it truly
00:20:35 - 00:20:39: understands your code repository but I
00:20:37 - 00:20:40: don't think it's there just yet so I'm
00:20:39 - 00:20:42: going to put it in the acceptable
00:20:40 - 00:20:44: category okay so next we have codium ai
00:20:42 - 00:20:46: which is really cool because it's not
00:20:44 - 00:20:48: trying to do what all of the other AI
00:20:46 - 00:20:51: tools are doing so it's not trying to be
00:20:48 - 00:20:53: a Do-it all code completion tool instead
00:20:51 - 00:20:54: it's just very very good at testing your
00:20:53 - 00:20:57: code and helping you improve your code
00:20:54 - 00:20:59: so I'm going to test this factorial
00:20:57 - 00:21:01: function we have and see what it's able
00:20:59 - 00:21:03: to come up with okay so first of all it
00:21:01 - 00:21:05: generated a test suite for us so we can
00:21:03 - 00:21:07: see the configuration it's using just
00:21:05 - 00:21:09: and we could actually change the testing
00:21:07 - 00:21:11: framework if we want we can see the
00:21:09 - 00:21:13: behaviors that it actually covers so we
00:21:11 - 00:21:15: have like the Happy path the edge cases
00:21:13 - 00:21:17: as well as some other behaviors and we
00:21:15 - 00:21:19: can see each individual test case and we
00:21:17 - 00:21:20: can actually ask it to change any of
00:21:19 - 00:21:22: these or to run it to make sure they're
00:21:20 - 00:21:25: actually working and we can actually see
00:21:22 - 00:21:27: it's handling some things that my code
00:21:25 - 00:21:29: doesn't handle so these test cases would
00:21:27 - 00:21:31: actually find errors in my code which is
00:21:29 - 00:21:33: amazing so for example it knows we need
00:21:31 - 00:21:35: to throw an error if we get a decimal as
00:21:33 - 00:21:37: an input but I will say it's not perfect
00:21:35 - 00:21:39: either so for example here it says we
00:21:37 - 00:21:41: should return one for a non-numeric
00:21:39 - 00:21:43: input value but I think here we should
00:21:41 - 00:21:48: probably be throwing an error so let's
00:21:43 - 00:21:50: say instead of returning one make these
00:21:48 - 00:21:53: throw an error so let's say that this is
00:21:50 - 00:21:55: not a test case we like this is not the
00:21:53 - 00:21:57: expected value we actually have and okay
00:21:55 - 00:22:00: now it says it is expecting to throw an
00:21:57 - 00:22:02: air so let's go to the code explanation
00:22:00 - 00:22:04: as well okay so we have code analysis
00:22:02 - 00:22:06: the inputs and the flow of the code as
00:22:04 - 00:22:08: well as the output okay and we also have
00:22:06 - 00:22:11: some example usage this is awesome this
00:22:08 - 00:22:12: code explanation is amazing this looks
00:22:11 - 00:22:14: like professionally written
00:22:12 - 00:22:16: documentation so that is great and then
00:22:14 - 00:22:17: code suggestion and actually I'm just
00:22:16 - 00:22:19: going to hide the chat because it
00:22:17 - 00:22:22: basically does the same thing in this
00:22:19 - 00:22:24: case so here we have our suggestions so
00:22:22 - 00:22:25: first the code should check if num is a
00:22:24 - 00:22:27: positive number if not it should throw
00:22:25 - 00:22:30: an error so let's select this and say we
00:22:27 - 00:22:32: want to do that and let's see what else
00:22:30 - 00:22:33: we have the code uses recursion to
00:22:32 - 00:22:35: calculate factorial instead it should
00:22:33 - 00:22:38: use a loop to avoid potential stack
00:22:35 - 00:22:40: Overflow errors also a good suggestion
00:22:38 - 00:22:42: it depends on your exact use case but I
00:22:40 - 00:22:44: do think in most cases for factorial
00:22:42 - 00:22:46: even though it's a sort of example we
00:22:44 - 00:22:47: use for recursion a lot it actually
00:22:46 - 00:22:49: makes more sense to just do it
00:22:47 - 00:22:51: iteratively because you won't have that
00:22:49 - 00:22:53: stack Overflow so let's select this as
00:22:51 - 00:22:56: well the code should check if number is
00:22:53 - 00:22:58: larger than 170 if so it should return
00:22:56 - 00:23:00: Infinity because JavaScript cannot
00:22:58 - 00:23:02: accurately represent larger numbers than
00:23:00 - 00:23:04: 170 factorial so I don't know if 170
00:23:02 - 00:23:06: factorial is exactly the cut off but
00:23:04 - 00:23:08: that's a very interesting point so let's
00:23:06 - 00:23:10: say we want to do that as well and
00:23:08 - 00:23:12: somebody down in the comments can let me
00:23:10 - 00:23:14: know if 170 is actually the cut off of
00:23:12 - 00:23:16: the max number in JavaScript or not but
00:23:14 - 00:23:18: anyways next we have the code should
00:23:16 - 00:23:21: check if num is zero if so it should
00:23:18 - 00:23:23: return one as zero factorial is one so
00:23:21 - 00:23:24: the current code actually does handle
00:23:23 - 00:23:26: this but maybe with the other edits it
00:23:24 - 00:23:28: wouldn't so let's select this and say we
00:23:26 - 00:23:29: want to do that as well the code should
00:23:28 - 00:23:32: check if num is in a in if so it should
00:23:29 - 00:23:34: throw an err that also seems reasonable
00:23:32 - 00:23:36: okay so let's prepare these code changes
00:23:34 - 00:23:37: and see what it says to change awesome
00:23:36 - 00:23:39: so it seems to have done all of that so
00:23:37 - 00:23:41: let's apply this to the code and see
00:23:39 - 00:23:44: what exactly we get here so now we have
00:23:41 - 00:23:46: if the type of number is not number or
00:23:44 - 00:23:49: number is less than zero or number is
00:23:46 - 00:23:51: not an integer we are going to say input
00:23:49 - 00:23:53: must be a positive integer so that's
00:23:51 - 00:23:55: good except for this error message isn't
00:23:53 - 00:23:57: perfect because it can also be zero
00:23:55 - 00:23:59: which I don't think is considered a
00:23:57 - 00:24:00: positive integer just an integer but
00:23:59 - 00:24:02: maybe it is I don't know is zero
00:24:00 - 00:24:04: positive I'm not sure then we have if
00:24:02 - 00:24:06: number is greater than 170 return
00:24:04 - 00:24:08: Infinity if number is zero return one
00:24:06 - 00:24:10: and then we have the iterative code here
00:24:08 - 00:24:12: as well so yeah honestly this is the
00:24:10 - 00:24:14: best test generator I've seen its
00:24:12 - 00:24:15: explanations are really good and it
00:24:14 - 00:24:17: doesn't try to do more than it's capable
00:24:15 - 00:24:19: of it doesn't claim to be able to
00:24:17 - 00:24:21: autocomplete every function you ever
00:24:19 - 00:24:23: write because it's just not made to do
00:24:21 - 00:24:24: that it's made to improve your code and
00:24:23 - 00:24:26: to write good test cases which it does a
00:24:24 - 00:24:28: great job of doing so because of that
00:24:26 - 00:24:30: it's going in the top tier at 10x
00:24:28 - 00:24:31: developer now all of these tools have
00:24:30 - 00:24:33: their own place and all of them are
00:24:31 - 00:24:35: probably valuable to certain people but
00:24:33 - 00:24:38: in my case I'm going to continue using
00:24:35 - 00:24:39: chat GPT as well as codium Ai and GitHub
00:24:38 - 00:24:42: co-pilot that's going to sort of be my
00:24:39 - 00:24:43: AI developer suite and hopefully it will
00:24:42 - 00:24:45: make me a better developer but if you
00:24:43 - 00:24:47: want to be a better developer you should
00:24:45 - 00:24:48: watch this video next that the YouTube
00:24:47 - 00:24:51: algorithm thinks will'll enjoy and let
00:24:48 - 00:24:51: me know if it's right
