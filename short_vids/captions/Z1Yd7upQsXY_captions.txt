00:00:00 - 00:00:04: Hey everyone, my name is YK. And i'm the founder of this YouTube channel CS
00:00:04 - 00:00:08: Dojo, and i'm also a former software developer at
00:00:08 - 00:00:09: Google and this is my, new
00:00:09 - 00:00:11: series python
00:00:11 - 00:00:16: Tutorial for absolute beginners and this is my video number 1: what are variables?
00:00:16 - 00:00:22: So this series is gonna be good for complete beginners, who have never done any programming before as
00:00:22 - 00:00:28: Well as someone who's done some programming before whether it's python or any other language but
00:00:28 - 00:00:33: Wants to learn more about python. So in this video i'm going to go through a number of different things
00:00:33 - 00:00:35: First of all what is python and what can
00:00:35 - 00:00:42: you, do with it and then i'm gonna explain how. To install python on your computer and then set up a development environment.
00:00:43 - 00:00:49: We're gonna use something called jupyter notebook throughout, this series and then i'm gonna explain how. To use the print function
00:00:49 - 00:00:56: And what are variables and how to use them and by the end of this video if you have two variables
00:00:56 - 00:01:01: Storing different things, you'll be able to swap the content within those two variables with
00:01:01 - 00:01:02: Each other, and i'm gonna put on
00:01:03 - 00:01:05: an outline of this video in the comment section below
00:01:05 - 00:01:11: So you, don't have to watch the whole thing if you, don't want to. Oh and before we get started if you?
00:01:11 - 00:01:17: Want to make sure that you don't, miss my future tutorial videos sign up to my, newsletter which is available in the description?
00:01:17 - 00:01:21: Below so just quickly, what is python and what can?
00:01:21 - 00:01:27: You, do with it it's one of the most popular programming languages out there and it's used at smaller companies as
00:01:27 - 00:01:31: well as larger companies including google and many
00:01:31 - 00:01:38: Universities use python as the introductory programming language in their computer science courses and one advantage of python
00:01:38 - 00:01:42: Is that it's fairly easy to learn because it has fairly simple syntax
00:01:43 - 00:01:45: It's used for many different applications
00:01:46 - 00:01:51: Including websites back-end code which is the code that runs on your server as
00:01:51 - 00:01:56: Opposed to the code that runs on your device whether it's a phone or a Laptop and it's
00:01:56 - 00:02:01: also popular for their analysis and scientific research purposes, okay?
00:02:01 - 00:02:05: So let's now go ahead and install python on your computer usually
00:02:05 - 00:02:11: When people develop a program using python or any other language for that matter they usually
00:02:11 - 00:02:18: Use something called ide which stands for integrated development environment. It's an environment that includes
00:02:18 - 00:02:24: Everything you need pretty much to develop a program. It has a nice text editor in which you can
00:02:24 - 00:02:30: Write your code and then the ability to run your program as, well as something called a debugger
00:02:30 - 00:02:36: Which allows you to quickly get rid of all the bugs in your program and if you, want to use an IDE to follow
00:02:36 - 00:02:43: My series i personally recommend park charms community edition so in this series instead of using a traditional
00:02:43 - 00:02:46: IDE i decided to use something called jupyter notebook
00:02:47 - 00:02:52: So jupyter notebook is an environment for writing and testing your program quickly and
00:02:52 - 00:02:59: It's actually, popular with the scientific community and for data analysis purposes but i've decided to use jupiter notebook throughout
00:02:59 - 00:03:03: This series because it's very simple and easy to install
00:03:03 - 00:03:08: Jupyter notebook through something called anaconda and it's fairly easy to use as
00:03:08 - 00:03:14: Well so here's the way, jupyter notebook, works there are two components to jupyter notebook
00:03:15 - 00:03:21: First of all when you launch jupyter notebook on your computer you might see a command line interface like this
00:03:22 - 00:03:25: This, represents the jupyter notebook server
00:03:25 - 00:03:31: You can, think of it sort of like the core of jupyter notebook and you don't have to worry that much about how
00:03:31 - 00:03:32: it works exactly
00:03:32 - 00:03:40: But just remember that if you close this window. Maybe accidentally jupyter notebook might stop working so just be careful about that
00:03:41 - 00:03:44: Now, when you launch jupyter on your computer you might?
00:03:44 - 00:03:51: also
See a browser window or tab showing up whether it's Chrome, Firefox, Safari, or anything else and
00:03:51 - 00:03:53: It'll probably be at the url
00:03:54 - 00:04:00: Localhost call eight eight eight eight or something like that and it'll be connected to the jupyter notebook server
00:04:01 - 00:04:01: this
00:04:01 - 00:04:08: Browser window or tab is basically the user interface for jupyter notebook and you can write and execute your code
00:04:08 - 00:04:15: Here but it's actually executed on the jupyter notebook server, again. You don't have to worry that much about, how
00:04:15 - 00:04:18: It works exactly but this is just an overview
00:04:19 - 00:04:24: Now to install python and jupyter notebook we're, going to use something called anaconda
00:04:24 - 00:04:27: Anaconda is something called a package manager
00:04:27 - 00:04:30: which allows you to install many programs at once
00:04:30 - 00:04:38: This, particular package manager' anaconda is actually used for installing math and science libraries but
00:04:38 - 00:04:40: You, don't have to worry, about that the only thing you need to know
00:04:40 - 00:04:46: Is that when you install anaconda it comes with python and jupyter notebook so you
00:04:46 - 00:04:49: Don't have to install python or jupyter notebook separately on your computer
00:04:50 - 00:04:57: Let's now install python and jupyter through anaconda go to anaconda org, and then click download
00:04:58 - 00:04:59: anaconda and
00:04:59 - 00:05:03: Select whatever platform you're using whether it's windows mac or linux
00:05:04 - 00:05:10: I'm using mac here so i'm gonna click mac os here and there are two options here
00:05:10 - 00:05:17: Python, three-point-something or python 2 point something, make sure to use python 3 point something because we're
00:05:17 - 00:05:20: going to use python 3 instead of python 2 throughout
00:05:20 - 00:05:24: This, course so click download and then save this file wherever
00:05:24 - 00:05:32: You, want to save it and once this file is downloaded just open it and then click continue continue continue
00:05:33 - 00:05:36: Agree with everything and then select
00:05:37 - 00:05:44: Install for me only or install on a specific disk it doesn't matter which one you choose and then click install and
00:05:44 - 00:05:47: This, process will probably take a, while for you
00:05:47 - 00:05:52: Once this process is done you should see something like the installation, was completed successfully
00:05:53 - 00:06:01: Once you see that just click close and you're all set to launch jupyter you need to launch an application called
00:06:01 - 00:06:03: Anaconda navigator
00:06:03 - 00:06:10: Just launch that in the usual way you launch any other application, and then find jupyter notebook and click launch
00:06:14 - 00:06:20: Like i said before you see a browser tab or window. Opening up and it should be at the url
00:06:21 - 00:06:24: Localhost colon 8080 8th 8th or something like that
00:06:25 - 00:06:27: Ok, let's now. Create our first program
00:06:28 - 00:06:34: First go to whatever the folder you, want to create. Your first program, in i'm going to go to desktop
00:06:36 - 00:06:42: And once you click it you can see that my current location is desktop because it's at the top right here
00:06:43 - 00:06:48: Before you create. Your first program here i personally recommend that you create a
00:06:48 - 00:06:54: New folder so i just went to my desktop i clicked right click and then, new
00:06:54 - 00:06:56: Folder i'm gonna call this folder
00:06:56 - 00:06:59: python, tutorial 1 and
00:07:00 - 00:07:07: once you create that folder you should see in the jupyter notebook interface to click that and you see that the current location is
00:07:08 - 00:07:15: Python, tutorial one within desktop right here at the top to create a, new, file or a, new?
00:07:15 - 00:07:22: notebook, file as i say just click new at the top right hand corner and then click python 3
00:07:23 - 00:07:29: So a new notebook has been created, here change the name of this notebook from untitled to
00:07:29 - 00:07:31: Let's say, what are our?
00:07:31 - 00:07:33: variables click rename and
00:07:34 - 00:07:38: Once you, do that if you go back to desktop and the folder that
00:07:38 - 00:07:41: we just created python tutorial 1 you'll see a, new
00:07:41 - 00:07:48: File what our variables dot i pi and b and that i pi and b is just an extension for algebra notebook?
00:07:49 - 00:07:52: Now in jupyter notebook there's something called a
00:07:52 - 00:07:59: Cell each cell represents a set of code and the box you're looking at right now is one cell
00:07:59 - 00:08:03: So you can, type in any python code here for example print
00:08:04 - 00:08:09: Parentheses double quotes hello world and when you run, this? Cell
00:08:09 - 00:08:16: Using this button at the top it executes all the code within the. Cell, so let's run, this. Cell and
00:08:17 - 00:08:22: You, see that the string hello, world, is printed so this text hello?
00:08:22 - 00:08:27: World is something called a string it's usually enclosed by either double quotes or single
00:08:27 - 00:08:30: Quotes and it's basically just a set of characters so
00:08:31 - 00:08:35: Assuming that this is your first time coding in your life i'm going to explain
00:08:35 - 00:08:42: this, line a little bit more carefully so this says print whatever is in the parentheses these two parentheses and
00:08:43 - 00:08:45: that happens to be
00:08:45 - 00:08:50: Hello, world a string and when you run it again it's printed right below. This
00:08:50 - 00:08:52: Cell how the world and the important thing to note here
00:08:52 - 00:08:53: Is that if you
00:08:53 - 00:08:58: Don't type in the exact set of characters that you see on the screen it might
00:08:58 - 00:09:03: Not go right so for example if you forget to close the parentheses and run the
00:09:03 - 00:09:06: Cell you'll get an error and if you use
00:09:06 - 00:09:08: for example
00:09:08 - 00:09:10: Curly, brackets instead of regular
00:09:11 - 00:09:15: Parentheses you, also get an error and if you forget to close the
00:09:15 - 00:09:17: Quotation, marks it's the same thing so
00:09:18 - 00:09:21: Let's try, using this print function. A little bit more in
00:09:21 - 00:09:29: This, cell that you see right here in the green, box you can, type in print double quotes more string and
00:09:30 - 00:09:38: Actually instead of using double quotes you can, also use single quotes in python and then you can run this. Cell and
00:09:38 - 00:09:40: The string more string is printed
00:09:41 - 00:09:47: So you can, use single quotes and double quotes pretty much interchangeably in python and then you can
00:09:47 - 00:09:55: Also, print not just a string but, also a number so you can, say print parenthesis 3 and then when you run
00:09:55 - 00:10:01: The, cell the number 3 is printed and you could, also have multiple lines within the same cell as, well
00:10:02 - 00:10:05: So in this. Cell you can, write print
00:10:06 - 00:10:09: let's use double quotes here more string and
00:10:10 - 00:10:12: then print 3
00:10:12 - 00:10:17: So when you run, this. Cell these two lines are executed one by, one
00:10:18 - 00:10:20: so you see more string and
00:10:21 - 00:10:23: Three print it just one after another
00:10:24 - 00:10:28: So let's now dive into our main topic here namely, what are variables
00:10:29 - 00:10:35: Before i explain, what our variables exactly in python i'm going to show. You some sample code you can write a
00:10:36 - 00:10:39: Equals 1. And what this means?
00:10:39 - 00:10:44: Is that assign this value 1 this number to the variable named a
00:10:45 - 00:10:48: You can, think of it it sort of like the variable a
00:10:49 - 00:10:52: Containing the value 1 that's not 100%
00:10:52 - 00:10:57: Technically accurate, as i'll explain later but that's one way to think, about it so when you run this
00:10:57 - 00:11:02: Cell you, won't see anything printed this time but the variable a now
00:11:02 - 00:11:09: Contains the value 1 or a more technically accurate, way of thinking about it is that the bar a
00:11:10 - 00:11:14: Refers to the value one and you can. Check, what's inside the variable a
00:11:15 - 00:11:15: by
00:11:15 - 00:11:23: Printing the variable with print parentheses a and note here that there are no double quotes or single quotes around
00:11:23 - 00:11:29: This character. A, and that's because a is not a string it's a variable and when you run, the?
00:11:29 - 00:11:34: Cell you see the value a is referring to which is one and you can
00:11:34 - 00:11:37: Do the same thing with different variables so you
00:11:37 - 00:11:43: Can write b equals two so the convention here is you write b space and then
00:11:44 - 00:11:46: Equal space and to
00:11:46 - 00:11:52: This, line says, assign the value 2 to the variable b and when you run, the
00:11:52 - 00:11:59: cell again the variable b refers to the value 2 now so if you haven't for example c in this code and
00:12:00 - 00:12:06: If you, want to know, what's inside the variable or what the variable refers to you, can, write just like before print
00:12:07 - 00:12:10: Parentheses be no single quotes or double quotes
00:12:10 - 00:12:16: Run this. Cell with this button right here and then you'll see the value b is referring to
00:12:17 - 00:12:20: Just like before, we can, write multiple lines within a single cell right here
00:12:21 - 00:12:23: By, writing print parentheses a
00:12:24 - 00:12:25: print
00:12:25 - 00:12:29: Parentheses b and when you run, this, cell
00:12:29 - 00:12:36: You'll see one and two so one is what a is referring to and two is what b is referring to?
00:12:37 - 00:12:43: So a variable doesn't necessarily refer to a, number it could refer to a
00:12:43 - 00:12:49: String so if you write for example c equals either double quotes or single quotes hello
00:12:50 - 00:12:51: there
00:12:51 - 00:12:53: And when you run the, cell?
00:12:54 - 00:13:00: C now, we first see the value or the string hello there and when you print c?
00:13:00 - 00:13:03: You should see how low. They're printed
00:13:04 - 00:13:09: So i just ran this. Cell and the string hello, there has been printed, so let's now
00:13:09 - 00:13:09: Quickly, talk about
00:13:09 - 00:13:17: What variables are in python when you write a equals one in a different language for example c or c++
00:13:17 - 00:13:23: The correct, way to think, about it might be as a, box so you have a, box a
00:13:24 - 00:13:30: Containing the value one but in python this is not the accurate, way to think about it the more accurate way to think
00:13:30 - 00:13:36: About it is that a is more like a name tag and this can refer to any value you
00:13:36 - 00:13:43: Want and when you say a equals one you're saying a refers to the value one now. These two
00:13:43 - 00:13:47: Ways of thinking, about it they might not seem that different right now but it's
00:13:47 - 00:13:52: Going, to be more important later and in python you can create a, new variable, by writing as
00:13:52 - 00:13:59: We saw b equals 2 and this says the name b or the variable b now
00:13:59 - 00:14:03: We first see the value 2 and just like you saw
00:14:03 - 00:14:07: A variable can refer to a string as, well so if you write c
00:14:07 - 00:14:12: Equals hello, there you're, saying the variable c refers to the string. Hello
00:14:12 - 00:14:19: There once you master that basic concept you'll be able to move on to a slightly more advanced topic
00:14:19 - 00:14:26: Let's say you run, these lines of code and then you, want to run more code for example d equals 2
00:14:26 - 00:14:31: Then what happens is the variable d of course refers to the value to
00:14:32 - 00:14:35: Which the variable b also refers to
00:14:35 - 00:14:39: so it's totally possible for two or more variables in
00:14:39 - 00:14:44: Python to point to the same value in this case 2 and then it's
00:14:44 - 00:14:50: Also possible for you to reassign an existing variable to another value so if you
00:14:50 - 00:14:53: write b equals 1 after
00:14:54 - 00:15:02: executing this line of code b equals 2 after this line b refers to two of course but, after writing b equals 1
00:15:02 - 00:15:07: B refers to 1, which a, also refers to and you can
00:15:07 - 00:15:13: Even reassign an existing variable for example b which once referred to a number
00:15:14 - 00:15:21: One right here to something else for example a string so if you, write for example b equals double quotes ah
00:15:22 - 00:15:25: The string the variable b now refers to
00:15:26 - 00:15:28: The string ah
00:15:28 - 00:15:31: So let's see how, this actually works out in code
00:15:31 - 00:15:36: Okay, we're gonna continue on the code, we had earlier earlier, we had b equals
00:15:38 - 00:15:40: so if you print be
00:15:40 - 00:15:41: the variable
00:15:41 - 00:15:45: We get the value to and you can reassign
00:15:45 - 00:15:53: This variable to another value for example 1. By writing b equals 1 and then when you run the. Cell, and
00:15:53 - 00:15:55: print b again
00:15:56 - 00:15:58: you get
00:15:58 - 00:16:04: One printed the new value and what happens if we try to print a variable that doesn't exist yet
00:16:04 - 00:16:06: So if you try to print print
00:16:07 - 00:16:10: Parenthesis, a what happens let's run, this
00:16:10 - 00:16:16: Cell and see what happens it'll actually give you an error because he doesn't exist yet and the error says
00:16:16 - 00:16:22: Name error name e is not defined yet so that makes sense let's fix that. By writing e
00:16:23 - 00:16:26: equals this is a string and
00:16:26 - 00:16:34: This, way the value this is a string is assigned to the variable e and the variable e exists in the system
00:16:34 - 00:16:39: So if you print e with print parenthesis e and when you run this
00:16:39 - 00:16:43: Cell you, don't get the error anymore and let's address another question
00:16:43 - 00:16:48: You might have here is it possible for us to assign a variable
00:16:48 - 00:16:49: to
00:16:49 - 00:16:53: Another one the answer is yes so here if you write
00:16:53 - 00:16:59: Equals 1 a of course refers to 1. And then c equals hello, world c refers to
00:17:00 - 00:17:01: hello world
00:17:01 - 00:17:04: What happens if you write f equals a?
00:17:05 - 00:17:11: What happens then is this, means the variable f the name f refers to?
00:17:12 - 00:17:19: The value a is referring to so f refers to one now and so f?
00:17:20 - 00:17:22: doesn't refer to the variable a
00:17:23 - 00:17:30: Instead it refers to the value a is referring to and this is important for example when you do a
00:17:31 - 00:17:34: Equals two if you write that a now refers to
00:17:35 - 00:17:39: the value 2 instead of 1 but f
00:17:40 - 00:17:46: Stays at the value 1 and this might not be the case if f was referring to the variable a
00:17:46 - 00:17:53: Let's take a look at another example here if you write g iko see the variable g will refer to
00:17:54 - 00:18:00: Whatever the value c refers to which is how it world and then once you write
00:18:00 - 00:18:04: C equals, hello c will refer to the new value
00:18:05 - 00:18:07: Hello, right here
00:18:07 - 00:18:11: But the variable g will, stay at the value hello world
00:18:12 - 00:18:16: Okay, let's go back into the demo earlier in the demo, we had a
00:18:17 - 00:18:19: equals one and
00:18:19 - 00:18:22: Then c equals hello there
00:18:23 - 00:18:29: So once we print a and c. With print parenthesis a, and print parenthesis c
00:18:29 - 00:18:35: We should see one for a and hello there for see what happens if we write f?
00:18:36 - 00:18:38: equals a
00:18:38 - 00:18:41: F should now refer to whatever a refers to
00:18:42 - 00:18:44: So if we print f?
00:18:45 - 00:18:48: We should see the number one printed and?
00:18:49 - 00:18:52: What happens if we assign a to two?
00:18:52 - 00:18:53: then
00:18:53 - 00:19:01: The value of a should, now be two and then the value of f should, stay as i said earlier
00:19:02 - 00:19:03: at one
00:19:03 - 00:19:10: Okay, now i'm gonna give you a quick practice problem to work on in order to solidify your understanding of variables and to do that
00:19:10 - 00:19:14: Go, back to the previous tab of jupyter notebook the navigation
00:19:14 - 00:19:16: Menu and if you already, close the tab
00:19:17 - 00:19:21: Just open localhost colon 8080 eight eight or just relaunched
00:19:21 - 00:19:22: jupyter notebook
00:19:22 - 00:19:30: And then go back to the same folder as before we had python tutorial one click new in the top right corner click
00:19:30 - 00:19:32: python 3, again and
00:19:32 - 00:19:37: Let's rename this notebook. By clicking untitled and by changing it to
00:19:38 - 00:19:41: swapping two variables and
00:19:42 - 00:19:46: Here's the problem you're given two variables let's say
00:19:47 - 00:19:51: V1 equals first string in double quotes and v2
00:19:51 - 00:19:54: Equals second string, again in double quotes how
00:19:54 - 00:19:57: Can you, swap the values within, these two variables with
00:19:57 - 00:20:04: Each other the easiest way to solve this problem is just to write v1 equals second string and
00:20:04 - 00:20:06: Then b2 equals
00:20:06 - 00:20:10: First string, but this might not be the best solution
00:20:11 - 00:20:16: Because if you had a much longer string it would be kind of cumbersome to repeat these strings and
00:20:17 - 00:20:23: Then if one of the strings changes so if first string becomes first two strings
00:20:23 - 00:20:26: That you need to rewrite your code right here to
00:20:27 - 00:20:30: Match that to write first two strings again
00:20:30 - 00:20:36: So ideally you, want to be able to solve this problem without repeating the strings think
00:20:36 - 00:20:38: About it for a second and then i'm gonna show
00:20:38 - 00:20:43: You, what a good solution might look, like, when you see this problem you might say, well it's actually pretty simple
00:20:44 - 00:20:49: Once we have b1 equal to first string and v2 equal to
00:20:50 - 00:20:57: Second string, so that's v1 referring to this string and v2 referring to this string, we can just write
00:20:58 - 00:21:05: V1 equals v2 and then v2 equals v1 and we're done but actually this solution is wrong
00:21:05 - 00:21:09: Because when we execute this line v1 equals v2
00:21:10 - 00:21:16: V1 now refers to whatever v2 refers to of course, which is second string and then when?
00:21:16 - 00:21:18: We write v2 equals v1?
00:21:19 - 00:21:22: V2 will now refer to what v1 refers to now
00:21:22 - 00:21:27: Which is second string so at the end of these lines of code?
00:21:27 - 00:21:32: Will have v1 and v2 both refer to the second string which is not what, we want?
00:21:33 - 00:21:35: Let's now see what a? Good solution might look, like
00:21:36 - 00:21:43: I'm going to give you a few different options here the first option is to use two temporary variables we're
00:21:43 - 00:21:45: Gonna call them temp 1 and temp
00:21:45 - 00:21:48: 2 temp 1 will be equal to
00:21:48 - 00:21:55: What v1 refers to so that's first string and then temp, 2 will be equal to what v2 refers to
00:21:56 - 00:22:01: Which is of course second string and then we'll just need to swap them together
00:22:02 - 00:22:09: So v1 will be equal to temp 2, which refers to second string so v1 will now refer to
00:22:10 - 00:22:11: Second string
00:22:11 - 00:22:19: After this line right here and then v2 will be equal to temp 1 which of course first string
00:22:19 - 00:22:21: So v2 will refer to
00:22:22 - 00:22:27: First string, after these lines so this is one potential solution but actually
00:22:27 - 00:22:29: We don't have to use two temporary variables
00:22:30 - 00:22:37: Okay, here's a solution that only uses one temporary variable instead of two the first thing we're gonna do is we're gonna set a
00:22:37 - 00:22:41: New, temporary variable called temp - what v1 refers to
00:22:42 - 00:22:44: so temp
00:22:44 - 00:22:47: will be this string right here and
00:22:48 - 00:22:51: After that we'll set v1 to v2
00:22:51 - 00:22:58: So v1 will no longer refer to first string. And then it will refer to second string instead and at
00:22:58 - 00:23:03: This point note that the first string this string is not lost yet because
00:23:03 - 00:23:08: We have a variable pointing to that value so after that all you need to do is
00:23:08 - 00:23:15: Refer v2 back to whatever temp refers to which, is first string so v2
00:23:15 - 00:23:22: Will refer to first string, after these lines of code and the v1 will refer to second string and
00:23:22 - 00:23:28: this, little pattern of using a single variable to switch the values of two variables is
00:23:29 - 00:23:33: Actually really important to know because it's a very common pattern to use for any programmer
00:23:34 - 00:23:40: Okay, let's now test that pattern with our python code so in the second sale we're going to write our solution
00:23:40 - 00:23:46: We're gonna create a, new variable called temp, which refers to whatever v1 refers to which
00:23:46 - 00:23:50: Is first string, and then we'll set v1 to be v2
00:23:51 - 00:23:56: So v1 at this point is second string and then we'll set v2 to whatever
00:23:57 - 00:24:00: Temporary first - which is first string so at this point
00:24:00 - 00:24:05: Once we print v1, we should be able to print second string?
00:24:05 - 00:24:10: We do and then if we print v2 which would see first string and?
00:24:11 - 00:24:17: We do okay, to download the files i created, throughout, this video just go to cs. Dojo io
00:24:18 - 00:24:23: Python 1 or if you just, want to subscribe to my, newsletter so that you don't
00:24:23 - 00:24:27: Miss my future tutorial videos just go to cs. Dojo dot io
00:24:27 - 00:24:34: News and as always let, me know in comment below, when you thought of this video i'm? Yk, from cs
00:24:34 - 00:24:36: Dojo, and i'll see you in the next video?
