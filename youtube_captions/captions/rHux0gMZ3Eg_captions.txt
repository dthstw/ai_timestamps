00:00:02 - 00:00:05: welcome to the ultimate django course
00:00:03 - 00:00:07: in this course i'm going to teach you
00:00:05 - 00:00:09: everything you need to know about django
00:00:07 - 00:00:09: from the very basics to more advanced
00:00:09 - 00:00:11: concepts
00:00:09 - 00:00:13: so by the end of this course you'll be
00:00:11 - 00:00:15: able to use django to build
00:00:13 - 00:00:16: production-grade back-ends for your web
00:00:15 - 00:00:18: and mobile apps if you have always
00:00:16 - 00:00:20: wanted to learn web development with
00:00:18 - 00:00:22: python you are in the right place
00:00:20 - 00:00:24: we'll use python and django to build and
00:00:22 - 00:00:26: deploy the backend for an
00:00:24 - 00:00:27: e-commerce application if you're looking
00:00:26 - 00:00:29: for a comprehensive
00:00:27 - 00:00:30: organized and practical course that
00:00:29 - 00:00:32: takes you from zero to hero
00:00:30 - 00:00:34: and prepares you for the job this is the
00:00:32 - 00:00:35: right django course for you
00:00:34 - 00:00:37: everything you need to know about django
00:00:35 - 00:00:39: is in one place in the right order
00:00:37 - 00:00:40: so you don't need to jump back and forth
00:00:39 - 00:00:43: between random tutorials
00:00:40 - 00:00:45: amash hamadani i have taught millions of
00:00:43 - 00:00:46: people how to advance their software
00:00:45 - 00:00:47: engineering skills
00:00:46 - 00:00:49: through my youtube channel and online
00:00:47 - 00:00:51: school code with mosh.com
00:00:49 - 00:00:52: if you're new here be sure to subscribe
00:00:51 - 00:00:56: as i upload new videos
00:00:52 - 00:00:59: all the time now let's jump in and get
00:00:56 - 00:00:59: started
00:01:02 - 00:01:06: let's talk about what you need to know
00:01:04 - 00:01:08: to take this course for starters
00:01:06 - 00:01:09: you need to know python you need to know
00:01:08 - 00:01:11: the basics of python
00:01:09 - 00:01:13: as well as object-oriented programming
00:01:11 - 00:01:16: concepts such as classes
00:01:13 - 00:01:18: inheritance polymorphism and so on you
00:01:16 - 00:01:19: should also know the basics of
00:01:18 - 00:01:21: relational databases
00:01:19 - 00:01:22: so you should be familiar with concepts
00:01:21 - 00:01:25: such as tables columns
00:01:22 - 00:01:26: primary and foreign keys relationships
00:01:25 - 00:01:28: and so on if you need to refresh the
00:01:26 - 00:01:30: fundamentals i have a couple of beginner
00:01:28 - 00:01:32: level tutorials on my youtube channel
00:01:30 - 00:01:34: as well as comprehensive courses on my
00:01:32 - 00:01:38: website codewithmosh.com i'll put the
00:01:34 - 00:01:38: links down below in case you're
00:01:38 - 00:01:42: interested
00:01:41 - 00:01:44: all right so i'm assuming that you're
00:01:42 - 00:01:45: the right student for this course now
00:01:44 - 00:01:46: let's talk about how you should take
00:01:45 - 00:01:48: this course
00:01:46 - 00:01:50: first and foremost i want you to watch
00:01:48 - 00:01:51: this entire course
00:01:50 - 00:01:53: all the way from the beginning to the
00:01:51 - 00:01:54: end even if you're familiar with django
00:01:53 - 00:01:56: because
00:01:54 - 00:01:58: along the way i will share a lot of tips
00:01:56 - 00:01:59: and tricks and i don't want you to miss
00:01:58 - 00:02:00: out on any of them
00:01:59 - 00:02:02: if you have taken any of my other
00:02:00 - 00:02:03: courses you know that i'm not gonna
00:02:02 - 00:02:05: waste your time with
00:02:03 - 00:02:07: repetitive or useless stuff so make sure
00:02:05 - 00:02:09: to watch every lesson
00:02:07 - 00:02:10: now while watching each lesson i want
00:02:09 - 00:02:12: you to take notes
00:02:10 - 00:02:13: you can just write down some keywords on
00:02:12 - 00:02:14: a piece of paper if you don't want to
00:02:13 - 00:02:16: write a lot of notes
00:02:14 - 00:02:18: i strongly believe that the act of
00:02:16 - 00:02:20: writing things down will help you
00:02:18 - 00:02:22: remember new things that you learn
00:02:20 - 00:02:24: then after each lesson go through your
00:02:22 - 00:02:25: notes and repeat the same steps i showed
00:02:24 - 00:02:27: you in the video
00:02:25 - 00:02:28: this is exactly how i personally learn
00:02:27 - 00:02:30: new things also
00:02:28 - 00:02:32: i've carefully designed tons of
00:02:30 - 00:02:34: exercises that help you understand and
00:02:32 - 00:02:36: remember the materials so make sure to
00:02:34 - 00:02:37: do all these exercises because the more
00:02:36 - 00:02:39: you practice
00:02:37 - 00:02:41: the better you'll be at django or coding
00:02:39 - 00:02:41: in general
00:02:43 - 00:02:46: welcome back to the ultimate django
00:02:44 - 00:02:48: course in this section we're going to
00:02:46 - 00:02:50: talk about the basics of django
00:02:48 - 00:02:52: first i will give you a quick
00:02:50 - 00:02:54: introduction to what django is and
00:02:52 - 00:02:56: why it's so popular then we'll talk
00:02:54 - 00:02:58: about the fundamental web development
00:02:56 - 00:02:59: concepts that every web developer must
00:02:58 - 00:03:00: know
00:02:59 - 00:03:02: next we'll set up our machine for
00:03:00 - 00:03:04: development and create
00:03:02 - 00:03:05: our first django project once that
00:03:04 - 00:03:07: project is up and running
00:03:05 - 00:03:09: i will show you two essential techniques
00:03:07 - 00:03:11: for debugging django applications
00:03:09 - 00:03:12: this is going to be a short and sweet
00:03:11 - 00:03:19: introduction to django so
00:03:12 - 00:03:19: let's jump in and get started
00:03:22 - 00:03:25: so what is django and why is it so
00:03:24 - 00:03:27: popular well
00:03:25 - 00:03:29: django is a free and open source
00:03:27 - 00:03:30: framework for building web applications
00:03:29 - 00:03:32: with python
00:03:30 - 00:03:33: it's not the only web framework for
00:03:32 - 00:03:35: python but it's the most
00:03:33 - 00:03:37: popular one because it helps us build a
00:03:35 - 00:03:39: website in less time
00:03:37 - 00:03:41: with fewer lines of code that's why a
00:03:39 - 00:03:44: lot of companies like youtube
00:03:41 - 00:03:46: instagram spotify and dropbox use django
00:03:44 - 00:03:48: in their tech stack
00:03:46 - 00:03:50: now django is what we call a batteries
00:03:48 - 00:03:52: included framework which means
00:03:50 - 00:03:54: it comes with a lot of features out of
00:03:52 - 00:03:55: the box so we don't have to code them
00:03:54 - 00:03:57: from scratch
00:03:55 - 00:03:59: for example it gives us an admin
00:03:57 - 00:04:00: interface for managing our data which is
00:03:59 - 00:04:02: a huge time
00:04:00 - 00:04:04: saver it also has an object relational
00:04:02 - 00:04:07: mapper that abstracts the database
00:04:04 - 00:04:09: so we can query or persist data without
00:04:07 - 00:04:11: writing a lot of sql code
00:04:09 - 00:04:13: it also comes with an authentication
00:04:11 - 00:04:15: package for identifying users
00:04:13 - 00:04:16: it also has a package for caching data
00:04:15 - 00:04:19: and much much more
00:04:16 - 00:04:19: so since django offers all these amazing
00:04:19 - 00:04:21: features
00:04:19 - 00:04:23: we can focus on our application and its
00:04:21 - 00:04:24: requirements we don't have to reinvent
00:04:23 - 00:04:26: the wheel
00:04:24 - 00:04:27: and code all these features from scratch
00:04:26 - 00:04:28: now once in a while you might come
00:04:27 - 00:04:30: across
00:04:28 - 00:04:32: someone like our popular superstar
00:04:30 - 00:04:34: developer john smith who thinks django
00:04:32 - 00:04:36: is a piece of crap
00:04:34 - 00:04:37: because it's old and bloated with so
00:04:36 - 00:04:39: many features he used it
00:04:37 - 00:04:41: hated it and then rewrote his entire
00:04:39 - 00:04:42: project with a new shiny framework that
00:04:41 - 00:04:44: is faster
00:04:42 - 00:04:46: well saying a framework is better than
00:04:44 - 00:04:47: django because it's faster it's kind of
00:04:46 - 00:04:49: like saying
00:04:47 - 00:04:50: a ferrari is better than a truck because
00:04:49 - 00:04:52: it's faster
00:04:50 - 00:04:53: what if you want to move something
00:04:52 - 00:04:54: you're not going to use your ferrari for
00:04:53 - 00:04:57: that right
00:04:54 - 00:04:57: so a wise software engineer doesn't pick
00:04:57 - 00:04:59: up a framework
00:04:57 - 00:05:01: merely based on his performance there
00:04:59 - 00:05:02: are so many other things you need to
00:05:01 - 00:05:04: take into account
00:05:02 - 00:05:06: like the maturity of the framework how
00:05:04 - 00:05:08: stable it is from one version to another
00:05:06 - 00:05:09: its learning curve the size of the
00:05:08 - 00:05:11: community and so on
00:05:09 - 00:05:13: django has been around for a long time
00:05:11 - 00:05:15: and it has a huge community
00:05:13 - 00:05:16: so there are tons of django packages
00:05:15 - 00:05:18: built by the community that you can
00:05:16 - 00:05:20: reuse in your applications
00:05:18 - 00:05:22: also if you get stuck there's always
00:05:20 - 00:05:23: someone out there to help you
00:05:22 - 00:05:25: if you want to hire people there are
00:05:23 - 00:05:27: tons of people to choose from so these
00:05:25 - 00:05:28: are the benefits of having a huge
00:05:27 - 00:05:31: community around the framework
00:05:28 - 00:05:32: now regarding django features yes django
00:05:31 - 00:05:35: comes with a lot of features
00:05:32 - 00:05:36: but you don't have to use or even learn
00:05:35 - 00:05:38: all of them because
00:05:36 - 00:05:39: all these features are optional so you
00:05:38 - 00:05:41: can use the features that make sense for
00:05:39 - 00:05:43: your application
00:05:41 - 00:05:45: so in my opinion debates about the best
00:05:43 - 00:05:47: framework in the world are useless
00:05:45 - 00:05:48: we all like different things and just
00:05:47 - 00:05:50: because someone doesn't like django it
00:05:48 - 00:05:51: doesn't mean it's bad
00:05:50 - 00:05:53: a lot of companies are using django and
00:05:51 - 00:05:56: are looking for django developers
00:05:53 - 00:05:57: here in the us the average salary of a
00:05:56 - 00:06:00: django developer is just over
00:05:57 - 00:06:02: 117 000 a year so
00:06:00 - 00:06:04: if you like python and want to get into
00:06:02 - 00:06:08: web development learning django is a
00:06:04 - 00:06:08: good investment for your future
00:06:08 - 00:06:14: [Music]
00:06:12 - 00:06:16: so you learned that django is a
00:06:14 - 00:06:17: framework for building web applications
00:06:16 - 00:06:19: with python
00:06:17 - 00:06:20: now let's talk about some of the
00:06:19 - 00:06:23: fundamental concepts you need to
00:06:20 - 00:06:24: understand to build web applications
00:06:23 - 00:06:27: let's say we're going to build an online
00:06:24 - 00:06:29: store and publish it at moshby.com
00:06:27 - 00:06:31: now this website is going to have two
00:06:29 - 00:06:34: parts or two applications
00:06:31 - 00:06:35: a front end and a backend the front end
00:06:34 - 00:06:38: is the part that is loaded
00:06:35 - 00:06:40: inside a web browser on a client machine
00:06:38 - 00:06:41: it's the part that the user sees and
00:06:40 - 00:06:43: interacts with
00:06:41 - 00:06:44: the backend is the part that runs on a
00:06:43 - 00:06:47: web server
00:06:44 - 00:06:49: and is responsible for data processing
00:06:47 - 00:06:51: validating business rules and so on
00:06:49 - 00:06:52: now let's imagine that alice wants to
00:06:51 - 00:06:55: visit our website
00:06:52 - 00:06:58: so she points her browser to moshby.com
00:06:55 - 00:06:59: this address is also called a url which
00:06:58 - 00:07:02: is short for uniform
00:06:59 - 00:07:04: resource locator it's basically a way to
00:07:02 - 00:07:06: locate a resource on our internet
00:07:04 - 00:07:07: a resource can be a web page an image a
00:07:06 - 00:07:10: video
00:07:07 - 00:07:12: a pdf and so on so alice types
00:07:10 - 00:07:13: moshby.com in her browser and presses
00:07:12 - 00:07:15: enter
00:07:13 - 00:07:17: at this moment a browser sends a request
00:07:15 - 00:07:18: to the web server that hosts our website
00:07:17 - 00:07:21: and says
00:07:18 - 00:07:23: hey alice wants to see the home page so
00:07:21 - 00:07:25: the web server should take this request
00:07:23 - 00:07:26: process it and return a response back to
00:07:25 - 00:07:28: the client
00:07:26 - 00:07:30: this data exchange is defined by a
00:07:28 - 00:07:32: protocol called http
00:07:30 - 00:07:33: which is short for hypertext transfer
00:07:32 - 00:07:35: protocol
00:07:33 - 00:07:36: it defines how clients and servers can
00:07:35 - 00:07:38: communicate
00:07:36 - 00:07:40: so this is the big picture as alice
00:07:38 - 00:07:42: navigates our website
00:07:40 - 00:07:44: for each page her browser sends an http
00:07:42 - 00:07:46: request to the server
00:07:44 - 00:07:48: and receives an http response now as
00:07:46 - 00:07:49: part of building the backend for this
00:07:48 - 00:07:50: website
00:07:49 - 00:07:52: we need to decide how we're going to
00:07:50 - 00:07:54: respond to clients one option is to
00:07:52 - 00:07:55: generate the requested page on the
00:07:54 - 00:07:57: server
00:07:55 - 00:07:59: and return it to the client we use html
00:07:57 - 00:08:02: for that html is short for
00:07:59 - 00:08:02: hypertext markup language it's a simple
00:08:02 - 00:08:05: language for
00:08:02 - 00:08:07: representing web pages and their content
00:08:05 - 00:08:08: every webpage you have seen on internet
00:08:07 - 00:08:10: is built using html
00:08:08 - 00:08:13: so one option is to generate the page on
00:08:10 - 00:08:15: the server and return an html
00:08:13 - 00:08:17: document to the client the other option
00:08:15 - 00:08:18: is to return only the data needed on the
00:08:17 - 00:08:21: requested page
00:08:18 - 00:08:23: and have the client generate the page so
00:08:21 - 00:08:26: instead of putting a complete page or
00:08:23 - 00:08:27: a complete html document in an http
00:08:26 - 00:08:29: response
00:08:27 - 00:08:30: we only return the data like the list of
00:08:29 - 00:08:32: products
00:08:30 - 00:08:34: now what is the difference well if we
00:08:32 - 00:08:36: push this responsibility to the client
00:08:34 - 00:08:37: we can free up the server so it can
00:08:36 - 00:08:39: serve more clients
00:08:37 - 00:08:41: our application will be more scalable
00:08:39 - 00:08:43: that's why over the past few years
00:08:41 - 00:08:45: this approach has become more trendy and
00:08:43 - 00:08:46: is now considered the industry best
00:08:45 - 00:08:48: practice
00:08:46 - 00:08:51: these days we have tools like react
00:08:48 - 00:08:51: angular and vue for generating web pages
00:08:51 - 00:08:53: on the client
00:08:51 - 00:08:55: these are all client-side tools that are
00:08:53 - 00:08:57: used by front-end developers
00:08:55 - 00:08:59: in contrast we have server-side tools
00:08:57 - 00:09:01: for building back-ends
00:08:59 - 00:09:03: django falls in this category so you
00:09:01 - 00:09:04: should not compare django with let's say
00:09:03 - 00:09:06: react
00:09:04 - 00:09:08: you may compare django with other
00:09:06 - 00:09:10: server-side frameworks like asp.net core
00:09:08 - 00:09:13: which is used by c-sharp developers
00:09:10 - 00:09:14: express used by javascript developers
00:09:13 - 00:09:16: and so on
00:09:14 - 00:09:18: so if we push the responsibility of
00:09:16 - 00:09:20: generating web pages to the client
00:09:18 - 00:09:21: the server essentially becomes a gateway
00:09:20 - 00:09:23: to the data
00:09:21 - 00:09:25: on the server we can provide endpoints
00:09:23 - 00:09:28: that the client can talk to
00:09:25 - 00:09:30: to get or save various pieces of data
00:09:28 - 00:09:32: for example we can provide one endpoint
00:09:30 - 00:09:34: to get the list of products and another
00:09:32 - 00:09:36: endpoint to get the list of orders
00:09:34 - 00:09:38: someone has placed
00:09:36 - 00:09:40: now all these endpoints together
00:09:38 - 00:09:41: represent the interface that clients use
00:09:40 - 00:09:43: to talk to the server
00:09:41 - 00:09:45: in technical terms we say the server
00:09:43 - 00:09:47: provides an api
00:09:45 - 00:09:49: or an application programming interface
00:09:47 - 00:09:51: to clients this api is essentially like
00:09:49 - 00:09:53: the buttons on a remote control
00:09:51 - 00:09:56: all these buttons together represent the
00:09:53 - 00:09:57: interface or the api we use to interact
00:09:56 - 00:10:00: with the tv
00:09:57 - 00:10:01: okay so in this course our focus will be
00:10:00 - 00:10:03: on using django
00:10:01 - 00:10:06: to build an api for our online store
00:10:03 - 00:10:07: client applications can use this api to
00:10:06 - 00:10:09: get or save the data
00:10:07 - 00:10:11: how these clients are built is
00:10:09 - 00:10:13: irrelevant here we can use react
00:10:11 - 00:10:15: angular or even plain javascript that
00:10:13 - 00:10:16: falls under front-end development which
00:10:15 - 00:10:18: has nothing to do with django
00:10:16 - 00:10:20: once we build this api if you know
00:10:18 - 00:10:22: front-end development you can
00:10:20 - 00:10:23: always build a client app that talks to
00:10:22 - 00:10:24: this api
00:10:23 - 00:10:26: alright now that you understand the big
00:10:24 - 00:10:27: picture we are ready to set up our
00:10:26 - 00:10:32: development environment
00:10:27 - 00:10:37: and that's what we will do next
00:10:32 - 00:10:37: [Music]
00:10:37 - 00:10:40: all right let's make sure you have the
00:10:38 - 00:10:42: right setup before we start coding
00:10:40 - 00:10:44: the first thing i want you to do is
00:10:42 - 00:10:44: upgrade your python to the latest
00:10:44 - 00:10:47: version
00:10:44 - 00:10:49: so head over to python.org downloads and
00:10:47 - 00:10:50: download the latest version of python
00:10:49 - 00:10:52: for your operating system
00:10:50 - 00:10:53: once you do that then open up your
00:10:52 - 00:10:57: terminal window and run
00:10:53 - 00:10:59: python version to make sure you have
00:10:57 - 00:11:01: upgraded your python correctly
00:10:59 - 00:11:03: now here we see python 2.7 because on
00:11:01 - 00:11:05: mac we have two different versions of
00:11:03 - 00:11:07: python running side by side
00:11:05 - 00:11:08: we have the old python 2 which is now
00:11:07 - 00:11:11: deprecated
00:11:08 - 00:11:12: and we also have python 3. so if you're
00:11:11 - 00:11:14: using a mac
00:11:12 - 00:11:15: you have to run python3 dash dash
00:11:14 - 00:11:17: version
00:11:15 - 00:11:19: but if you're on windows or linux you
00:11:17 - 00:11:22: have to run python
00:11:19 - 00:11:26: version okay so here i'm using python
00:11:22 - 00:11:29: 3.9.5 great next we're going to use pip
00:11:26 - 00:11:32: or pip3 if you're on mac to install
00:11:29 - 00:11:33: pip n i talked about paypal in my python
00:11:32 - 00:11:34: course
00:11:33 - 00:11:36: it's basically a dependency management
00:11:34 - 00:11:37: tool for installing our application
00:11:36 - 00:11:40: dependencies
00:11:37 - 00:11:42: in virtual environments this way our
00:11:40 - 00:11:44: application dependencies will not clash
00:11:42 - 00:11:45: with other applications dependencies
00:11:44 - 00:11:49: okay so
00:11:45 - 00:11:49: let's go ahead and install this
00:11:50 - 00:11:54: now in this course just like my other
00:11:52 - 00:11:57: courses i'm going to use visual studio
00:11:54 - 00:11:58: code or vs code as my editor it's just
00:11:57 - 00:11:59: my personal preference
00:11:58 - 00:12:02: if you have a preference for a different
00:11:59 - 00:12:04: tool like pycharm that's totally fine
00:12:02 - 00:12:05: having said that i highly encourage you
00:12:04 - 00:12:06: to use vs code
00:12:05 - 00:12:08: because throughout the course i'm going
00:12:06 - 00:12:10: to show you a lot of shortcuts and
00:12:08 - 00:12:11: time saving tips that will not apply to
00:12:10 - 00:12:13: your editor
00:12:11 - 00:12:16: in case you don't have vs code you can
00:12:13 - 00:12:18: get it from code.visualstudio.com
00:12:16 - 00:12:21: now once you run it i want you to go to
00:12:18 - 00:12:24: the extensions panel over here
00:12:21 - 00:12:26: and search for python make sure
00:12:24 - 00:12:28: to install this extension because with
00:12:26 - 00:12:30: this we get features such as
00:12:28 - 00:12:38: intelligence debugging code navigation
00:12:30 - 00:12:39: and so on
00:12:38 - 00:12:41: all right now that we have installed all
00:12:39 - 00:12:43: the necessary tools let's create our
00:12:41 - 00:12:44: first django project
00:12:43 - 00:12:46: so here in the terminal window i'm going
00:12:44 - 00:12:48: to go to my desktop
00:12:46 - 00:12:50: you can go anywhere on your machine it
00:12:48 - 00:12:50: doesn't really matter now we're going to
00:12:50 - 00:12:54: create
00:12:50 - 00:12:55: a directory called store front that is
00:12:54 - 00:12:59: the name of our project
00:12:55 - 00:13:02: next we go inside this directory and run
00:12:59 - 00:13:03: pip and install django so we're going to
00:13:02 - 00:13:06: install django
00:13:03 - 00:13:07: using pip app inside a virtual
00:13:06 - 00:13:10: environment
00:13:07 - 00:13:10: now let's go ahead
00:13:11 - 00:13:16: all right well take a look so over here
00:13:14 - 00:13:19: you can see that p-band has created a
00:13:16 - 00:13:21: virtual environment for this project
00:13:19 - 00:13:22: down below you can see the path to this
00:13:21 - 00:13:23: virtual environment
00:13:22 - 00:13:25: but if you're on windows you're going to
00:13:23 - 00:13:27: see something like c drive
00:13:25 - 00:13:29: backslash whatever now if you're on a
00:13:27 - 00:13:30: mac and using z shell which is this
00:13:29 - 00:13:32: fancy
00:13:30 - 00:13:34: colorful terminal window you can hold
00:13:32 - 00:13:36: down the command key
00:13:34 - 00:13:38: and click on this path to go into it
00:13:36 - 00:13:41: otherwise we can just copy this
00:13:38 - 00:13:42: and use the cd command to go inside this
00:13:41 - 00:13:45: directory
00:13:42 - 00:13:46: now take a look so here's our virtual
00:13:45 - 00:13:48: environment
00:13:46 - 00:13:51: in this environment we have this bin
00:13:48 - 00:13:54: folder that contains a bunch of binaries
00:13:51 - 00:13:55: for example we have python pip django
00:13:54 - 00:13:58: admin and so on
00:13:55 - 00:13:59: so back to the terminal pbn created a
00:13:58 - 00:14:02: virtual environment and
00:13:59 - 00:14:03: installed django inside that environment
00:14:02 - 00:14:06: but in addition to this
00:14:03 - 00:14:07: ppm also created two files in this
00:14:06 - 00:14:10: directory
00:14:07 - 00:14:12: pip file and pay file.log so i'm going
00:14:10 - 00:14:13: to open this directory using visual
00:14:12 - 00:14:16: studio code
00:14:13 - 00:14:17: by running code period if this doesn't
00:14:16 - 00:14:19: work on your machine
00:14:17 - 00:14:21: just drag and drop this folder onto vs
00:14:19 - 00:14:21: code
00:14:21 - 00:14:26: alright so here's our pip file this is
00:14:23 - 00:14:27: like package.json for javascript
00:14:26 - 00:14:29: projects
00:14:27 - 00:14:30: so in this file we can see that our
00:14:29 - 00:14:32: project needs
00:14:30 - 00:14:34: this particular version of python and
00:14:32 - 00:14:36: under packages you can see
00:14:34 - 00:14:38: the packages that our application is
00:14:36 - 00:14:40: dependent upon
00:14:38 - 00:14:41: so here we have django equals asterisk
00:14:40 - 00:14:43: that means
00:14:41 - 00:14:44: any version or the latest version of
00:14:43 - 00:14:46: django
00:14:44 - 00:14:49: if we installed a particular version of
00:14:46 - 00:14:51: django we would see that version here
00:14:49 - 00:14:53: now back to the terminal window we need
00:14:51 - 00:14:55: to activate this virtual environment
00:14:53 - 00:14:57: so we'll use the python interpreter
00:14:55 - 00:14:58: inside this virtual environment
00:14:57 - 00:15:00: not the one that is installed globally
00:14:58 - 00:15:01: on this machine to do that we're going
00:15:00 - 00:15:04: to run
00:15:01 - 00:15:07: ppm shell
00:15:04 - 00:15:08: okay next we're going to use django
00:15:07 - 00:15:10: admin
00:15:08 - 00:15:12: to start a new project django admin is a
00:15:10 - 00:15:15: utility that comes with django
00:15:12 - 00:15:16: so if you run it we can see all these
00:15:15 - 00:15:19: commands that we can use
00:15:16 - 00:15:20: to work with django projects as we go
00:15:19 - 00:15:21: through the course
00:15:20 - 00:15:23: you will become familiar with this
00:15:21 - 00:15:23: command in this lesson we're going to
00:15:23 - 00:15:27: use
00:15:23 - 00:15:28: django admin start project
00:15:27 - 00:15:31: and we're going to call that project
00:15:28 - 00:15:34: store front
00:15:31 - 00:15:36: now back to vs code django admin created
00:15:34 - 00:15:38: this directory for our project
00:15:36 - 00:15:40: and inside this directory it created
00:15:38 - 00:15:42: another directory
00:15:40 - 00:15:43: that is the core of our application in
00:15:42 - 00:15:45: this directory we have these files which
00:15:43 - 00:15:47: i'm going to talk about in a second
00:15:45 - 00:15:48: but before i do so let's get rid of this
00:15:47 - 00:15:50: redundancy
00:15:48 - 00:15:51: because we have three storefront
00:15:50 - 00:15:54: directories
00:15:51 - 00:15:55: the top one is the one that we created
00:15:54 - 00:15:57: earlier in the terminal
00:15:55 - 00:15:59: and then we have these two other
00:15:57 - 00:16:02: directories one for the project
00:15:59 - 00:16:03: one for the core of our application so
00:16:02 - 00:16:06: i'm gonna delete
00:16:03 - 00:16:08: this project directory now we're back in
00:16:06 - 00:16:10: the previous step so we don't have a
00:16:08 - 00:16:13: django project at this stage
00:16:10 - 00:16:14: now back in terminal let's bring up the
00:16:13 - 00:16:16: last command
00:16:14 - 00:16:17: but type it period at the end this tells
00:16:16 - 00:16:19: django
00:16:17 - 00:16:21: to use the current directory as the
00:16:19 - 00:16:22: project directory so django is not going
00:16:21 - 00:16:25: to create
00:16:22 - 00:16:29: an additional directory for our project
00:16:25 - 00:16:30: okay now take a look so we have this
00:16:29 - 00:16:32: directory
00:16:30 - 00:16:33: which is the core of our application in
00:16:32 - 00:16:34: this directory we have
00:16:33 - 00:16:36: this init file which defines this
00:16:34 - 00:16:38: directory as a package
00:16:36 - 00:16:40: we have this settings module where we
00:16:38 - 00:16:42: define our application settings
00:16:40 - 00:16:44: we have the urls module where we define
00:16:42 - 00:16:46: the urls of our application
00:16:44 - 00:16:47: and these two other modules that are
00:16:46 - 00:16:50: used for deployment
00:16:47 - 00:16:52: for now don't worry about them now next
00:16:50 - 00:16:55: to this directory we have
00:16:52 - 00:16:58: this file manage.pi this is a wrapper
00:16:55 - 00:16:59: around django admin so going forward
00:16:58 - 00:17:01: instead of django admin we're going to
00:16:59 - 00:17:03: use manage.pi
00:17:01 - 00:17:05: the reason for this is that manage.pi
00:17:03 - 00:17:06: takes the settings of this project into
00:17:05 - 00:17:08: account
00:17:06 - 00:17:10: let me show you what i mean so now that
00:17:08 - 00:17:12: we have a project
00:17:10 - 00:17:16: we want to run a web server so another
00:17:12 - 00:17:19: command that django admin provides is
00:17:16 - 00:17:20: run server however if you're on django
00:17:19 - 00:17:24: admin
00:17:20 - 00:17:27: run server we get an error saying
00:17:24 - 00:17:28: requested setting debug but settings are
00:17:27 - 00:17:30: not configured
00:17:28 - 00:17:32: because at this point django admin
00:17:30 - 00:17:34: doesn't know about the
00:17:32 - 00:17:35: settings of our project so now that we
00:17:34 - 00:17:37: have a project
00:17:35 - 00:17:39: instead of django admin we're going to
00:17:37 - 00:17:43: run python
00:17:39 - 00:17:44: manage.pi now look we see the same
00:17:43 - 00:17:46: commands
00:17:44 - 00:17:47: that django admin provides so here we
00:17:46 - 00:17:51: can say
00:17:47 - 00:17:54: python manage.pi run server
00:17:51 - 00:17:55: now optionally we can supply a port
00:17:54 - 00:17:57: number
00:17:55 - 00:17:59: if we don't supply this by default this
00:17:57 - 00:18:02: will use port 8000 but you might have
00:17:59 - 00:18:03: another application running on port 8000
00:18:02 - 00:18:05: in that case you might want to
00:18:03 - 00:18:08: explicitly set the port number
00:18:05 - 00:18:09: so let's go ahead with that now we don't
00:18:08 - 00:18:12: get an error
00:18:09 - 00:18:13: because manage the pi knows about the
00:18:12 - 00:18:15: settings of our project
00:18:13 - 00:18:16: now here we get this warning saying you
00:18:15 - 00:18:18: have 18
00:18:16 - 00:18:21: unapplied migrations don't worry about
00:18:18 - 00:18:23: this yet we'll talk about this soon
00:18:21 - 00:18:25: so if you look over here you can see
00:18:23 - 00:18:28: that django has started
00:18:25 - 00:18:29: a development server at this address so
00:18:28 - 00:18:30: we can copy this and paste it into
00:18:29 - 00:18:32: browser
00:18:30 - 00:18:35: or if you're on a mac and using z shell
00:18:32 - 00:18:38: you can hold down the command key and
00:18:35 - 00:18:39: click this all right beautiful
00:18:38 - 00:18:41: our first django project is running
00:18:39 - 00:18:44: successfully so let's move on to the
00:18:41 - 00:18:44: next lesson
00:18:45 - 00:18:51: [Music]
00:18:50 - 00:18:54: so far i've been using a separate
00:18:51 - 00:18:56: terminal window but vs code also has
00:18:54 - 00:18:58: an integrated terminal window that is
00:18:56 - 00:19:00: easier to use but to use that we have to
00:18:58 - 00:19:01: properly configure it to use the python
00:19:00 - 00:19:03: interpreter
00:19:01 - 00:19:05: inside our virtual environment let me
00:19:03 - 00:19:07: show you how to do this
00:19:05 - 00:19:09: so back to our terminal window first
00:19:07 - 00:19:12: we're going to stop the web server
00:19:09 - 00:19:15: by pressing ctrl and c okay
00:19:12 - 00:19:17: now back in vs code on the top under the
00:19:15 - 00:19:19: view menu
00:19:17 - 00:19:21: look we have this command pallet the
00:19:19 - 00:19:24: shortcut on mac is
00:19:21 - 00:19:25: shift command and p
00:19:24 - 00:19:28: now here we're going to search for
00:19:25 - 00:19:31: python interpreter
00:19:28 - 00:19:33: so currently vs code is using this
00:19:31 - 00:19:35: python interpreter that is installed
00:19:33 - 00:19:36: globally on this machine we don't want
00:19:35 - 00:19:38: to use this you want to use the one
00:19:36 - 00:19:40: inside our virtual environment but how
00:19:38 - 00:19:41: can we find the path to our virtual
00:19:40 - 00:19:44: environment
00:19:41 - 00:19:48: very easy so back to the terminal
00:19:44 - 00:19:51: let's run pip and dash dash vm
00:19:48 - 00:19:53: all right here's the path so let's copy
00:19:51 - 00:19:56: this
00:19:53 - 00:19:57: good now back to vs code we're going to
00:19:56 - 00:20:00: select
00:19:57 - 00:20:01: enter interpreter path then we're going
00:20:00 - 00:20:05: to paste the path
00:20:01 - 00:20:08: and append slash bin slash
00:20:05 - 00:20:09: python at the end if you're on windows
00:20:08 - 00:20:11: instead of a forward slash you have to
00:20:09 - 00:20:14: use a backslash
00:20:11 - 00:20:16: okay good now
00:20:14 - 00:20:18: in this project we have an extra
00:20:16 - 00:20:20: directory vs code
00:20:18 - 00:20:21: we have a settings file and here we have
00:20:20 - 00:20:24: the path
00:20:21 - 00:20:27: to a python interpreter good with this
00:20:24 - 00:20:29: we can go to the view menu
00:20:27 - 00:20:31: now look we have this integrated
00:20:29 - 00:20:35: terminal the shortcut on mac
00:20:31 - 00:20:37: is control and backtick
00:20:35 - 00:20:39: now vs code automatically activates the
00:20:37 - 00:20:43: virtual environment for this project
00:20:39 - 00:20:46: so here we can run python manage.pi
00:20:43 - 00:20:48: run server good so going forward
00:20:46 - 00:20:49: i'm going to use the integrated terminal
00:20:48 - 00:20:52: window here it's easier
00:20:49 - 00:20:53: we can always hide it by pressing ctrl
00:20:52 - 00:20:56: and backtick
00:20:53 - 00:20:58: or bring it back we can maximize it move
00:20:56 - 00:21:00: it around and so on
00:20:58 - 00:21:01: now one quick tip sometimes when running
00:21:00 - 00:21:03: this command
00:21:01 - 00:21:04: you might get a syntax error saying
00:21:03 - 00:21:06: invalid syntax
00:21:04 - 00:21:07: this happens every now and then when vs
00:21:06 - 00:21:09: code fails to
00:21:07 - 00:21:11: activate the virtual environment for
00:21:09 - 00:21:12: this project to solve this problem all
00:21:11 - 00:21:16: you have to do
00:21:12 - 00:21:18: is open a new terminal window and look
00:21:16 - 00:21:19: vs code executed this command to
00:21:18 - 00:21:21: activate
00:21:19 - 00:21:22: the virtual environment for this project
00:21:21 - 00:21:25: now we can run
00:21:22 - 00:21:29: python manage.pi run server
00:21:25 - 00:21:31: great hey guys bosh here i just wanted
00:21:29 - 00:21:31: to let you know that this tutorial you
00:21:31 - 00:21:34: have been watching
00:21:31 - 00:21:35: is actually the first hour of my
00:21:34 - 00:21:37: ultimate django course
00:21:35 - 00:21:39: the complete course is about 10 hours
00:21:37 - 00:21:41: and goes way beyond this tutorial
00:21:39 - 00:21:43: so if you're serious about learning
00:21:41 - 00:21:44: django and are looking for a job as a
00:21:43 - 00:21:45: back-end
00:21:44 - 00:21:47: developer i highly encourage you to
00:21:45 - 00:21:49: enroll in the course the course comes
00:21:47 - 00:21:51: with tons of exercises and solutions
00:21:49 - 00:21:53: a full e-commerce project that you will
00:21:51 - 00:21:56: eventually deploy to the cloud
00:21:53 - 00:21:57: plus a 30-day money-back guarantee and a
00:21:56 - 00:21:58: certificate of completion you can add
00:21:57 - 00:22:00: your resume
00:21:58 - 00:22:02: in case you're interested i'll put the
00:22:00 - 00:22:03: link down below and if not that's
00:22:02 - 00:22:06: totally fine let's move on to the next
00:22:03 - 00:22:06: lesson
00:22:06 - 00:22:12: [Music]
00:22:10 - 00:22:13: all right let's talk about apps so every
00:22:12 - 00:22:15: django project
00:22:13 - 00:22:16: is essentially a collection of various
00:22:15 - 00:22:19: apps each providing
00:22:16 - 00:22:20: certain functionality just like the apps
00:22:19 - 00:22:21: on your mobile phone
00:22:20 - 00:22:24: each app provides a certain
00:22:21 - 00:22:26: functionality right django projects are
00:22:24 - 00:22:29: exactly the same so in this project
00:22:26 - 00:22:31: let's open up the storefront directory
00:22:29 - 00:22:33: and then look at our settings module
00:22:31 - 00:22:35: now we can collapse this panel by
00:22:33 - 00:22:38: pressing command and b on mac
00:22:35 - 00:22:40: or ctrl and b on windows okay now in
00:22:38 - 00:22:41: this module we have a bunch of different
00:22:40 - 00:22:43: settings
00:22:41 - 00:22:44: in this lesson we're going to look at
00:22:43 - 00:22:47: the install apps
00:22:44 - 00:22:48: so every django project by default
00:22:47 - 00:22:51: includes these apps
00:22:48 - 00:22:53: the first app is the admin app which
00:22:51 - 00:22:56: gives us an admin interface for
00:22:53 - 00:22:57: managing our data then we have the auth
00:22:56 - 00:22:59: app which is used for
00:22:57 - 00:23:01: authenticating users then we have
00:22:59 - 00:23:02: content types app which we'll talk about
00:23:01 - 00:23:04: later in the course
00:23:02 - 00:23:06: next we have the sessions app which is
00:23:04 - 00:23:07: kind of legacy we don't use sessions
00:23:06 - 00:23:09: anymore
00:23:07 - 00:23:11: a session is a temporary memory on the
00:23:09 - 00:23:13: server for managing users data
00:23:11 - 00:23:15: these days when building apis with
00:23:13 - 00:23:18: django we don't use the sessions app
00:23:15 - 00:23:19: so we can come here and delete this app
00:23:18 - 00:23:21: then we have the messages app
00:23:19 - 00:23:23: which is used for displaying one-time
00:23:21 - 00:23:26: notifications to the user
00:23:23 - 00:23:28: and finally we have the static files app
00:23:26 - 00:23:31: for serving static files like images
00:23:28 - 00:23:34: css files and so on so each app provides
00:23:31 - 00:23:36: a certain piece of functionality okay
00:23:34 - 00:23:38: now we can also create our own apps here
00:23:36 - 00:23:40: so let's save this file now let's open
00:23:38 - 00:23:43: up the terminal window by pressing
00:23:40 - 00:23:45: control and backtick so here's our
00:23:43 - 00:23:47: terminal window where we have
00:23:45 - 00:23:50: our development server running we're
00:23:47 - 00:23:53: going to open a new terminal window
00:23:50 - 00:23:54: okay now let's expand this to clear the
00:23:53 - 00:23:58: window we simply press
00:23:54 - 00:24:01: ctrl and l now we're going to run python
00:23:58 - 00:24:02: manage.pi start app and we're going to
00:24:01 - 00:24:05: call this app
00:24:02 - 00:24:08: playground okay so
00:24:05 - 00:24:09: let's close the screen now and open up
00:24:08 - 00:24:11: the explorer panel
00:24:09 - 00:24:14: all right look here's our new app which
00:24:11 - 00:24:15: is represented using a folder with a
00:24:14 - 00:24:17: special structure
00:24:15 - 00:24:18: so every django app has the exact same
00:24:17 - 00:24:20: structure
00:24:18 - 00:24:22: here we have the migrations folder for
00:24:20 - 00:24:23: generating database tables we'll talk
00:24:22 - 00:24:25: about that later in the course we have a
00:24:23 - 00:24:28: complete section about this topic
00:24:25 - 00:24:30: we have the admin module where we define
00:24:28 - 00:24:31: how the admin interface for this app is
00:24:30 - 00:24:34: going to look like
00:24:31 - 00:24:35: next we have the apps module where we
00:24:34 - 00:24:37: configure this app
00:24:35 - 00:24:39: so the name is misleading i don't know
00:24:37 - 00:24:40: why django developers decided to call
00:24:39 - 00:24:41: this module apps
00:24:40 - 00:24:43: it would be better if it was called
00:24:41 - 00:24:45: config that's just my two cents
00:24:43 - 00:24:48: next we have the models module where we
00:24:45 - 00:24:50: define the model classes for this app
00:24:48 - 00:24:52: we use model classes to pull out data
00:24:50 - 00:24:52: from the database and present to the
00:24:52 - 00:24:54: user
00:24:52 - 00:24:56: next we have the tests module where we
00:24:54 - 00:24:58: write our unit tests
00:24:56 - 00:24:59: and finally we have the views module
00:24:58 - 00:25:00: which we'll talk about in the next
00:24:59 - 00:25:02: lesson
00:25:00 - 00:25:03: again the name is misleading this is not
00:25:02 - 00:25:05: the view that you think if you come from
00:25:03 - 00:25:07: a front-end development background
00:25:05 - 00:25:09: so what we have here is essentially a
00:25:07 - 00:25:10: request handler it's not a view it
00:25:09 - 00:25:12: doesn't have
00:25:10 - 00:25:14: a template or html again we'll talk
00:25:12 - 00:25:16: about that in the next lesson
00:25:14 - 00:25:18: so we created a new app now we need to
00:25:16 - 00:25:22: register this app in the settings module
00:25:18 - 00:25:24: so every time you create a new app
00:25:22 - 00:25:25: you need to register it here in the list
00:25:24 - 00:25:27: of installed apps
00:25:25 - 00:25:30: we simply add the name of the app which
00:25:27 - 00:25:32: is called playground
00:25:30 - 00:25:35: save the changes done in the next lesson
00:25:32 - 00:25:35: we're going to talk about views
00:25:36 - 00:25:42: [Music]
00:25:40 - 00:25:43: alright let's talk about views so
00:25:42 - 00:25:46: earlier you learned that http
00:25:43 - 00:25:47: is a request response protocol so every
00:25:46 - 00:25:49: data exchange
00:25:47 - 00:25:52: involves a request and a response this
00:25:49 - 00:25:54: is where we use views in django
00:25:52 - 00:25:56: so here in the playground folder let's
00:25:54 - 00:25:58: open up the views module
00:25:56 - 00:25:59: this is where we define our views or
00:25:58 - 00:26:02: view functions
00:25:59 - 00:26:03: a view function is a function that takes
00:26:02 - 00:26:05: a request
00:26:03 - 00:26:06: and returns a response so more
00:26:05 - 00:26:09: accurately
00:26:06 - 00:26:10: it's a request handler in some
00:26:09 - 00:26:13: frameworks it's called
00:26:10 - 00:26:15: an action in django it's called a view
00:26:13 - 00:26:17: but i don't agree with this name because
00:26:15 - 00:26:19: from an architectural point of view a
00:26:17 - 00:26:20: view is often associated with something
00:26:19 - 00:26:22: that the user sees
00:26:20 - 00:26:23: that part in django is called a template
00:26:22 - 00:26:24: and we'll talk about that later in this
00:26:23 - 00:26:26: section
00:26:24 - 00:26:27: now that aside let's create our first
00:26:26 - 00:26:30: view function
00:26:27 - 00:26:31: so we're going to create a function we
00:26:30 - 00:26:34: can call it anything we want
00:26:31 - 00:26:36: i'm going to call it say hello
00:26:34 - 00:26:39: now this function should take a request
00:26:36 - 00:26:44: object and return a response
00:26:39 - 00:26:45: so first on the top from django.http
00:26:44 - 00:26:47: package
00:26:45 - 00:26:48: we're going to import the http response
00:26:47 - 00:26:50: class
00:26:48 - 00:26:52: now in this function we can do anything
00:26:50 - 00:26:55: we want in a real-world scenario we can
00:26:52 - 00:26:56: pull data from a database we can
00:26:55 - 00:26:58: transform data
00:26:56 - 00:26:59: we can send emails and so on for now
00:26:58 - 00:27:02: let's just return
00:26:59 - 00:27:03: a simple response so we're going to
00:27:02 - 00:27:07: return
00:27:03 - 00:27:09: an instance of the http response class
00:27:07 - 00:27:11: and in this object in this response you
00:27:09 - 00:27:14: want to add a simple string
00:27:11 - 00:27:16: so let's say hello world okay
00:27:14 - 00:27:17: so this is our first view or first view
00:27:16 - 00:27:19: function
00:27:17 - 00:27:22: now we need to map this view to a url so
00:27:19 - 00:27:24: when we get a request at that url
00:27:22 - 00:27:27: this function will be called and that's
00:27:24 - 00:27:27: what we're going to do next
00:27:27 - 00:27:33: [Music]
00:27:31 - 00:27:34: alright here's our django project now
00:27:33 - 00:27:38: let's say whenever we send
00:27:34 - 00:27:39: a request to playground slash hello
00:27:38 - 00:27:41: our view function should be called and
00:27:39 - 00:27:43: return hello world to the user
00:27:41 - 00:27:44: let's see how we can do that so back to
00:27:43 - 00:27:46: our project
00:27:44 - 00:27:48: here in the playground folder we're
00:27:46 - 00:27:51: going to add a new file
00:27:48 - 00:27:52: called urls.pi you could call it
00:27:51 - 00:27:55: anything the name doesn't matter
00:27:52 - 00:27:57: but by convention we call it urls now
00:27:55 - 00:28:00: in this module we're going to map our
00:27:57 - 00:28:02: urls to our view functions
00:28:00 - 00:28:05: so on the top we're going to import the
00:28:02 - 00:28:07: path function from django.urls
00:28:05 - 00:28:09: so from django.urls we're going to
00:28:07 - 00:28:10: import the path function
00:28:09 - 00:28:12: now don't worry about memorizing any of
00:28:10 - 00:28:14: these as you practice
00:28:12 - 00:28:15: all of this will become second nature
00:28:14 - 00:28:17: also
00:28:15 - 00:28:19: from the current folder we should import
00:28:17 - 00:28:21: the views module
00:28:19 - 00:28:22: so we can reference our view function
00:28:21 - 00:28:25: now we should define
00:28:22 - 00:28:27: a special variable called url patterns
00:28:25 - 00:28:29: all in lower case make sure to split it
00:28:27 - 00:28:30: properly because this is what django
00:28:29 - 00:28:33: looks for
00:28:30 - 00:28:35: we should set this to an array of url
00:28:33 - 00:28:37: pattern objects
00:28:35 - 00:28:38: we use the path function to create a url
00:28:37 - 00:28:40: pattern object
00:28:38 - 00:28:42: so if we call this function look at the
00:28:40 - 00:28:44: signature of this function
00:28:42 - 00:28:45: this function has a bunch of parameters
00:28:44 - 00:28:47: the first one is route
00:28:45 - 00:28:49: which is a string the notation you see
00:28:47 - 00:28:51: here is called type annotation which is
00:28:49 - 00:28:53: kind of a new feature in python
00:28:51 - 00:28:54: with type annotation we can see the type
00:28:53 - 00:28:56: of parameters
00:28:54 - 00:28:58: and the return value of a function so
00:28:56 - 00:28:59: the first parameter is route which is a
00:28:58 - 00:29:01: string
00:28:59 - 00:29:03: the second parameter is view which is a
00:29:01 - 00:29:06: function that returns
00:29:03 - 00:29:09: http response object now look over here
00:29:06 - 00:29:10: this notation represents the return type
00:29:09 - 00:29:13: of this function
00:29:10 - 00:29:14: so the path function returns a url
00:29:13 - 00:29:15: pattern object
00:29:14 - 00:29:18: so i'm going to call this function and
00:29:15 - 00:29:22: give it two arguments a route or a url
00:29:18 - 00:29:25: which is playground slash hello and
00:29:22 - 00:29:26: a view function so from the views module
00:29:25 - 00:29:28: we're going to get
00:29:26 - 00:29:30: say hello note that i'm not calling this
00:29:28 - 00:29:31: function so here we don't have a pair of
00:29:30 - 00:29:33: parentheses
00:29:31 - 00:29:35: we're just passing a reference to this
00:29:33 - 00:29:38: function okay
00:29:35 - 00:29:39: so what we have here is called a url
00:29:38 - 00:29:42: conf module
00:29:39 - 00:29:43: that basically means url configuration
00:29:42 - 00:29:45: so every app
00:29:43 - 00:29:47: can have its own url configuration but
00:29:45 - 00:29:48: now we need to import this url
00:29:47 - 00:29:50: configuration
00:29:48 - 00:29:51: into the main url configuration for this
00:29:50 - 00:29:54: project
00:29:51 - 00:29:56: where is it you saw it earlier so
00:29:54 - 00:29:59: back to the explorer panel here in the
00:29:56 - 00:30:02: storefront folder
00:29:59 - 00:30:03: we have another url's module
00:30:02 - 00:30:06: up here we have a bunch of comments
00:30:03 - 00:30:08: about how we should use this module
00:30:06 - 00:30:09: now look over here if you want to
00:30:08 - 00:30:11: include another
00:30:09 - 00:30:13: url conf there are two things we need to
00:30:11 - 00:30:14: do first we need to import the include
00:30:13 - 00:30:17: function
00:30:14 - 00:30:18: from django.urls so over here we have
00:30:17 - 00:30:20: from django.urls
00:30:18 - 00:30:22: we're going to import the include
00:30:20 - 00:30:25: function next we need to add
00:30:22 - 00:30:29: a url to url patterns
00:30:25 - 00:30:31: so in this module we also have a url
00:30:29 - 00:30:33: patterns object which is an array
00:30:31 - 00:30:35: of url patterns object so here we're
00:30:33 - 00:30:38: going to call path
00:30:35 - 00:30:39: give it a route and then we use the
00:30:38 - 00:30:41: include function
00:30:39 - 00:30:42: to reference the url configuration
00:30:41 - 00:30:46: module
00:30:42 - 00:30:49: in this app so
00:30:46 - 00:30:52: we're going to call path and say
00:30:49 - 00:30:54: any urls that start with playground
00:30:52 - 00:30:55: followed by a forward slash should be
00:30:54 - 00:30:57: routed to
00:30:55 - 00:30:59: our playground app so this is where we
00:30:57 - 00:31:01: use the include function
00:30:59 - 00:31:03: now the include function requires a
00:31:01 - 00:31:05: parameter that is a string
00:31:03 - 00:31:08: here we're going to reference playground
00:31:05 - 00:31:11: dot urls
00:31:08 - 00:31:14: so if we send the request to playground
00:31:11 - 00:31:16: slash hello django knows that
00:31:14 - 00:31:18: all requests that start with playground
00:31:16 - 00:31:20: should be handled by this
00:31:18 - 00:31:22: app so it's going to chop off the first
00:31:20 - 00:31:24: part of this url
00:31:22 - 00:31:26: and pass the rest to the url
00:31:24 - 00:31:28: configuration module
00:31:26 - 00:31:30: in the playground app so back to this
00:31:28 - 00:31:32: url's module
00:31:30 - 00:31:34: we no longer need to add playground here
00:31:32 - 00:31:37: because we added it once
00:31:34 - 00:31:39: in the main url configuration module
00:31:37 - 00:31:41: so we simply add hello followed by a
00:31:39 - 00:31:43: forward slash i forgot to add that we
00:31:41 - 00:31:44: always end our routes with a forward
00:31:43 - 00:31:47: slash
00:31:44 - 00:31:48: so let's save the changes now whenever
00:31:47 - 00:31:51: we change our code
00:31:48 - 00:31:52: django web server automatically restores
00:31:51 - 00:31:54: itself
00:31:52 - 00:31:56: so let's open up the terminal window
00:31:54 - 00:31:59: make sure we don't have any arrows good
00:31:56 - 00:32:01: so back to the browser let's send a
00:31:59 - 00:32:04: request to this endpoint
00:32:01 - 00:32:05: great we see hello world on the screen
00:32:04 - 00:32:07: so this is how we can map
00:32:05 - 00:32:15: urls to view functions next we're going
00:32:07 - 00:32:17: to talk about templates
00:32:15 - 00:32:18: so i told you that views in django are
00:32:17 - 00:32:20: not really views they're more like
00:32:18 - 00:32:22: request handlers or actions
00:32:20 - 00:32:24: what we often call a view in other
00:32:22 - 00:32:25: frameworks is called a template in
00:32:24 - 00:32:27: django
00:32:25 - 00:32:30: so let's see how we can use a template
00:32:27 - 00:32:33: to return html content to the client
00:32:30 - 00:32:33: so here in the playground app we're
00:32:33 - 00:32:36: going to add
00:32:33 - 00:32:38: a new folder called templates
00:32:36 - 00:32:40: and in this folder we're going to add a
00:32:38 - 00:32:42: new file called
00:32:40 - 00:32:44: hello.html and of course we could call
00:32:42 - 00:32:46: it anything
00:32:44 - 00:32:47: and here we can write some html markup
00:32:46 - 00:32:50: for example we can type
00:32:47 - 00:32:53: h1 and press tab to add an h1 heading
00:32:50 - 00:32:55: and say hello world now don't worry if
00:32:53 - 00:32:56: you don't know html we're not going to
00:32:55 - 00:32:57: use it in this course
00:32:56 - 00:32:59: i just want to show you how django
00:32:57 - 00:33:02: templates work
00:32:59 - 00:33:03: so let's save the changes now back to
00:33:02 - 00:33:06: our view function
00:33:03 - 00:33:07: instead of returning a plain http
00:33:06 - 00:33:09: response
00:33:07 - 00:33:11: we're going to use the render function
00:33:09 - 00:33:13: to render a template and return
00:33:11 - 00:33:15: html markup to the client so let's
00:33:13 - 00:33:18: remove this line
00:33:15 - 00:33:19: and call the render function now look at
00:33:18 - 00:33:22: the return type
00:33:19 - 00:33:24: of this function it returns an http
00:33:22 - 00:33:26: response object
00:33:24 - 00:33:27: so here we're going to return the
00:33:26 - 00:33:29: response
00:33:27 - 00:33:31: now let's remove the brackets and type
00:33:29 - 00:33:32: them again so we can see the function
00:33:31 - 00:33:35: signature
00:33:32 - 00:33:36: the first parameter here is a request
00:33:35 - 00:33:39: object and
00:33:36 - 00:33:42: the type of this is http request
00:33:39 - 00:33:43: so we're going to pass this request
00:33:42 - 00:33:47: object
00:33:43 - 00:33:49: right here now the second parameter
00:33:47 - 00:33:50: that's the name of our template which is
00:33:49 - 00:33:54: a string
00:33:50 - 00:33:56: so here i'm going to say hello.html
00:33:54 - 00:33:57: the other parameters are optional so
00:33:56 - 00:34:00: don't worry about them at this point
00:33:57 - 00:34:02: now save the changes let's make sure our
00:34:00 - 00:34:05: project works up to this point
00:34:02 - 00:34:08: so back in the browser refresh beautiful
00:34:05 - 00:34:10: now we see html content we can verify it
00:34:08 - 00:34:13: by right clicking on this page and
00:34:10 - 00:34:14: looking at the page source so look we
00:34:13 - 00:34:17: are returning
00:34:14 - 00:34:19: html content great now let's make this a
00:34:17 - 00:34:22: bit more interesting
00:34:19 - 00:34:22: so back to our template instead of hello
00:34:22 - 00:34:25: world
00:34:22 - 00:34:28: we can dynamically render some value so
00:34:25 - 00:34:28: back to review function let's type a
00:34:28 - 00:34:31: comma
00:34:28 - 00:34:33: to see the next parameter that is a
00:34:31 - 00:34:35: context object
00:34:33 - 00:34:36: and the type of this is a mapping of
00:34:35 - 00:34:39: string
00:34:36 - 00:34:40: to any that means we can pass any
00:34:39 - 00:34:43: mapping object
00:34:40 - 00:34:43: that maps a string value to any other
00:34:43 - 00:34:47: type of
00:34:43 - 00:34:50: object so here we can pass a dictionary
00:34:47 - 00:34:51: so let's pass a dictionary the type of
00:34:50 - 00:34:53: the key should be a string so we can
00:34:51 - 00:34:54: call that name
00:34:53 - 00:34:56: and we're going to set that to a value
00:34:54 - 00:35:00: like let's say mosh
00:34:56 - 00:35:02: now back to our template
00:35:00 - 00:35:04: instead of hello world we can render the
00:35:02 - 00:35:07: name that we passed here
00:35:04 - 00:35:08: so we type two pairs of braces and in
00:35:07 - 00:35:11: between
00:35:08 - 00:35:15: we type the name of the key save
00:35:11 - 00:35:18: refresh beautiful now in this template
00:35:15 - 00:35:20: we can also write some logic so we can
00:35:18 - 00:35:23: type an if statement so we type braces
00:35:20 - 00:35:25: and in between them we add two
00:35:23 - 00:35:27: percentage signs
00:35:25 - 00:35:28: in between them we can write an if
00:35:27 - 00:35:32: statement so we can say
00:35:28 - 00:35:35: if name is set we can render it here
00:35:32 - 00:35:35: otherwise
00:35:35 - 00:35:41: we can render hello world
00:35:39 - 00:35:42: and of course we need an end if clause
00:35:41 - 00:35:46: as well so
00:35:42 - 00:35:48: and if now this syntax is kind of ugly
00:35:46 - 00:35:50: but the good thing about django is that
00:35:48 - 00:35:52: it's modular so you can easily replace
00:35:50 - 00:35:55: django's default template engine with
00:35:52 - 00:35:57: your preferred template engine but once
00:35:55 - 00:35:57: again we don't really use templates in
00:35:57 - 00:36:00: django
00:35:57 - 00:36:01: projects that often these days there are
00:36:00 - 00:36:04: special cases for them but
00:36:01 - 00:36:05: for the most part we use django to build
00:36:04 - 00:36:08: apis that return data
00:36:05 - 00:36:09: not html content so i just included this
00:36:08 - 00:36:10: lesson
00:36:09 - 00:36:12: so you know what templates are and how
00:36:10 - 00:36:14: they work we're not going to spend any
00:36:12 - 00:36:16: more time on templates for now
00:36:14 - 00:36:19: unless we encounter a situation where we
00:36:16 - 00:36:19: really need them
00:36:19 - 00:36:26: [Music]
00:36:24 - 00:36:27: let's talk about debugging django
00:36:26 - 00:36:29: applications in vs code
00:36:27 - 00:36:31: this is particularly useful if our
00:36:29 - 00:36:33: application doesn't produce the right
00:36:31 - 00:36:34: result and we want to run it line by
00:36:33 - 00:36:36: line and see
00:36:34 - 00:36:38: where exactly something has gone wrong
00:36:36 - 00:36:41: so click on this icon
00:36:38 - 00:36:43: to open the run and debug panel now the
00:36:41 - 00:36:46: first time you see this message saying
00:36:43 - 00:36:47: we should create a launch.json file
00:36:46 - 00:36:48: basically we need to create a launch
00:36:47 - 00:36:50: profile
00:36:48 - 00:36:51: so vs code knows how to run or debug
00:36:50 - 00:36:55: this application
00:36:51 - 00:36:58: so let's click on this now in this list
00:36:55 - 00:37:00: select django all right here's our
00:36:58 - 00:37:01: launch.json file
00:37:00 - 00:37:04: what you see here is kind of like a
00:37:01 - 00:37:05: dictionary in python we have a bunch of
00:37:04 - 00:37:08: key value pairs
00:37:05 - 00:37:08: these key value pairs define a launch
00:37:08 - 00:37:10: profile
00:37:08 - 00:37:12: so vs code knows that to run this
00:37:10 - 00:37:14: application
00:37:12 - 00:37:15: it should use the current python
00:37:14 - 00:37:18: interpreter
00:37:15 - 00:37:20: to run manage.pi which exists
00:37:18 - 00:37:21: in our workspace folder and then as an
00:37:20 - 00:37:24: argument
00:37:21 - 00:37:25: it should pass run server to it here we
00:37:24 - 00:37:28: can add
00:37:25 - 00:37:28: an additional argument to specify the
00:37:28 - 00:37:31: port
00:37:28 - 00:37:32: so it doesn't clash with port 8000 which
00:37:31 - 00:37:35: is currently in use
00:37:32 - 00:37:36: okay save the changes we're done with
00:37:35 - 00:37:39: this file
00:37:36 - 00:37:42: so let's close it now if you're curious
00:37:39 - 00:37:45: let me show you where this file exists
00:37:42 - 00:37:48: it's added to our project up here inside
00:37:45 - 00:37:49: the vs code folder so here's our launch
00:37:48 - 00:37:51: profile
00:37:49 - 00:37:53: now that we have a launch profile if we
00:37:51 - 00:37:55: go to the run and debug panel
00:37:53 - 00:37:57: we see something else so here we can
00:37:55 - 00:37:59: start our application for debugging
00:37:57 - 00:38:01: but before doing so i want to write some
00:37:59 - 00:38:05: dummy code here in our view function
00:38:01 - 00:38:08: so let's set x to 1 and
00:38:05 - 00:38:08: y to 2. now i'm going to click on this
00:38:08 - 00:38:11: line
00:38:08 - 00:38:12: to insert a breakpoint when we add a
00:38:11 - 00:38:14: breakpoint
00:38:12 - 00:38:15: via scope will execute every line of
00:38:14 - 00:38:18: code until
00:38:15 - 00:38:18: it hits our breakpoint from that point
00:38:18 - 00:38:22: onward
00:38:18 - 00:38:24: we can execute our code line by line so
00:38:22 - 00:38:28: let's add a breakpoint and then start
00:38:24 - 00:38:28: the application for debugging
00:38:30 - 00:38:33: all right let me collapse this window
00:38:32 - 00:38:36: good
00:38:33 - 00:38:37: so in this new terminal window we have a
00:38:36 - 00:38:40: development server
00:38:37 - 00:38:42: listening on port 9000 so let's hold
00:38:40 - 00:38:44: down the command key on mac or
00:38:42 - 00:38:45: control on windows and click on this
00:38:44 - 00:38:47: link
00:38:45 - 00:38:48: all right here's what we get the home
00:38:47 - 00:38:50: page of our project is gone
00:38:48 - 00:38:52: because we have registered a custom
00:38:50 - 00:38:54: route that is playground
00:38:52 - 00:38:56: hello so we see the homepage only the
00:38:54 - 00:39:00: first time we run our django project
00:38:56 - 00:39:02: so let's go to playground hello
00:39:00 - 00:39:05: all right our breakpoint is activated
00:39:02 - 00:39:07: and we are on this line
00:39:05 - 00:39:09: now on the left side in the variables
00:39:07 - 00:39:11: section you can see the local variables
00:39:09 - 00:39:13: so currently we have the request object
00:39:11 - 00:39:15: that is the request object that
00:39:13 - 00:39:16: we receive in this function so we can
00:39:15 - 00:39:19: expand it
00:39:16 - 00:39:22: and inspect its various attributes
00:39:19 - 00:39:23: we don't want to do that for now so
00:39:22 - 00:39:26: let's close this
00:39:23 - 00:39:28: we want to execute our code line by line
00:39:26 - 00:39:31: so here we have a bunch of functions
00:39:28 - 00:39:32: the first one is step over and the
00:39:31 - 00:39:34: shortcut for this is f10
00:39:32 - 00:39:38: with this we can step over the current
00:39:34 - 00:39:40: line so if we press f10
00:39:38 - 00:39:41: this line gets executed and now we are
00:39:40 - 00:39:44: on the second line
00:39:41 - 00:39:44: now look over here in the list of local
00:39:44 - 00:39:47: variables we have
00:39:44 - 00:39:49: x and its value is one this is very
00:39:47 - 00:39:51: useful when debugging applications
00:39:49 - 00:39:54: so if something is not calculated
00:39:51 - 00:39:55: properly we can inspect it here
00:39:54 - 00:39:57: now most of the time you can see your
00:39:55 - 00:39:59: local variables here
00:39:57 - 00:40:00: but if not you can always add them in
00:39:59 - 00:40:02: the watch window
00:40:00 - 00:40:05: so before recording this video i was
00:40:02 - 00:40:08: practicing that's why you see x here
00:40:05 - 00:40:09: let me select this and delete it so in
00:40:08 - 00:40:10: your watch section you're not going to
00:40:09 - 00:40:12: have any variables
00:40:10 - 00:40:14: to add one we simply click on this and
00:40:12 - 00:40:17: then type
00:40:14 - 00:40:18: the name of our variable okay so this is
00:40:17 - 00:40:21: how we can step over
00:40:18 - 00:40:22: various lines so we can press f10 again
00:40:21 - 00:40:24: and again
00:40:22 - 00:40:26: so this function is executed and now
00:40:24 - 00:40:28: back in the browser
00:40:26 - 00:40:30: we see the final result now let's do
00:40:28 - 00:40:33: something more interesting
00:40:30 - 00:40:34: so back to our code let's close
00:40:33 - 00:40:37: the terminal window so we have more
00:40:34 - 00:40:40: space i'm going to define
00:40:37 - 00:40:42: a function here called calculate
00:40:40 - 00:40:44: and here we're going to set x to 1 y to
00:40:42 - 00:40:47: 2 and return x
00:40:44 - 00:40:49: just some dummy code now over here
00:40:47 - 00:40:51: we're going to call the calculate
00:40:49 - 00:40:55: function okay
00:40:51 - 00:40:58: now save the changes back in the browser
00:40:55 - 00:40:58: let's refresh so our view function gets
00:40:58 - 00:41:01: caught
00:40:58 - 00:41:02: now we are right here now this time
00:41:01 - 00:41:05: instead of stepping over this line
00:41:02 - 00:41:06: we want to step into it because if you
00:41:05 - 00:41:08: step over this line
00:41:06 - 00:41:10: we're not going to see what happened in
00:41:08 - 00:41:13: the calculate function
00:41:10 - 00:41:14: we see the final result so we see x is
00:41:13 - 00:41:17: set to 1 and
00:41:14 - 00:41:18: we can verify that over here as well but
00:41:17 - 00:41:19: sometimes we need to step into a
00:41:18 - 00:41:21: function to see
00:41:19 - 00:41:23: what is happening there maybe there is a
00:41:21 - 00:41:28: bug inside the calculate function
00:41:23 - 00:41:28: so let's restart the debugger
00:41:29 - 00:41:33: okay i'm going to close this back in the
00:41:31 - 00:41:36: browser
00:41:33 - 00:41:36: let's refresh this page
00:41:36 - 00:41:40: okay we're back to this line now this
00:41:39 - 00:41:41: time we're going to step into this
00:41:40 - 00:41:44: function
00:41:41 - 00:41:45: so look over here this is the icon for
00:41:44 - 00:41:48: stepping into a function
00:41:45 - 00:41:51: and as you can see the shortcut is f11
00:41:48 - 00:41:54: so if you press f11
00:41:51 - 00:41:55: we go inside the calculate function now
00:41:54 - 00:41:58: we can execute each line
00:41:55 - 00:42:00: using f10 or step over and see where
00:41:58 - 00:42:01: something has gone wrong
00:42:00 - 00:42:03: now let's imagine this calculate
00:42:01 - 00:42:04: function is a large function with a lot
00:42:03 - 00:42:06: of code
00:42:04 - 00:42:07: at some point we want to step out of it
00:42:06 - 00:42:10: without having to execute
00:42:07 - 00:42:11: every line of code in this function
00:42:10 - 00:42:14: there's a shortcut for this
00:42:11 - 00:42:18: so look over here that is step
00:42:14 - 00:42:21: out the shortcut is shift and f11
00:42:18 - 00:42:24: so if we press shift and f11 we get back
00:42:21 - 00:42:26: to the previous function so this is how
00:42:24 - 00:42:26: we can debug django applications in vs
00:42:26 - 00:42:29: code
00:42:26 - 00:42:30: now once we're done it's always a good
00:42:29 - 00:42:32: practice
00:42:30 - 00:42:33: to remove these breakpoints otherwise
00:42:32 - 00:42:35: they get in the way
00:42:33 - 00:42:37: so as you debug your applications you
00:42:35 - 00:42:38: place various breakpoints in different
00:42:37 - 00:42:40: parts of your code
00:42:38 - 00:42:42: and you will hit them all the time so
00:42:40 - 00:42:44: always remove your breakpoints
00:42:42 - 00:42:45: once you're done with them so we're done
00:42:44 - 00:42:49: with this debugging session
00:42:45 - 00:42:52: now we can disconnect by pressing shift
00:42:49 - 00:42:54: and f5 or clicking on this icon
00:42:52 - 00:42:56: all right now one last tip before we
00:42:54 - 00:42:59: finish this lesson
00:42:56 - 00:43:02: on the top under the run menu look
00:42:59 - 00:43:03: we have a command called run without
00:43:02 - 00:43:06: debugging
00:43:03 - 00:43:08: the shortcut on mac is control and f5 so
00:43:06 - 00:43:09: if we use this shortcut we can start our
00:43:08 - 00:43:12: application
00:43:09 - 00:43:14: without having to run python manage.pi
00:43:12 - 00:43:15: run server let me show you what i mean
00:43:14 - 00:43:18: so
00:43:15 - 00:43:20: first let's bring up our terminal window
00:43:18 - 00:43:21: here's the second terminal window that
00:43:20 - 00:43:24: we use for debugging
00:43:21 - 00:43:25: i'm going to delete this here's the
00:43:24 - 00:43:27: first terminal window where
00:43:25 - 00:43:29: we started our application by running
00:43:27 - 00:43:32: python manage.pi
00:43:29 - 00:43:35: run server so let's press ctrl and c
00:43:32 - 00:43:36: to stop the server good i'm also going
00:43:35 - 00:43:38: to delete this terminal window
00:43:36 - 00:43:40: let's imagine we just opened this
00:43:38 - 00:43:42: project in vs code day one
00:43:40 - 00:43:44: now to run this application without
00:43:42 - 00:43:48: debugging we can press
00:43:44 - 00:43:48: ctrl and f5
00:43:48 - 00:43:51: now our application has started on port
00:43:50 - 00:43:54: 9000
00:43:51 - 00:43:57: so we can go to this address and then
00:43:54 - 00:43:59: hit playground hello
00:43:57 - 00:44:01: so this is how we can run our
00:43:59 - 00:44:02: application without debugging
00:44:01 - 00:44:04: just remember that if you use this
00:44:02 - 00:44:05: command your breakpoints are not going
00:44:04 - 00:44:06: to get hit
00:44:05 - 00:44:08: so if you want to debug your
00:44:06 - 00:44:11: applications you should start it
00:44:08 - 00:44:11: in the debug mode
00:44:12 - 00:44:18: [Music]
00:44:16 - 00:44:20: there is another way to debug django
00:44:18 - 00:44:20: applications using a powerful tool
00:44:20 - 00:44:23: called
00:44:20 - 00:44:24: django debug toolbar so if you go to
00:44:23 - 00:44:26: google and
00:44:24 - 00:44:28: search for django debug toolbar you're
00:44:26 - 00:44:30: going to find this page
00:44:28 - 00:44:31: over here you're going to find the
00:44:30 - 00:44:33: installation instructions
00:44:31 - 00:44:36: so i highly encourage you to follow
00:44:33 - 00:44:39: along with me and repeat the same steps
00:44:36 - 00:44:41: so we installed this toolbar together so
00:44:39 - 00:44:42: first we have to use pip or ppf to
00:44:41 - 00:44:45: install
00:44:42 - 00:44:47: django debug toolbar so back to vs code
00:44:45 - 00:44:49: i'm going to open up a new terminal
00:44:47 - 00:44:51: window
00:44:49 - 00:44:53: and as you can see vs code used the
00:44:51 - 00:44:54: source command to activate our virtual
00:44:53 - 00:44:58: environment
00:44:54 - 00:45:05: so now let's run pipen install
00:44:58 - 00:45:08: django dash debug dash toolbar
00:45:05 - 00:45:11: good now back to the documentation
00:45:08 - 00:45:13: the next step is to add debug toolbar in
00:45:11 - 00:45:16: the list of installed apps
00:45:13 - 00:45:17: in our settings module so back to vs
00:45:16 - 00:45:19: code
00:45:17 - 00:45:20: we can press command and p on mac or
00:45:19 - 00:45:23: control and p on windows
00:45:20 - 00:45:25: to bring up the search box now we search
00:45:23 - 00:45:28: for our settings module
00:45:25 - 00:45:29: good now in the list of install apps at
00:45:28 - 00:45:31: the end
00:45:29 - 00:45:33: we're going to add debug underline
00:45:31 - 00:45:36: toolbar
00:45:33 - 00:45:38: good now the next step
00:45:36 - 00:45:41: the next step is to add a new url
00:45:38 - 00:45:44: pattern in our main url conf module
00:45:41 - 00:45:47: so i'm going to copy this line and back
00:45:44 - 00:45:48: to vs code let's bring up the urls
00:45:47 - 00:45:49: module
00:45:48 - 00:45:51: we're going to pick the one in the
00:45:49 - 00:45:54: storefront folder
00:45:51 - 00:45:55: okay now we add a comma here and paste
00:45:54 - 00:45:57: that line
00:45:55 - 00:45:59: now here we have a compilation error
00:45:57 - 00:46:01: because debug toolbar is a module that
00:45:59 - 00:46:03: we have to import on the top
00:46:01 - 00:46:05: so if you look at the documentation you
00:46:03 - 00:46:08: can see that over here
00:46:05 - 00:46:10: import debug toolbar so copy this and
00:46:08 - 00:46:13: paste it right here
00:46:10 - 00:46:15: good now back to the documentation
00:46:13 - 00:46:17: the next step is to add a middleware we
00:46:15 - 00:46:19: use middleware to hook into django's
00:46:17 - 00:46:21: request response processing
00:46:19 - 00:46:23: so in our settings module we have a
00:46:21 - 00:46:26: setting for middleware
00:46:23 - 00:46:28: we're going to add this line in that
00:46:26 - 00:46:30: file so copy this
00:46:28 - 00:46:31: back to the settings module here we have
00:46:30 - 00:46:33: the install apps
00:46:31 - 00:46:35: right after that you can see the
00:46:33 - 00:46:38: middleware setting
00:46:35 - 00:46:41: so we're going to add that on the top
00:46:38 - 00:46:42: now the final step is to add our ip
00:46:41 - 00:46:44: address
00:46:42 - 00:46:45: in the internal ips setting so for local
00:46:44 - 00:46:48: development
00:46:45 - 00:46:50: we should use 127.001
00:46:48 - 00:46:52: so i'm going to copy this entire setting
00:46:50 - 00:46:53: because by default
00:46:52 - 00:46:56: this doesn't exist in a new django
00:46:53 - 00:46:58: project so copy this
00:46:56 - 00:46:59: and i'm going to paste it anywhere in
00:46:58 - 00:47:01: this settings file it doesn't really
00:46:59 - 00:47:03: matter
00:47:01 - 00:47:04: okay save so we have completed all the
00:47:03 - 00:47:06: steps
00:47:04 - 00:47:07: now back in the browser if you go to
00:47:06 - 00:47:09: this url playground
00:47:07 - 00:47:11: slash hello we don't see the toolbar it
00:47:09 - 00:47:13: should appear here
00:47:11 - 00:47:16: because the toolbar only appears when we
00:47:13 - 00:47:17: return a proper html document
00:47:16 - 00:47:19: if you right click here and look at the
00:47:17 - 00:47:21: page source
00:47:19 - 00:47:22: you can see that we are not returning a
00:47:21 - 00:47:25: proper html document
00:47:22 - 00:47:26: so we don't have the html head and body
00:47:25 - 00:47:30: elements
00:47:26 - 00:47:31: so let's open up hello.html now on the
00:47:30 - 00:47:33: top we type
00:47:31 - 00:47:34: html press tab now inside these elements
00:47:33 - 00:47:38: we're going to add
00:47:34 - 00:47:40: a body and then inside the body
00:47:38 - 00:47:43: we're going to add the code that we had
00:47:40 - 00:47:46: earlier so let's move that right here
00:47:43 - 00:47:48: good now we have a proper html document
00:47:46 - 00:47:50: of course the head element is missing
00:47:48 - 00:47:52: but it doesn't really matter
00:47:50 - 00:47:54: now back to the browser refresh and
00:47:52 - 00:47:55: here's django debug toolbar
00:47:54 - 00:47:58: here we have different panels like
00:47:55 - 00:47:58: history for seeing the urls we have hit
00:47:58 - 00:48:00: so far
00:47:58 - 00:48:02: we have versions to see the version of
00:48:00 - 00:48:04: django python and
00:48:02 - 00:48:05: debug toolbar we're running we have
00:48:04 - 00:48:08: processing time
00:48:05 - 00:48:09: we have our settings we have request
00:48:08 - 00:48:12: headers and so on
00:48:09 - 00:48:13: now my personal favorite panel is the
00:48:12 - 00:48:15: sql or
00:48:13 - 00:48:17: sql panel here we can see the queries
00:48:15 - 00:48:18: that are sent to the database so later
00:48:17 - 00:48:19: in the course
00:48:18 - 00:48:21: where we talk about querying the
00:48:19 - 00:48:23: database using django's
00:48:21 - 00:48:25: object relational mapper we're going to
00:48:23 - 00:48:27: come back to this panel and see
00:48:25 - 00:48:28: what queries django will generate and
00:48:27 - 00:48:30: send to the database
00:48:28 - 00:48:32: so that's it for this lesson we're done
00:48:30 - 00:48:33: with this section in the next section
00:48:32 - 00:48:35: we're going to talk about
00:48:33 - 00:48:38: building a data model so i'll see you in
00:48:35 - 00:48:38: the next section
00:48:40 - 00:48:43: welcome back to another section of the
00:48:41 - 00:48:44: ultimate django course
00:48:43 - 00:48:47: in this section we're going to talk
00:48:44 - 00:48:48: about models which are used to store and
00:48:47 - 00:48:50: retrieve data
00:48:48 - 00:48:52: we'll start off by quick introduction to
00:48:50 - 00:48:53: data modeling to make sure you know the
00:48:52 - 00:48:55: essential concepts
00:48:53 - 00:48:57: then we're going to design the data
00:48:55 - 00:48:58: model for an e-commerce application
00:48:57 - 00:49:01: next we're going to talk about
00:48:58 - 00:49:02: organizing our models in apps to improve
00:49:01 - 00:49:04: reusability
00:49:02 - 00:49:06: this is one of the areas that is often
00:49:04 - 00:49:07: misunderstood so i'm going to demystify
00:49:06 - 00:49:08: it once for all
00:49:07 - 00:49:11: and then we'll spend the rest of this
00:49:08 - 00:49:13: section in coding model classes
00:49:11 - 00:49:15: we'll use these classes to store and
00:49:13 - 00:49:17: retrieve data throughout the course
00:49:15 - 00:49:22: so let's jump in and get started
00:49:17 - 00:49:22: [Music]
00:49:24 - 00:49:28: the first step in every django project
00:49:26 - 00:49:29: is figuring out the pieces of data we
00:49:28 - 00:49:32: want to store
00:49:29 - 00:49:34: so what entities or concepts do we have
00:49:32 - 00:49:36: in an e-commerce application
00:49:34 - 00:49:38: well for starters we need the concept of
00:49:36 - 00:49:41: a product with attributes like title
00:49:38 - 00:49:42: description price and inventory now in a
00:49:41 - 00:49:44: real scenario
00:49:42 - 00:49:46: a product entity might have other
00:49:44 - 00:49:48: attributes it really depends on the
00:49:46 - 00:49:49: requirements of our application
00:49:48 - 00:49:51: for now we just want to keep things
00:49:49 - 00:49:53: simple okay now quite often
00:49:51 - 00:49:55: our products are divided in different
00:49:53 - 00:49:57: categories like shoes
00:49:55 - 00:50:00: beauty products fruits and so on so we
00:49:57 - 00:50:03: need another entity called collection or
00:50:00 - 00:50:05: category with an attribute called title
00:50:03 - 00:50:07: now we need to add a relationship or an
00:50:05 - 00:50:08: association between these entities
00:50:07 - 00:50:10: so we can start from one end and
00:50:08 - 00:50:12: navigate to the other end
00:50:10 - 00:50:14: for example we can get a collection and
00:50:12 - 00:50:16: find all the products in that collection
00:50:14 - 00:50:17: okay now let's assume that in our
00:50:16 - 00:50:20: application
00:50:17 - 00:50:21: a product can belong to one and only one
00:50:20 - 00:50:23: collection
00:50:21 - 00:50:24: and a collection can have multiple
00:50:23 - 00:50:26: products
00:50:24 - 00:50:27: so an asterisk represents many we could
00:50:26 - 00:50:30: also use an
00:50:27 - 00:50:30: n here okay now we have a one-to-many
00:50:30 - 00:50:33: relationship
00:50:30 - 00:50:35: between collection and product so
00:50:33 - 00:50:38: relationships can be one-to-one
00:50:35 - 00:50:38: one-to-many and many too many back to
00:50:38 - 00:50:40: our diagram
00:50:38 - 00:50:42: now over here we can add a label called
00:50:40 - 00:50:44: products and that means
00:50:42 - 00:50:46: when we code these entities or these
00:50:44 - 00:50:47: classes in the collection class we're
00:50:46 - 00:50:49: going to have an
00:50:47 - 00:50:51: attribute called products for now i just
00:50:49 - 00:50:53: want to hide this for simplicity okay
00:50:51 - 00:50:54: now sometimes we can have multiple
00:50:53 - 00:50:56: relationships or
00:50:54 - 00:50:58: multiple associations between two
00:50:56 - 00:50:59: entities so let's imagine that a
00:50:58 - 00:51:02: collection
00:50:59 - 00:51:03: can optionally have a featured product
00:51:02 - 00:51:05: that is the product
00:51:03 - 00:51:07: whose picture we want to show to the
00:51:05 - 00:51:08: user so we can add a second relationship
00:51:07 - 00:51:09: between
00:51:08 - 00:51:11: these entities now look at this number
00:51:09 - 00:51:14: here zero to one means
00:51:11 - 00:51:15: a collection can have zero to one
00:51:14 - 00:51:16: product
00:51:15 - 00:51:18: and we're gonna call that attribute
00:51:16 - 00:51:20: featured product so once again
00:51:18 - 00:51:22: that means in the collection class we're
00:51:20 - 00:51:24: going to have an attribute
00:51:22 - 00:51:25: called featured product okay now you
00:51:24 - 00:51:27: might ask
00:51:25 - 00:51:28: what about the id attribute shouldn't
00:51:27 - 00:51:30: every entity have an id
00:51:28 - 00:51:32: attribute yes but django is going to
00:51:30 - 00:51:35: automatically create that for us
00:51:32 - 00:51:36: that's why i haven't shown it here now a
00:51:35 - 00:51:38: little exercise
00:51:36 - 00:51:39: for you grab a piece of paper and
00:51:38 - 00:51:41: identify the
00:51:39 - 00:51:42: other essential entities we need in an
00:51:41 - 00:51:45: e-commerce application
00:51:42 - 00:51:47: just the bare minimum don't go ahead and
00:51:45 - 00:51:49: create a complex diagram like this
00:51:47 - 00:51:51: i don't want this there are only five
00:51:49 - 00:51:53: entities that i want you to identify
00:51:51 - 00:51:55: so spend a couple minutes and identify
00:51:53 - 00:51:55: these entities along with the attributes
00:51:55 - 00:51:59: and
00:51:55 - 00:51:59: relationships then come back see my
00:52:02 - 00:52:05: solution
00:52:06 - 00:52:09: all right so this is what we ended up
00:52:07 - 00:52:10: with in the previous lesson we have a
00:52:09 - 00:52:13: one-to-many relationship
00:52:10 - 00:52:15: between collections and products now
00:52:13 - 00:52:17: don't take this as a hard and fast rule
00:52:15 - 00:52:19: maybe in your application a product can
00:52:17 - 00:52:21: belong to many collections
00:52:19 - 00:52:23: then you're gonna have a many-to-many
00:52:21 - 00:52:24: relationship between products and
00:52:23 - 00:52:26: collections okay
00:52:24 - 00:52:28: so back to our model i'm gonna remove
00:52:26 - 00:52:30: the collection from here
00:52:28 - 00:52:32: so we have some free space on the screen
00:52:30 - 00:52:34: now what else do we need here
00:52:32 - 00:52:36: well in every e-commerce application we
00:52:34 - 00:52:38: have the concept of a shopping cart
00:52:36 - 00:52:40: right so we're going to have an entity
00:52:38 - 00:52:43: or a model or a class called
00:52:40 - 00:52:45: cart with an attribute called created at
00:52:43 - 00:52:46: let's assume that we need to know when
00:52:45 - 00:52:48: each card is created
00:52:46 - 00:52:51: so every now and then we can do a clean
00:52:48 - 00:52:53: up and remove cards that are 30 days old
00:52:51 - 00:52:55: i just made this up but in a real
00:52:53 - 00:52:56: scenario you should always design your
00:52:55 - 00:52:57: models
00:52:56 - 00:52:59: based on the requirements of your
00:52:57 - 00:53:00: project don't make up your own rules
00:52:59 - 00:53:02: okay
00:53:00 - 00:53:04: now we need a relationship or an
00:53:02 - 00:53:06: association between products and cards
00:53:04 - 00:53:08: because a card can have multiple
00:53:06 - 00:53:09: products and a product might be in
00:53:08 - 00:53:10: different cards
00:53:09 - 00:53:12: so here we have a many-to-many
00:53:10 - 00:53:15: relationship between product
00:53:12 - 00:53:16: and cart now sometimes the relationship
00:53:15 - 00:53:19: between two entities can have
00:53:16 - 00:53:20: attributes for example if a product is
00:53:19 - 00:53:22: in a shopping cart
00:53:20 - 00:53:24: we need to know how many instances of
00:53:22 - 00:53:24: that product we have in the shopping
00:53:24 - 00:53:26: cart
00:53:24 - 00:53:28: so this relationship itself should have
00:53:26 - 00:53:30: an attribute called
00:53:28 - 00:53:31: quantity so we're going to add a new
00:53:30 - 00:53:33: entity here called
00:53:31 - 00:53:35: cart item now look at the notation i've
00:53:33 - 00:53:37: used to represent this concept
00:53:35 - 00:53:39: i've connected cart item to the
00:53:37 - 00:53:42: relationship using a dashed line
00:53:39 - 00:53:44: that means cart item represents the
00:53:42 - 00:53:47: relationship between these two entities
00:53:44 - 00:53:48: product and cart this is what we call an
00:53:47 - 00:53:51: association class
00:53:48 - 00:53:51: so cart item is an association class
00:53:51 - 00:53:53: okay
00:53:51 - 00:53:56: now there's another way to show this
00:53:53 - 00:53:57: instead of using an association class we
00:53:56 - 00:54:00: can add a relationship between
00:53:57 - 00:54:01: cart and cart item because a cart might
00:54:00 - 00:54:03: contain
00:54:01 - 00:54:06: multiple items and an item belongs to
00:54:03 - 00:54:07: one and only one cart
00:54:06 - 00:54:10: similarly we can add a relationship
00:54:07 - 00:54:11: between product and card item because
00:54:10 - 00:54:14: each card item represents
00:54:11 - 00:54:15: a single product and a product might be
00:54:14 - 00:54:18: referenced by
00:54:15 - 00:54:21: many card items so here we have two
00:54:18 - 00:54:21: one too many relationships between these
00:54:21 - 00:54:24: entities
00:54:21 - 00:54:25: now compare this with the association
00:54:24 - 00:54:27: class notation
00:54:25 - 00:54:29: so we can either add a many-to-many
00:54:27 - 00:54:32: relationship with an association class
00:54:29 - 00:54:35: or two one-to-many relationships it's a
00:54:32 - 00:54:36: matter of personal preference okay
00:54:35 - 00:54:38: so we're done with the shopping cart but
00:54:36 - 00:54:41: you might ask what about the user or the
00:54:38 - 00:54:42: customer that owns this cart
00:54:41 - 00:54:44: where is that in the diagram well i
00:54:42 - 00:54:44: haven't connected cart with an entity
00:54:44 - 00:54:46: like
00:54:44 - 00:54:48: customer because we don't want to force
00:54:46 - 00:54:50: people to register and log in
00:54:48 - 00:54:52: before they can add products to their
00:54:50 - 00:54:54: shopping cart okay so there is no
00:54:52 - 00:54:57: relationship between cards and customers
00:54:54 - 00:54:58: so cars are essentially anonymous anyone
00:54:57 - 00:55:00: can have a cart
00:54:58 - 00:55:02: whether they're anonymous users or
00:55:00 - 00:55:04: registered customers okay
00:55:02 - 00:55:06: so we're done with the cart now let's
00:55:04 - 00:55:07: talk about customers
00:55:06 - 00:55:09: so our customer entity can have
00:55:07 - 00:55:11: attributes like name
00:55:09 - 00:55:12: email username password and so on now
00:55:11 - 00:55:15: for simplicity
00:55:12 - 00:55:16: i'm only showing name and email here now
00:55:15 - 00:55:19: a customer can have
00:55:16 - 00:55:20: many orders and each order belongs to
00:55:19 - 00:55:22: one and
00:55:20 - 00:55:23: only one customer so we need a
00:55:22 - 00:55:25: one-to-many relationship between
00:55:23 - 00:55:27: customers and orders
00:55:25 - 00:55:29: now once again the order entity might
00:55:27 - 00:55:30: have multiple attributes
00:55:29 - 00:55:32: for now we just want to know when this
00:55:30 - 00:55:34: order was placed okay
00:55:32 - 00:55:36: now an order can contain multiple
00:55:34 - 00:55:37: products and a product can be in
00:55:36 - 00:55:39: multiple orders
00:55:37 - 00:55:41: so we have a many-to-many relationship
00:55:39 - 00:55:43: between orders and products
00:55:41 - 00:55:44: and similar to the shopping cart example
00:55:43 - 00:55:45: this relationship itself needs
00:55:44 - 00:55:47: attributes
00:55:45 - 00:55:49: so here we need another entity called
00:55:47 - 00:55:52: order item with an attribute called
00:55:49 - 00:55:53: quantity that's our association class
00:55:52 - 00:55:55: alternatively
00:55:53 - 00:55:56: you could add a relationship between
00:55:55 - 00:55:59: order and order item
00:55:56 - 00:56:01: because each order may contain multiple
00:55:59 - 00:56:04: items and each order item
00:56:01 - 00:56:06: belongs to one and only one order
00:56:04 - 00:56:08: similarly an order item references one
00:56:06 - 00:56:09: and only one product
00:56:08 - 00:56:11: while a given product might be
00:56:09 - 00:56:13: referenced by multiple
00:56:11 - 00:56:14: order items so two one-to-many
00:56:13 - 00:56:16: relationships
00:56:14 - 00:56:18: so these are the entities that i wanted
00:56:16 - 00:56:19: you to identify but to make this project
00:56:18 - 00:56:22: more interesting
00:56:19 - 00:56:22: i decided to throw in one more entity
00:56:22 - 00:56:24: tag
00:56:22 - 00:56:26: here we have a minute-to-many
00:56:24 - 00:56:28: relationship between products and tags
00:56:26 - 00:56:30: because the product can have many tags
00:56:28 - 00:56:31: and the tag might be referenced by
00:56:30 - 00:56:35: different products we'll come back to
00:56:31 - 00:56:35: this entity in the next lesson
00:56:35 - 00:56:43: [Music]
00:56:41 - 00:56:44: so i told you that a django project
00:56:43 - 00:56:46: contains one or more apps
00:56:44 - 00:56:48: and just like the apps on your phone
00:56:46 - 00:56:51: each app in a django project provides
00:56:48 - 00:56:52: a specific piece of functionality so
00:56:51 - 00:56:54: that means
00:56:52 - 00:56:56: each app is going to have its own data
00:56:54 - 00:56:57: model so in this lesson we're going to
00:56:56 - 00:57:00: look at a few different ways to
00:56:57 - 00:57:01: organize our entities in different apps
00:57:00 - 00:57:02: one way is to have a single app called
00:57:01 - 00:57:05: the store
00:57:02 - 00:57:07: and drop all of our entities here now we
00:57:05 - 00:57:08: can bundle and distribute this app via
00:57:07 - 00:57:10: pip
00:57:08 - 00:57:11: and this way anyone can install this app
00:57:10 - 00:57:12: in their project
00:57:11 - 00:57:14: and get all these models and the
00:57:12 - 00:57:15: functionality around them
00:57:14 - 00:57:17: so next time we're working on an
00:57:15 - 00:57:18: ecommerce project we don't have to
00:57:17 - 00:57:21: rewrite the same functionality
00:57:18 - 00:57:22: over and over we simply install this app
00:57:21 - 00:57:24: in our project
00:57:22 - 00:57:25: and write extra code for customization
00:57:24 - 00:57:27: great
00:57:25 - 00:57:28: but there's a problem here as this
00:57:27 - 00:57:31: application grows and
00:57:28 - 00:57:32: gets more complex it gets bloated with
00:57:31 - 00:57:34: too many things
00:57:32 - 00:57:35: like too many models too many views and
00:57:34 - 00:57:37: other stuff
00:57:35 - 00:57:39: this is what we call a monolith like a
00:57:37 - 00:57:41: large heavy piece of stone
00:57:39 - 00:57:43: so at some point our application might
00:57:41 - 00:57:45: become hard to understand
00:57:43 - 00:57:46: hard to maintain and hard to reuse it
00:57:45 - 00:57:48: becomes like one of those remote
00:57:46 - 00:57:50: controls with too many buttons
00:57:48 - 00:57:52: when designing these apps we want to
00:57:50 - 00:57:54: follow the unix philosophy
00:57:52 - 00:57:55: so each app should do one thing and do
00:57:54 - 00:57:57: it well
00:57:55 - 00:58:00: so here's another solution we can break
00:57:57 - 00:58:02: down this project into four small apps
00:58:00 - 00:58:03: the products app which represents a
00:58:02 - 00:58:05: product catalog
00:58:03 - 00:58:07: so here we're gonna have three entities
00:58:05 - 00:58:09: product collection
00:58:07 - 00:58:10: and tag then we're going to have the
00:58:09 - 00:58:12: customers app for
00:58:10 - 00:58:13: managing customers we're going to have
00:58:12 - 00:58:14: the shopping cart app
00:58:13 - 00:58:16: for adding the shopping cart
00:58:14 - 00:58:19: functionality and the orders app
00:58:16 - 00:58:20: for adding the ordering functionality
00:58:19 - 00:58:22: not bad right
00:58:20 - 00:58:24: well this is actually a poor way of
00:58:22 - 00:58:25: breaking down this project for a number
00:58:24 - 00:58:27: of reasons
00:58:25 - 00:58:28: look at the coupling or dependency
00:58:27 - 00:58:30: between these apps
00:58:28 - 00:58:32: the orders app is dependent on the
00:58:30 - 00:58:33: shopping cart app which is dependent on
00:58:32 - 00:58:34: the products app
00:58:33 - 00:58:37: so next time we're working on an
00:58:34 - 00:58:39: e-commerce project we'll have to install
00:58:37 - 00:58:41: all these apps one by one first we have
00:58:39 - 00:58:42: to install the products app
00:58:41 - 00:58:45: followed by the shopping cart app the
00:58:42 - 00:58:46: customers app and the orders app
00:58:45 - 00:58:48: ideally each app should be
00:58:46 - 00:58:50: self-contained so we can easily drop it
00:58:48 - 00:58:53: into a new project the other problem is
00:58:50 - 00:58:53: that if we publish a new version of the
00:58:53 - 00:58:55: products app
00:58:53 - 00:58:56: that might cause a breaking change in
00:58:55 - 00:58:59: the shopping cart and
00:58:56 - 00:59:01: subsequently orders apps so anyone using
00:58:59 - 00:59:03: these apps have to upgrade
00:59:01 - 00:59:04: all these apps together again more and
00:59:03 - 00:59:06: more work
00:59:04 - 00:59:08: also it doesn't really make sense to
00:59:06 - 00:59:10: have the shopping cart functionality
00:59:08 - 00:59:12: without having a product catalog right
00:59:10 - 00:59:14: why would we ever want to add the
00:59:12 - 00:59:16: shopping cart functionality to a project
00:59:14 - 00:59:19: without a product catalog so shopping
00:59:16 - 00:59:22: cart functionality and product catalog
00:59:19 - 00:59:23: always go together by the same token
00:59:22 - 00:59:25: why would we ever want to add the
00:59:23 - 00:59:28: shopping cart functionality to a project
00:59:25 - 00:59:29: without the ability to place an order
00:59:28 - 00:59:31: just to allow people to add something to
00:59:29 - 00:59:33: their shopping cart
00:59:31 - 00:59:35: then what again it doesn't really make
00:59:33 - 00:59:38: sense so these concepts are highly
00:59:35 - 00:59:40: related and should be bundled together
00:59:38 - 00:59:41: if we separate them we increase coupling
00:59:40 - 00:59:43: between apps and we end up with the
00:59:41 - 00:59:45: problems i just talked about
00:59:43 - 00:59:47: so does it mean we have to go back to
00:59:45 - 00:59:48: the monolithic design no
00:59:47 - 00:59:50: there is a middle ground here look at
00:59:48 - 00:59:52: the tag entity
00:59:50 - 00:59:54: the ability to tag products is optional
00:59:52 - 00:59:56: we don't necessarily need it in every
00:59:54 - 00:59:58: e-commerce application
00:59:56 - 01:00:00: in fact we might need it in other types
00:59:58 - 01:00:03: of applications like your blog
01:00:00 - 01:00:05: or video platform and so on so tagging
01:00:03 - 01:00:06: is not specific to products or an
01:00:05 - 01:00:09: e-commerce application
01:00:06 - 01:00:11: it's a separate piece of functionality
01:00:09 - 01:00:12: so i'm going to move the tag entity to a
01:00:11 - 01:00:14: separate app called
01:00:12 - 01:00:15: tags and here we're going to have
01:00:14 - 01:00:18: another entity called
01:00:15 - 01:00:18: tagged item which represents an item
01:00:18 - 01:00:21: that is tagged
01:00:18 - 01:00:22: it can be a product an article a video
01:00:21 - 01:00:24: and so on it's an
01:00:22 - 01:00:25: abstract concept now with this
01:00:24 - 01:00:28: separation
01:00:25 - 01:00:30: each app is self-contained and provides
01:00:28 - 01:00:32: a specific piece of functionality
01:00:30 - 01:00:33: so we can use either or both of them in
01:00:32 - 01:00:35: a new project
01:00:33 - 01:00:37: depending on what we're going to build
01:00:35 - 01:00:38: plus we have zero coupling between these
01:00:37 - 01:00:39: apps
01:00:38 - 01:00:42: so we can independently change and
01:00:39 - 01:00:44: deploy them without affecting other apps
01:00:42 - 01:00:46: this is the proper way to break down
01:00:44 - 01:00:49: this project into multiple apps
01:00:46 - 01:00:50: so here's the takeaway if our app
01:00:49 - 01:00:52: boundary is so large
01:00:50 - 01:00:54: we'll end up with a monolith that gets
01:00:52 - 01:00:56: bloated and becomes hard to reuse
01:00:54 - 01:00:58: on the other hand if our app boundaries
01:00:56 - 01:01:00: are so small and fine grained
01:00:58 - 01:01:03: we'll end up with a lot of coupling
01:01:00 - 01:01:04: between them a good design is one with
01:01:03 - 01:01:06: minimal coupling
01:01:04 - 01:01:09: and high cohesion meaning high focus so
01:01:06 - 01:01:10: each app is focused on a specific piece
01:01:09 - 01:01:12: of functionality and
01:01:10 - 01:01:13: includes everything needed to fulfill
01:01:12 - 01:01:16: that piece of functionality
01:01:13 - 01:01:18: okay so back to vs code we're going to
01:01:16 - 01:01:21: create two new apps
01:01:18 - 01:01:24: so we run python manage.pi
01:01:21 - 01:01:28: start app the first app is store
01:01:24 - 01:01:31: and the second one is tags
01:01:28 - 01:01:32: okay now as i told you before every time
01:01:31 - 01:01:34: we create a new app
01:01:32 - 01:01:36: we should add it in the list of
01:01:34 - 01:01:38: installed apps so
01:01:36 - 01:01:40: let's close this window and go to our
01:01:38 - 01:01:42: settings module
01:01:40 - 01:01:43: here's the list of install apps i'm
01:01:42 - 01:01:47: going to add those apps
01:01:43 - 01:01:49: right here so store and tags
01:01:47 - 01:01:50: all right we're done with this step
01:01:49 - 01:01:52: starting from the next lesson we're
01:01:50 - 01:01:55: going to create the model classes for
01:01:52 - 01:01:55: these apps
01:01:55 - 01:01:58: hey guys bosh here i just wanted to let
01:01:57 - 01:01:59: you know that this tutorial you have
01:01:58 - 01:02:02: been watching is
01:01:59 - 01:02:03: actually the first hour of my ultimate
01:02:02 - 01:02:05: django course
01:02:03 - 01:02:07: the complete course is about 10 hours
01:02:05 - 01:02:09: and goes way beyond this tutorial
01:02:07 - 01:02:11: so if you're serious about learning
01:02:09 - 01:02:13: django and are looking for a job as a
01:02:11 - 01:02:14: back-end developer i highly encourage
01:02:13 - 01:02:16: you to enroll in the course
01:02:14 - 01:02:17: the course comes with tons of exercises
01:02:16 - 01:02:19: and solutions
01:02:17 - 01:02:21: a full e-commerce project that you will
01:02:19 - 01:02:23: eventually deploy to the cloud
01:02:21 - 01:02:25: plus a 30-day money-back guarantee and a
01:02:23 - 01:02:26: certificate of completion you can add
01:02:25 - 01:02:28: your resume
01:02:26 - 01:02:30: in case you're interested i'll put the
01:02:28 - 01:02:32: link down below so thank you for
01:02:30 - 01:02:35: watching and i hope to see you in the
01:02:32 - 01:02:37: course
01:02:35 - 01:02:37: you
