00:00:02 - 00:00:05: [Music]
00:00:07 - 00:00:11: in this video i'm gonna teach you python
00:00:09 - 00:00:13: by working through a project now this
00:00:11 - 00:00:15: project i'm gonna write completely from
00:00:13 - 00:00:16: scratch which means i don't have it up
00:00:15 - 00:00:18: on my other screen i've not ridden this
00:00:16 - 00:00:20: before it's a completely new project to
00:00:18 - 00:00:22: me now the point of this is not only am
00:00:20 - 00:00:24: i going to teach you basic python syntax
00:00:22 - 00:00:26: and some different language features i'm
00:00:24 - 00:00:28: also going to explain to you how you
00:00:26 - 00:00:30: structure a program how you've decide
00:00:28 - 00:00:31: where you're going to start what
00:00:30 - 00:00:33: different components you need to build
00:00:31 - 00:00:34: out and kind of how you go about the
00:00:33 - 00:00:36: different tasks this is going to be
00:00:34 - 00:00:38: perfect for people that have a little
00:00:36 - 00:00:40: bit of experience with python they've
00:00:38 - 00:00:42: written some code before but they're not
00:00:40 - 00:00:43: yet comfortable and confident to go and
00:00:42 - 00:00:45: write their own project where they don't
00:00:43 - 00:00:46: know where to start when they're kind of
00:00:45 - 00:00:47: diving into a task on their own
00:00:46 - 00:00:49: hopefully this is going to make you a
00:00:47 - 00:00:50: lot more confident you're going to learn
00:00:49 - 00:00:52: a bunch about python and you're going to
00:00:50 - 00:00:54: have a good project that you can show
00:00:52 - 00:00:56: after this video so i encourage you to
00:00:54 - 00:00:58: follow along type this project out with
00:00:56 - 00:01:01: me with that said let's dive in after a
00:00:58 - 00:01:03: quick word from our spots here before we
00:01:01 - 00:01:05: get started i need to thank octo ml for
00:01:03 - 00:01:07: sponsoring this video as we know
00:01:05 - 00:01:08: building and training the perfect deep
00:01:07 - 00:01:11: learning model for your application is
00:01:08 - 00:01:13: just the first step after that it's time
00:01:11 - 00:01:15: to push it to production now rather than
00:01:13 - 00:01:17: learning completely new tools for model
00:01:15 - 00:01:18: acceleration and containerization you
00:01:17 - 00:01:21: need a bridge that gets you from model
00:01:18 - 00:01:24: building and training to deployment as
00:01:21 - 00:01:27: fast as possible now that's where octoml
00:01:24 - 00:01:28: cli comes in using octo ml is very
00:01:27 - 00:01:30: similar to working with docker and
00:01:28 - 00:01:33: kubernetes you start with a trained
00:01:30 - 00:01:35: model and ingest it into octo ml next
00:01:33 - 00:01:37: octo ml packages the model into a docker
00:01:35 - 00:01:39: container with nvidia's trident
00:01:37 - 00:01:41: inference server which you can deploy to
00:01:39 - 00:01:44: your local docker desktop any cloud
00:01:41 - 00:01:47: kubernetes service like amazon eks azure
00:01:44 - 00:01:49: aks or even managed ml services like
00:01:47 - 00:01:51: amazon sage maker when you're ready you
00:01:49 - 00:01:54: can then use octo ml to accelerate your
00:01:51 - 00:01:56: model peak performance on your cpu or
00:01:54 - 00:01:58: gpu hardware target get started today by
00:01:56 - 00:02:01: clicking the link in the description and
00:01:58 - 00:02:03: downloading the octo ml cli for free
00:02:01 - 00:02:05: make sure to be one of the first 20 tech
00:02:03 - 00:02:08: with tim subscribers to try octo ml to
00:02:05 - 00:02:09: receive a special welcome gift so you're
00:02:08 - 00:02:11: probably wondering now what kind of
00:02:09 - 00:02:12: project are we going to work on now i
00:02:11 - 00:02:14: wanted to pick something that was unique
00:02:12 - 00:02:16: and that i haven't done before so we're
00:02:14 - 00:02:18: actually going to build a text based
00:02:16 - 00:02:19: slot machine now the way this will work
00:02:18 - 00:02:20: is the user will deposit a certain
00:02:19 - 00:02:23: amount of money we're then going to
00:02:20 - 00:02:25: allow them to bet on either one two or
00:02:23 - 00:02:26: three lines of the slot machine just to
00:02:25 - 00:02:28: keep it pretty simple i know in real
00:02:26 - 00:02:30: slot machines they have a lot more lines
00:02:28 - 00:02:32: than that and then we are going to
00:02:30 - 00:02:33: determine if they want so if they got
00:02:32 - 00:02:36: any lines we're gonna multiply their bet
00:02:33 - 00:02:37: by the value of the line add that to
00:02:36 - 00:02:39: their balance and then allow them to
00:02:37 - 00:02:41: keep playing until they want to cash out
00:02:39 - 00:02:43: or until they run out of money so this
00:02:41 - 00:02:45: is actually a fairly complex project
00:02:43 - 00:02:47: because we need to do a lot of things we
00:02:45 - 00:02:49: need to collect the user's deposit we
00:02:47 - 00:02:51: need to add that to their balance we
00:02:49 - 00:02:54: need to allow them to bet on a line or
00:02:51 - 00:02:56: on multiple lines we then need to see if
00:02:54 - 00:02:58: they actually got any of those lines we
00:02:56 - 00:02:59: then need to spin the slot machine or we
00:02:58 - 00:03:01: would have done that before right we
00:02:59 - 00:03:02: need to generate the different items
00:03:01 - 00:03:04: that are going to be in the slot machine
00:03:02 - 00:03:05: on the different reels
00:03:04 - 00:03:07: and then we need to add whatever they
00:03:05 - 00:03:09: want back to their balance so there's
00:03:07 - 00:03:10: quite a bit of stuff going on here and
00:03:09 - 00:03:12: this should be a challenging enough
00:03:10 - 00:03:14: project to make it interesting for you
00:03:12 - 00:03:15: guys so before we even get into this i
00:03:14 - 00:03:17: just want to mention i obviously am not
00:03:15 - 00:03:18: supporting gambling here this is just
00:03:17 - 00:03:20: kind of a cool thing that we can do
00:03:18 - 00:03:22: we're not using any real money and i
00:03:20 - 00:03:23: think it's a good project so just keep
00:03:22 - 00:03:26: that in mind do not gamble i'm not
00:03:23 - 00:03:27: supporting that by making this video and
00:03:26 - 00:03:29: before i write any code what i like to
00:03:27 - 00:03:30: do here is just think of the different
00:03:29 - 00:03:33: things that we need to do in this
00:03:30 - 00:03:34: project and kind of pick a good starting
00:03:33 - 00:03:37: point the place where i like to start
00:03:34 - 00:03:38: usually is collecting some user input
00:03:37 - 00:03:40: and for this project we need to get the
00:03:38 - 00:03:42: deposit that the user is entering as
00:03:40 - 00:03:44: well as their bet right those are kind
00:03:42 - 00:03:46: of the two things we need before we can
00:03:44 - 00:03:48: start actually using the slot machine
00:03:46 - 00:03:51: and generating you know whatever the
00:03:48 - 00:03:53: slot machine spun so to do this i'm
00:03:51 - 00:03:54: going to make a function here called
00:03:53 - 00:03:55: deposit
00:03:54 - 00:03:57: now i'm just inside of visual studio
00:03:55 - 00:03:59: code you can work in any any editor you
00:03:57 - 00:04:01: want sorry and i have this main.pie
00:03:59 - 00:04:03: function open i assume you guys can open
00:04:01 - 00:04:04: your own python file and kind of work in
00:04:03 - 00:04:06: your
00:04:04 - 00:04:08: preferred environment so this function
00:04:06 - 00:04:10: here is going to be responsible for
00:04:08 - 00:04:12: collecting user input that gets the
00:04:10 - 00:04:13: deposit from the user now a function if
00:04:12 - 00:04:15: you're unfamiliar is just something that
00:04:13 - 00:04:17: we can call that's going to execute a
00:04:15 - 00:04:18: certain block of code and then can
00:04:17 - 00:04:20: potentially return us a value and you'll
00:04:18 - 00:04:22: see how this works in a second so what
00:04:20 - 00:04:23: i'm going to do here set up a while loop
00:04:22 - 00:04:25: and the reason i need a while loop is
00:04:23 - 00:04:27: because i'm going to continually ask the
00:04:25 - 00:04:29: user to enter a deposit amount until
00:04:27 - 00:04:30: they give me a valid amount so if they
00:04:29 - 00:04:32: don't give me a valid amount then they
00:04:30 - 00:04:34: need to keep typing in until eventually
00:04:32 - 00:04:37: we get one so to do this i'm going to
00:04:34 - 00:04:38: say my amount is equal to input
00:04:37 - 00:04:40: and then inside of input i'm going to
00:04:38 - 00:04:42: pass a prompt which is some text that
00:04:40 - 00:04:46: will happen before we allow the user to
00:04:42 - 00:04:49: start typing so for the prompt i can say
00:04:46 - 00:04:51: what would you like to
00:04:49 - 00:04:52: deposit question mark
00:04:51 - 00:04:54: and then i can put something like a
00:04:52 - 00:04:56: dollar sign and then allow them to start
00:04:54 - 00:04:57: typing after the dollar sign
00:04:56 - 00:04:58: okay
00:04:57 - 00:05:01: now what i need to do
00:04:58 - 00:05:02: is check if this amount is actually a
00:05:01 - 00:05:04: number because they could type in
00:05:02 - 00:05:05: anything here right they could type in
00:05:04 - 00:05:06: hello world
00:05:05 - 00:05:08: they could type in nothing and just hit
00:05:06 - 00:05:09: enter they can do whatever they want so
00:05:08 - 00:05:11: i need to make sure that the amount
00:05:09 - 00:05:14: actually is a number before i get out of
00:05:11 - 00:05:16: this while loop so i'm going to say if
00:05:14 - 00:05:18: the amount
00:05:16 - 00:05:20: dot is and then
00:05:18 - 00:05:22: digit like this then we can do something
00:05:20 - 00:05:24: inside of here now is digit is just
00:05:22 - 00:05:26: going to tell us if this is a valid
00:05:24 - 00:05:29: whole number so if it's something like a
00:05:26 - 00:05:30: thousand you know 10 whatever if they
00:05:29 - 00:05:32: type in a negative number it actually
00:05:30 - 00:05:34: won't be true so if they do something
00:05:32 - 00:05:36: like negative 9 then it's not going to
00:05:34 - 00:05:38: be true and we call is digit
00:05:36 - 00:05:40: anyways this is a method you can use on
00:05:38 - 00:05:42: strings to determine if this is a valid
00:05:40 - 00:05:43: number so if this is a digit then what
00:05:42 - 00:05:45: i'm going to do is i'm going to convert
00:05:43 - 00:05:48: this into
00:05:45 - 00:05:49: an init so i'm going to say amount is
00:05:48 - 00:05:52: equal to int amount and that's because
00:05:49 - 00:05:54: by default this comes as a string and we
00:05:52 - 00:05:56: want to have a numeric value for our
00:05:54 - 00:05:58: balance or for our deposit so we need to
00:05:56 - 00:06:00: convert this to an it
00:05:58 - 00:06:02: however i can't do this before i make
00:06:00 - 00:06:03: this check because if i do that then
00:06:02 - 00:06:05: this could potentially fail because if
00:06:03 - 00:06:08: they try to type in something like hello
00:06:05 - 00:06:10: world then this here is invalid i can't
00:06:08 - 00:06:11: convert hello world into an integer so
00:06:10 - 00:06:14: that's why i'm first checking if they
00:06:11 - 00:06:16: did actually enter a valid number if
00:06:14 - 00:06:17: they did i then convert it to a number
00:06:16 - 00:06:19: now what i need to do is check if this
00:06:17 - 00:06:20: number is greater than zero so i'm going
00:06:19 - 00:06:23: to say if
00:06:20 - 00:06:25: the amount is greater than not equal to
00:06:23 - 00:06:27: but is greater than zero then i'm going
00:06:25 - 00:06:28: to break out of this wall
00:06:27 - 00:06:30: if it's not greater than zero then i'm
00:06:28 - 00:06:32: going to put an l statement here and i'm
00:06:30 - 00:06:36: going to say print
00:06:32 - 00:06:39: amount must be
00:06:36 - 00:06:40: greater than zero dot okay there we go
00:06:39 - 00:06:42: now i'm just gonna add one more else
00:06:40 - 00:06:44: statement down here and i'm gonna say
00:06:42 - 00:06:45: print
00:06:44 - 00:06:47: uh
00:06:45 - 00:06:49: please if we could type this correctly
00:06:47 - 00:06:51: enter a number
00:06:49 - 00:06:53: okay then finally here
00:06:51 - 00:06:55: we are going to return
00:06:53 - 00:06:56: our amount
00:06:55 - 00:06:57: all right so let me go through what we
00:06:56 - 00:06:59: just did here so we wrote a function
00:06:57 - 00:07:01: deposit this is a while loop so we're
00:06:59 - 00:07:03: going to continue to do this until
00:07:01 - 00:07:04: eventually we break out and this break
00:07:03 - 00:07:06: keyword just ends the while loop and
00:07:04 - 00:07:07: then we'll bring us down to this line
00:07:06 - 00:07:10: i ask what is the amount you want to
00:07:07 - 00:07:12: deposit they enter something if this is
00:07:10 - 00:07:14: a digit then i'm going to convert this
00:07:12 - 00:07:16: to an integer and i'm going to check if
00:07:14 - 00:07:18: this is greater than zero if it is it's
00:07:16 - 00:07:19: a valid amount we can work with this
00:07:18 - 00:07:21: we'll break out and then we'll return
00:07:19 - 00:07:23: that amount and we can use that later on
00:07:21 - 00:07:25: okay otherwise i'm going to print this
00:07:23 - 00:07:26: amount must be greater than zero because
00:07:25 - 00:07:28: if it's not greater than zero well we
00:07:26 - 00:07:29: need to tell them that then get them to
00:07:28 - 00:07:32: try again all right so that handled this
00:07:29 - 00:07:33: first if statement now if the amount is
00:07:32 - 00:07:36: not a digit then what we're going to do
00:07:33 - 00:07:37: is uh print sorry please enter a number
00:07:36 - 00:07:39: and we're going to continue this until
00:07:37 - 00:07:41: we get a number and until we break all
00:07:39 - 00:07:42: right so that's that function now to
00:07:41 - 00:07:45: call the function
00:07:42 - 00:07:47: if we spell uh deposit correctly here i
00:07:45 - 00:07:49: don't even know how i messed that up so
00:07:47 - 00:07:50: badly okay deposit uh to call the
00:07:49 - 00:07:52: function we simply write the name of the
00:07:50 - 00:07:54: function and we put our two parentheses
00:07:52 - 00:07:56: and now as soon as i run my code this
00:07:54 - 00:07:58: function will run and we'll be able to
00:07:56 - 00:07:59: actually enter a number so let's do this
00:07:58 - 00:08:01: you can see in my terminal that it's
00:07:59 - 00:08:03: asking me what would you like to deposit
00:08:01 - 00:08:05: let's go with something like ten dollars
00:08:03 - 00:08:07: and all is good now if i run this again
00:08:05 - 00:08:09: and i enter something like hello world
00:08:07 - 00:08:12: it tells me please enter a number okay
00:08:09 - 00:08:14: let's enter zero all right amount must
00:08:12 - 00:08:15: be greater than zero enter one i'm good
00:08:14 - 00:08:17: to go so there we go we've written our
00:08:15 - 00:08:19: first deposit function and i've tested
00:08:17 - 00:08:20: it it's working good we're all good to
00:08:19 - 00:08:21: go
00:08:20 - 00:08:23: all right so now what i'm going to do is
00:08:21 - 00:08:25: i'm going to say my amount
00:08:23 - 00:08:27: is equal to my deposit and actually
00:08:25 - 00:08:29: we're going to call this
00:08:27 - 00:08:30: balance and this is kind of the start of
00:08:29 - 00:08:33: our program here and in fact i'm going
00:08:30 - 00:08:35: to put our program in this function main
00:08:33 - 00:08:37: so that if we end our program we can
00:08:35 - 00:08:38: just call this function again and then
00:08:37 - 00:08:40: it will rerun the program right so i can
00:08:38 - 00:08:41: say do you want to play again and then
00:08:40 - 00:08:44: we can rerun the main function and we'll
00:08:41 - 00:08:46: be good to go so we've done that now i
00:08:44 - 00:08:47: need to call the main function so that
00:08:46 - 00:08:49: we start running main and then it's
00:08:47 - 00:08:51: going to do everything inside of here
00:08:49 - 00:08:53: okay so now inside of made the next
00:08:51 - 00:08:55: thing that i want to do is i want to
00:08:53 - 00:08:57: collect the bet from the user so there's
00:08:55 - 00:08:58: actually a few ways i can do this but i
00:08:57 - 00:09:01: need to determine how much they want to
00:08:58 - 00:09:03: bet and then how many lines they want to
00:09:01 - 00:09:05: bet on and then i would multiply their
00:09:03 - 00:09:06: bet amount by the number of lines so it
00:09:05 - 00:09:08: probably makes sense to ask the number
00:09:06 - 00:09:10: of lines first and then ask them how
00:09:08 - 00:09:12: much they want to bet on each line so
00:09:10 - 00:09:13: it's not confusing if i say how much do
00:09:12 - 00:09:15: you want to bet they put ten dollars and
00:09:13 - 00:09:17: then they say three lines and ends up
00:09:15 - 00:09:19: being thirty dollars see what i mean so
00:09:17 - 00:09:20: let's say define and we'll say get
00:09:19 - 00:09:23: number
00:09:20 - 00:09:25: of lines like this
00:09:23 - 00:09:27: and inside of here we're going to ask
00:09:25 - 00:09:29: them to pick a number between 1 and 3
00:09:27 - 00:09:30: because that'll be the number of lines
00:09:29 - 00:09:31: that we have
00:09:30 - 00:09:33: and to keep this program nice and
00:09:31 - 00:09:35: dynamic i'm going to add what's known as
00:09:33 - 00:09:38: a global constant at the top of my
00:09:35 - 00:09:40: program and i'm going to say max
00:09:38 - 00:09:42: underscore lines is equal to 3.
00:09:40 - 00:09:44: now i'm doing this in all capitals
00:09:42 - 00:09:46: because this is a constant value
00:09:44 - 00:09:47: something that's not going to change and
00:09:46 - 00:09:49: this is a convention in python you do it
00:09:47 - 00:09:50: in all capitals and i'm making it equal
00:09:49 - 00:09:51: to three
00:09:50 - 00:09:53: okay so now anywhere in my program where
00:09:51 - 00:09:55: i'm referencing the number of maximum
00:09:53 - 00:09:56: lines in my slot machine rather than
00:09:55 - 00:09:58: writing three i'll just write this and
00:09:56 - 00:09:59: then later on i can easily change this
00:09:58 - 00:10:01: to be five and the whole program will
00:09:59 - 00:10:03: update based on that right so let's make
00:10:01 - 00:10:04: this three for now okay so get number of
00:10:03 - 00:10:05: lines
00:10:04 - 00:10:07: obviously the minimum lines will be one
00:10:05 - 00:10:09: we don't need to write that in okay so
00:10:07 - 00:10:10: we need to ask them to enter this so we
00:10:09 - 00:10:12: can actually just copy everything we
00:10:10 - 00:10:14: have in the deposit function
00:10:12 - 00:10:15: and just change a few values here so
00:10:14 - 00:10:17: we're going to say while true rather
00:10:15 - 00:10:19: than amount we're going to say lines and
00:10:17 - 00:10:20: we'll say
00:10:19 - 00:10:22: enter
00:10:20 - 00:10:23: the number
00:10:22 - 00:10:27: of
00:10:23 - 00:10:29: lines to bet on okay and then i want to
00:10:27 - 00:10:30: put inside of here kind of the option so
00:10:29 - 00:10:33: like one to three so i'm going to write
00:10:30 - 00:10:35: 1 dash and then i'm actually going to do
00:10:33 - 00:10:38: a concatenation here plus and then i'm
00:10:35 - 00:10:41: going to convert my number of lines or
00:10:38 - 00:10:43: my max number of lines to a string and
00:10:41 - 00:10:45: then i'm going to say plus and then i'm
00:10:43 - 00:10:47: going to put a ending bracket here
00:10:45 - 00:10:48: question mark and then a space
00:10:47 - 00:10:50: okay i know seems a little bit confusing
00:10:48 - 00:10:53: but what i've just done here is i have
00:10:50 - 00:10:54: now added max lines inside of this
00:10:53 - 00:10:55: string there's a few other ways to do
00:10:54 - 00:10:57: this but this is the most basic so
00:10:55 - 00:10:59: that's how i'm doing it and i need to
00:10:57 - 00:11:00: convert this to a string because if i
00:10:59 - 00:11:02: add two strings together they get
00:11:00 - 00:11:03: squished together but if this was a
00:11:02 - 00:11:05: number and i tried to add it to the
00:11:03 - 00:11:06: string then this would cause an
00:11:05 - 00:11:09: exception in my program so enter the
00:11:06 - 00:11:10: number of lines to bet on one dash and
00:11:09 - 00:11:12: then i'm going to put in whatever the
00:11:10 - 00:11:14: string version is of the maximum number
00:11:12 - 00:11:16: of lines end my bracket put a question
00:11:14 - 00:11:18: mark and then i'm putting a space so
00:11:16 - 00:11:20: that when they start typing they're not
00:11:18 - 00:11:22: like connected to the question mark
00:11:20 - 00:11:24: they're off by one space and it looks
00:11:22 - 00:11:26: easier for them to read right
00:11:24 - 00:11:27: okay so now same thing i need to make
00:11:26 - 00:11:29: sure that they actually did enter a
00:11:27 - 00:11:31: number so i'm going to say if lines dot
00:11:29 - 00:11:34: is digit then i'm going to say that my
00:11:31 - 00:11:36: lines is equal to int
00:11:34 - 00:11:38: lines like this and i'm going to check
00:11:36 - 00:11:41: now if the lines is within the bound
00:11:38 - 00:11:43: that i had so within 1 and 3. so the way
00:11:41 - 00:11:45: to do this is i'm going to say if and
00:11:43 - 00:11:47: i'm actually going to say 0
00:11:45 - 00:11:49: actually we'll say 1 less than or equal
00:11:47 - 00:11:52: to lines
00:11:49 - 00:11:55: less than or equal to and then this will
00:11:52 - 00:11:56: be the max lines
00:11:55 - 00:11:57: all right so this is something you can
00:11:56 - 00:11:59: do in python you may not have seen
00:11:57 - 00:12:00: before if i want to check if a value is
00:11:59 - 00:12:02: in between two values i can write it
00:12:00 - 00:12:04: like this so what i'm saying here is if
00:12:02 - 00:12:06: my lines is greater than or equal to one
00:12:04 - 00:12:08: and is less than or equal to the maximum
00:12:06 - 00:12:10: lines then i'm okay i can break
00:12:08 - 00:12:11: otherwise i need to tell them to enter a
00:12:10 - 00:12:12: valid number of lines so i'm going to
00:12:11 - 00:12:15: say enter
00:12:12 - 00:12:17: a valid number of lines okay otherwise
00:12:15 - 00:12:19: same thing we'll say enter a number and
00:12:17 - 00:12:21: then rather than returning the amount
00:12:19 - 00:12:22: we'll return the lines okay perfect so
00:12:21 - 00:12:24: now we have a function that gets the
00:12:22 - 00:12:26: deposit amount and the number of lines
00:12:24 - 00:12:28: so now in our main function we'll say
00:12:26 - 00:12:30: lines is equal to get number of lines
00:12:28 - 00:12:31: like that and now what we can do is
00:12:30 - 00:12:32: print out
00:12:31 - 00:12:34: the balance
00:12:32 - 00:12:36: and the lines just so we can see what
00:12:34 - 00:12:38: this is when we run the program
00:12:36 - 00:12:40: okay so now let's go here let's run and
00:12:38 - 00:12:41: how much would you like to deposit let's
00:12:40 - 00:12:44: go with a hundred dollars okay enter the
00:12:41 - 00:12:46: number of lines let's try four okay it
00:12:44 - 00:12:49: doesn't work let's try zero doesn't work
00:12:46 - 00:12:51: let's try h e doesn't work let's try two
00:12:49 - 00:12:53: valid and notice i now have a balance of
00:12:51 - 00:12:54: 100 and the number of lines is 2. the
00:12:53 - 00:12:56: next thing i need to get for my user
00:12:54 - 00:12:59: input is the amount that i want to bet
00:12:56 - 00:13:01: on each line so let's do this
00:12:59 - 00:13:03: and we'll have a maximum bet as well so
00:13:01 - 00:13:04: we'll say max bet
00:13:03 - 00:13:05: is equal to let's go with something like
00:13:04 - 00:13:07: 100
00:13:05 - 00:13:09: and let's say the minimum bet
00:13:07 - 00:13:10: is equal to one dollar and again we're
00:13:09 - 00:13:11: putting these as constants so that we
00:13:10 - 00:13:13: can use them kind of anywhere in our
00:13:11 - 00:13:15: program so now let's just write this
00:13:13 - 00:13:17: function from scratch
00:13:15 - 00:13:19: and say define get bet so we can add our
00:13:17 - 00:13:21: colon and continue and forget bet we'll
00:13:19 - 00:13:22: just ask them how much they want to bet
00:13:21 - 00:13:24: uh and honestly actually now that i
00:13:22 - 00:13:25: think of it let's just copy the same
00:13:24 - 00:13:27: thing from deposit i don't like
00:13:25 - 00:13:28: repeating all of this code but they are
00:13:27 - 00:13:30: slightly different so it's fine to do
00:13:28 - 00:13:31: something like this so for the amount we
00:13:30 - 00:13:32: can actually use the same value and
00:13:31 - 00:13:34: rather than what would you like to
00:13:32 - 00:13:36: deposit we'll say what would you like to
00:13:34 - 00:13:38: bet question mark again we're going to
00:13:36 - 00:13:40: check if the amount is a digit we're
00:13:38 - 00:13:41: going to convert this now to an integer
00:13:40 - 00:13:43: and now we need to check if the amount
00:13:41 - 00:13:46: is between the minimum and the maximum
00:13:43 - 00:13:48: bet so i'm going to say the min bet less
00:13:46 - 00:13:50: than or equal to the amount less than or
00:13:48 - 00:13:51: equal to the max bet
00:13:50 - 00:13:52: okay
00:13:51 - 00:13:54: and then break
00:13:52 - 00:13:58: and here i'm going to say the amount not
00:13:54 - 00:13:59: must be greater than zero amount must be
00:13:58 - 00:14:02: between and now i'm going to show you a
00:13:59 - 00:14:04: second way that we can actually
00:14:02 - 00:14:05: kind of put variables in our string so
00:14:04 - 00:14:08: i'm going to use an f string here only
00:14:05 - 00:14:10: available in python 3.6 and above i'm
00:14:08 - 00:14:11: going to say amount must be between i'm
00:14:10 - 00:14:14: going to put
00:14:11 - 00:14:16: my sorry squiggly brackets like this and
00:14:14 - 00:14:18: i'm going to say min bet
00:14:16 - 00:14:20: and then max bet so this is actually a
00:14:18 - 00:14:24: very easy way to
00:14:20 - 00:14:26: embed values inside of your strings you
00:14:24 - 00:14:28: put f before the string and then you put
00:14:26 - 00:14:30: your curly braces like this and inside
00:14:28 - 00:14:32: of the curly braces you can write any
00:14:30 - 00:14:34: variable and it will automatically be
00:14:32 - 00:14:36: converted to a string for you if it can
00:14:34 - 00:14:38: be converted so in this case i don't
00:14:36 - 00:14:40: need to convert min bet to a string or
00:14:38 - 00:14:42: max bet it's automatically going to get
00:14:40 - 00:14:43: converted by python and i've just put my
00:14:42 - 00:14:44: dollar signs here to make it look a
00:14:43 - 00:14:46: little bit better when i say you know
00:14:44 - 00:14:48: between the mid and the maximum bet
00:14:46 - 00:14:49: okay uh otherwise please enter a number
00:14:48 - 00:14:51: that's fine and then return amount okay
00:14:49 - 00:14:53: perfect so now
00:14:51 - 00:14:56: i'm going to say bet is equal to
00:14:53 - 00:14:57: and then this is going to be
00:14:56 - 00:14:59: the
00:14:57 - 00:15:00: get underscore effect
00:14:59 - 00:15:01: all right
00:15:00 - 00:15:03: uh now we should actually make this a
00:15:01 - 00:15:05: bit more clear what would you like to
00:15:03 - 00:15:07: bet on each line
00:15:05 - 00:15:10: okay so now that we've done this and
00:15:07 - 00:15:12: we've gotten the deposit gone the number
00:15:10 - 00:15:14: of lines and gotten the bet we probably
00:15:12 - 00:15:16: want to print out here in our main
00:15:14 - 00:15:17: function kind of what they've said so
00:15:16 - 00:15:19: far right
00:15:17 - 00:15:21: so we'll say you are betting
00:15:19 - 00:15:24: you know five dollars on three lines
00:15:21 - 00:15:27: your total bet is 15 something like that
00:15:24 - 00:15:29: right so we're going to say print
00:15:27 - 00:15:30: you are betting and let's do an f string
00:15:29 - 00:15:32: here as well
00:15:30 - 00:15:34: and then let's do a dollar sign and
00:15:32 - 00:15:35: we're going to say whatever the bet is
00:15:34 - 00:15:38: we're going to say you are betting
00:15:35 - 00:15:41: whatever the bet amount is on
00:15:38 - 00:15:43: and then this is going to be
00:15:41 - 00:15:46: lines like this and then we'll write
00:15:43 - 00:15:48: lines and we'll say total bet
00:15:46 - 00:15:49: is
00:15:48 - 00:15:50: equal
00:15:49 - 00:15:52: to
00:15:50 - 00:15:53: and then we'll put a dollar sign and
00:15:52 - 00:15:55: we're going to put inside of here a
00:15:53 - 00:15:57: variable i'm going to say total bet is
00:15:55 - 00:15:58: equal to bet multiplied by the lines
00:15:57 - 00:16:01: okay
00:15:58 - 00:16:03: and we'll say this is the total bet
00:16:01 - 00:16:04: all right so let's run this now and
00:16:03 - 00:16:06: let's see what we get we no longer need
00:16:04 - 00:16:07: to print out the balance in the lines by
00:16:06 - 00:16:09: the way
00:16:07 - 00:16:10: all right so let's
00:16:09 - 00:16:11: run this
00:16:10 - 00:16:13: how much would you like to deposit let's
00:16:11 - 00:16:15: say a hundred dollars enter the number
00:16:13 - 00:16:16: of lines to bet on let's go with two
00:16:15 - 00:16:18: would you like to bet how much would you
00:16:16 - 00:16:19: like to bet on each line or what would
00:16:18 - 00:16:20: you like to bet on each line let's go
00:16:19 - 00:16:23: with ten dollars
00:16:20 - 00:16:24: and now it says our total bet is 20
00:16:23 - 00:16:26: great so this is okay but i just
00:16:24 - 00:16:27: realized that we actually need to check
00:16:26 - 00:16:29: if the amount that they're betting is
00:16:27 - 00:16:30: within their balance
00:16:29 - 00:16:32: because they can't bet more than
00:16:30 - 00:16:34: whatever their current balance is
00:16:32 - 00:16:36: so we need to check that and we could
00:16:34 - 00:16:38: check this in a few different places
00:16:36 - 00:16:40: but since i've called this get bet i'm
00:16:38 - 00:16:41: not going to put it inside of here i'm
00:16:40 - 00:16:44: just going to do the check here and then
00:16:41 - 00:16:46: i'm going to recall get bet if they
00:16:44 - 00:16:47: entered an invalid bat
00:16:46 - 00:16:48: so i'm actually going to put now this
00:16:47 - 00:16:51: inside of a wallet but i'm going to say
00:16:48 - 00:16:52: well true i'm going to say bet is equal
00:16:51 - 00:16:54: to get bat
00:16:52 - 00:16:58: and i'm going to then say total bet like
00:16:54 - 00:16:58: this inside of here so we put total bit
00:16:58 - 00:17:00: okay
00:16:58 - 00:17:04: now i'm going to say
00:17:00 - 00:17:08: if my total bet is greater than my
00:17:04 - 00:17:08: balance then we'll say print
00:17:08 - 00:17:14: you
00:17:10 - 00:17:16: do not have enough
00:17:14 - 00:17:17: to bet
00:17:16 - 00:17:18: that amount
00:17:17 - 00:17:20: and then we'll say what their current
00:17:18 - 00:17:21: balance is your
00:17:20 - 00:17:24: current
00:17:21 - 00:17:25: balance is and then we'll put dollar
00:17:24 - 00:17:27: sign
00:17:25 - 00:17:29: we're going to put our f string here and
00:17:27 - 00:17:32: this is going to be
00:17:29 - 00:17:33: their balance all right and then
00:17:32 - 00:17:36: otherwise
00:17:33 - 00:17:38: we will simply break out okay so
00:17:36 - 00:17:40: hopefully that makes sense i also could
00:17:38 - 00:17:42: just put a condition here for the wallop
00:17:40 - 00:17:44: but i think this is okay for right now
00:17:42 - 00:17:46: all right so let's try this now
00:17:44 - 00:17:48: let's run our code how much would you
00:17:46 - 00:17:50: like to deposit okay a hundred dollars
00:17:48 - 00:17:52: uh let's bet on three lines let's try to
00:17:50 - 00:17:53: bet forty dollars and says you do not
00:17:52 - 00:17:55: have enough to bet that amount your
00:17:53 - 00:17:56: current balance is a hundred dollars
00:17:55 - 00:17:58: okay uh how much you like to bet on each
00:17:56 - 00:18:00: line let's go with twenty dollars you're
00:17:58 - 00:18:02: betting twenty dollars on three lines
00:18:00 - 00:18:04: the bet is equal to sixty dollars okay
00:18:02 - 00:18:07: so we have now successfully got the
00:18:04 - 00:18:08: number of lines the betting amount b
00:18:07 - 00:18:10: deposited about
00:18:08 - 00:18:12: now what we need to do is we need to
00:18:10 - 00:18:13: actually run the slot machine now this
00:18:12 - 00:18:15: is where it gets a little bit more
00:18:13 - 00:18:17: complicated and i'm going to start
00:18:15 - 00:18:19: importing some modules so the first
00:18:17 - 00:18:22: module i'm going to import is the random
00:18:19 - 00:18:24: module because we need to generate um
00:18:22 - 00:18:25: the slot machine values kind of randomly
00:18:24 - 00:18:26: right
00:18:25 - 00:18:28: so how are we going to do this well the
00:18:26 - 00:18:30: first thing we need to figure out
00:18:28 - 00:18:33: is how many items we want to have in
00:18:30 - 00:18:34: each reel and how long we want the lines
00:18:33 - 00:18:36: to be
00:18:34 - 00:18:38: now slot machines can get a bit
00:18:36 - 00:18:40: complicated in terms of how the lines
00:18:38 - 00:18:41: work i'm going to keep this really
00:18:40 - 00:18:43: simple and we're gonna imagine that we
00:18:41 - 00:18:45: have a three by three slot machine and
00:18:43 - 00:18:47: that you only get a line if you get
00:18:45 - 00:18:48: three in a row okay
00:18:47 - 00:18:50: if you had three in a row then you win
00:18:48 - 00:18:51: this might not be the most balanced slot
00:18:50 - 00:18:54: machine it might not be one you want to
00:18:51 - 00:18:56: play on but for this project is fine so
00:18:54 - 00:18:58: again i'm going to set some values here
00:18:56 - 00:19:00: that specify the number of rows and
00:18:58 - 00:19:01: columns we're going to have in our slot
00:19:00 - 00:19:04: machine
00:19:01 - 00:19:06: so i'm going to say rows is equal to 3
00:19:04 - 00:19:08: and calls is equal to 3 and if we wanted
00:19:06 - 00:19:10: to make this a little bit better we
00:19:08 - 00:19:11: could say i guess
00:19:10 - 00:19:13: actually you know what row and call is
00:19:11 - 00:19:15: fine for right now i don't know exactly
00:19:13 - 00:19:16: what they would call uh like i guess
00:19:15 - 00:19:18: it'd be like real count and number of
00:19:16 - 00:19:20: reels or something like that for now
00:19:18 - 00:19:23: though this is fine
00:19:20 - 00:19:25: all right now what we need to specify is
00:19:23 - 00:19:28: how many symbols are in each of our
00:19:25 - 00:19:29: reals now it should be the same at least
00:19:28 - 00:19:31: from what i know it should be the same
00:19:29 - 00:19:32: number of symbols in every single real
00:19:31 - 00:19:34: we're not doing anything really
00:19:32 - 00:19:36: complicated when i say real i'm talking
00:19:34 - 00:19:38: about kind of one column right so how
00:19:36 - 00:19:39: many symbols are in that column because
00:19:38 - 00:19:41: we're going to have to randomly select
00:19:39 - 00:19:44: out of those symbols and then we need
00:19:41 - 00:19:45: values for our different symbols so we
00:19:44 - 00:19:47: need to pick kind of first of all how
00:19:45 - 00:19:49: many symbols do we want to have in total
00:19:47 - 00:19:51: and what do we want those symbols to be
00:19:49 - 00:19:54: now to keep this easy we can do
00:19:51 - 00:19:56: something just like you know a b c d
00:19:54 - 00:19:57: like those are probably fine as the
00:19:56 - 00:19:59: symbols um
00:19:57 - 00:20:00: yeah we can do something like that so
00:19:59 - 00:20:02: let's say
00:20:00 - 00:20:03: symbol
00:20:02 - 00:20:06: underscore count
00:20:03 - 00:20:08: is equal to and let's make a dictionary
00:20:06 - 00:20:10: here now for our dictionary i'm going to
00:20:08 - 00:20:12: have the symbol be a string and i'm
00:20:10 - 00:20:13: going to have the count of this symbol
00:20:12 - 00:20:15: in each reel so i guess what we can have
00:20:13 - 00:20:17: is characters that are like at the
00:20:15 - 00:20:19: beginning of the alphabet like a be the
00:20:17 - 00:20:21: most valuable so maybe we only have i
00:20:19 - 00:20:22: don't know something like two a's in
00:20:21 - 00:20:24: every single reel
00:20:22 - 00:20:26: and then for b's we could have something
00:20:24 - 00:20:29: like four of those
00:20:26 - 00:20:31: for c's we could have six
00:20:29 - 00:20:33: and for d's we could have eight
00:20:31 - 00:20:34: now again i don't think this is going to
00:20:33 - 00:20:35: be very balanced slot machine i'm not
00:20:34 - 00:20:37: going for the best odds here i'm just
00:20:35 - 00:20:39: trying to kind of make something work so
00:20:37 - 00:20:41: let's see if this actually works for us
00:20:39 - 00:20:44: if every single reel we have two a's
00:20:41 - 00:20:47: four b's six c's and um what do you call
00:20:44 - 00:20:48: it eight ds to choose from now the thing
00:20:47 - 00:20:50: that i think is going to happen here is
00:20:48 - 00:20:52: we're going to get a lot of situations
00:20:50 - 00:20:53: where it's just d's that are being in
00:20:52 - 00:20:56: the reels but
00:20:53 - 00:20:57: let's see if this works at all in terms
00:20:56 - 00:20:59: of randomly selecting okay so that's
00:20:57 - 00:21:01: what we've done here now what we need is
00:20:59 - 00:21:03: something that's essentially going to
00:21:01 - 00:21:06: generate what the outcome of the slot
00:21:03 - 00:21:08: machine was using these values here
00:21:06 - 00:21:11: so to do this i'm going to say define
00:21:08 - 00:21:15: and we'll say get underscore
00:21:11 - 00:21:17: slot machine underscore spin okay
00:21:15 - 00:21:19: and inside of here what we're going to
00:21:17 - 00:21:20: take is we're going to take the rows
00:21:19 - 00:21:22: calls
00:21:20 - 00:21:24: and symbols
00:21:22 - 00:21:26: and this will be the symbols that we
00:21:24 - 00:21:27: pass so these are three parameters that
00:21:26 - 00:21:29: we're going to pass to this function and
00:21:27 - 00:21:31: then inside of here we can use these
00:21:29 - 00:21:33: parameters so inside of this function
00:21:31 - 00:21:35: again what we need to do is generate
00:21:33 - 00:21:36: what symbols are going to be in each
00:21:35 - 00:21:38: column
00:21:36 - 00:21:40: based on the frequency of symbols that
00:21:38 - 00:21:44: we have here so we essentially need to
00:21:40 - 00:21:46: randomly pick the number of rows inside
00:21:44 - 00:21:48: of each column so if we have three rows
00:21:46 - 00:21:49: we need to pick three symbols that go
00:21:48 - 00:21:51: inside of each of the columns that we
00:21:49 - 00:21:53: have and for each column we're doing
00:21:51 - 00:21:56: kind of a new random pick right a new
00:21:53 - 00:21:57: random generation of the symbols now
00:21:56 - 00:22:01: this can be a bit complicated now the
00:21:57 - 00:22:04: easiest way to randomly select um values
00:22:01 - 00:22:06: here for each of our columns is going to
00:22:04 - 00:22:08: be to create a list that contains all of
00:22:06 - 00:22:11: the different values we possibly could
00:22:08 - 00:22:12: select from and then to randomly choose
00:22:11 - 00:22:14: three of those values
00:22:12 - 00:22:16: and when we choose a value we'll remove
00:22:14 - 00:22:18: it from the list and then we'll choose
00:22:16 - 00:22:19: again now what i'm going to do here is
00:22:18 - 00:22:20: not going to be the most efficient
00:22:19 - 00:22:22: algorithm but since we're dealing with
00:22:20 - 00:22:24: small values this is fine
00:22:22 - 00:22:27: so let's see how we work with this
00:22:24 - 00:22:30: okay so what we're going to define here
00:22:27 - 00:22:31: is all underscore symbols
00:22:30 - 00:22:33: okay now this is going to be a list
00:22:31 - 00:22:35: and what we're going to do is write a
00:22:33 - 00:22:37: for loop that's going to add
00:22:35 - 00:22:39: however many symbols we have here into
00:22:37 - 00:22:41: the all symbols list
00:22:39 - 00:22:44: so i'm going to say 4 and since we're
00:22:41 - 00:22:47: iterating through a dictionary
00:22:44 - 00:22:50: i can do the following i can say 4
00:22:47 - 00:22:53: symbol comma symbol underscore count
00:22:50 - 00:22:55: and then this is going to be in symbols
00:22:53 - 00:22:58: dot items now when you use dot items
00:22:55 - 00:23:00: what this does is give you both the key
00:22:58 - 00:23:03: and the value associated with a
00:23:00 - 00:23:04: dictionary so i can get the key here and
00:23:03 - 00:23:06: the value and i can just use both of
00:23:04 - 00:23:07: them rather than looping through the
00:23:06 - 00:23:10: dictionary only getting the keys and
00:23:07 - 00:23:11: having to manually reference the values
00:23:10 - 00:23:13: okay so now that i have the symbol and
00:23:11 - 00:23:16: the symbol count i want to add this many
00:23:13 - 00:23:18: symbols to the um what do you call it
00:23:16 - 00:23:20: symbols list now there's a few different
00:23:18 - 00:23:21: ways to go about doing this i think the
00:23:20 - 00:23:23: easiest way to do this is going to be to
00:23:21 - 00:23:25: run another for loop so that i don't
00:23:23 - 00:23:27: confuse anyone so we're going to say 4
00:23:25 - 00:23:28: and then this is going to be
00:23:27 - 00:23:33: let's do this
00:23:28 - 00:23:34: i in range and then symbol underscore
00:23:33 - 00:23:35: count
00:23:34 - 00:23:37: and actually we don't even need i we're
00:23:35 - 00:23:39: going to put underscore now this is an
00:23:37 - 00:23:41: anonymous variable in python so whenever
00:23:39 - 00:23:42: you need to say loop through something
00:23:41 - 00:23:44: but you don't actually care about the
00:23:42 - 00:23:45: count or the iteration value then you
00:23:44 - 00:23:47: just put an underscore and then you
00:23:45 - 00:23:48: don't have an unused variable anymore so
00:23:47 - 00:23:51: i'm going to say for underscore and
00:23:48 - 00:23:54: range symbol count i'm gonna say all
00:23:51 - 00:23:56: underscore symbols dot and then this is
00:23:54 - 00:23:58: gonna be append and i'm going to append
00:23:56 - 00:23:59: whatever the symbol is so what's gonna
00:23:58 - 00:24:01: happen here is i'm gonna loop through
00:23:59 - 00:24:03: this dictionary let's imagine on the
00:24:01 - 00:24:05: first key value pair my symbol is going
00:24:03 - 00:24:07: to be a and my symbol count is going to
00:24:05 - 00:24:09: be 2. all right so then i have another
00:24:07 - 00:24:10: for loop inside of here
00:24:09 - 00:24:13: where i'm looping through the symbol
00:24:10 - 00:24:14: count so the symbol count is 2 and what
00:24:13 - 00:24:17: i'm doing is doing this two times so i'm
00:24:14 - 00:24:19: going to add this symbol twice into my
00:24:17 - 00:24:20: all symbols list
00:24:19 - 00:24:22: all right now that we have the all
00:24:20 - 00:24:25: symbols list we need to select what
00:24:22 - 00:24:26: values are going to go in every single
00:24:25 - 00:24:28: column
00:24:26 - 00:24:31: so how do we do this well let's make a
00:24:28 - 00:24:33: for loop that is going to do this for
00:24:31 - 00:24:36: every column so i'm going to say my
00:24:33 - 00:24:38: columns is equal to a list
00:24:36 - 00:24:39: and inside of here i'm going to place a
00:24:38 - 00:24:41: bunch of lists which are going to
00:24:39 - 00:24:43: contain all of the values inside of my
00:24:41 - 00:24:44: columns now this may seem a little weird
00:24:43 - 00:24:46: to any of you that have used a nested
00:24:44 - 00:24:49: list before because typically when you
00:24:46 - 00:24:51: write a nested list you kind of have all
00:24:49 - 00:24:53: of the interior lists here that are
00:24:51 - 00:24:55: representing your rows so if i had like
00:24:53 - 00:24:58: 0 0 then these this would be the values
00:24:55 - 00:24:59: that are in row 0 right or in the first
00:24:58 - 00:25:02: row and then this would be the second
00:24:59 - 00:25:04: row and etc however here we're doing it
00:25:02 - 00:25:05: the other way around where each of these
00:25:04 - 00:25:08: nested lists is going to represent the
00:25:05 - 00:25:10: values in our column so keep that in
00:25:08 - 00:25:11: mind i'll explain how this works in case
00:25:10 - 00:25:13: any of you are a bit confused later on
00:25:11 - 00:25:15: but i just want you to know that we're
00:25:13 - 00:25:16: storing the columns not the rows inside
00:25:15 - 00:25:19: of here okay so we have all of the
00:25:16 - 00:25:22: symbols and now for each of the columns
00:25:19 - 00:25:24: that we have uh we need to generate
00:25:22 - 00:25:26: what is it the values inside of the
00:25:24 - 00:25:28: columns and how many values do we need
00:25:26 - 00:25:29: to generate well however many rows we
00:25:28 - 00:25:31: have that's how many values we need so
00:25:29 - 00:25:34: we're going to say 4 and this is going
00:25:31 - 00:25:35: to be call in range and then calls like
00:25:34 - 00:25:38: that
00:25:35 - 00:25:40: and then we need to say 4
00:25:38 - 00:25:44: and this will be row in range
00:25:40 - 00:25:47: rows okay so for every column we need to
00:25:44 - 00:25:50: generate a certain number of symbols so
00:25:47 - 00:25:51: inside of here i'm going to say that my
00:25:50 - 00:25:53: column
00:25:51 - 00:25:54: is equal to an empty list this is
00:25:53 - 00:25:55: actually not going to have our columns
00:25:54 - 00:25:57: inside of it i'm just was putting that
00:25:55 - 00:25:59: there for an example
00:25:57 - 00:26:01: and now i need to select
00:25:59 - 00:26:04: a certain number number of values sorry
00:26:01 - 00:26:05: from our all symbols list
00:26:04 - 00:26:07: so let's see how we do this so we're
00:26:05 - 00:26:11: going to say
00:26:07 - 00:26:14: value is equal to random dot choice and
00:26:11 - 00:26:16: i'm going to choose from all symbols now
00:26:14 - 00:26:18: i can use random because i imported
00:26:16 - 00:26:19: random here
00:26:18 - 00:26:20: now what we're actually going to do
00:26:19 - 00:26:22: though is we're not going to use the all
00:26:20 - 00:26:24: symbols list we're going to use a copy
00:26:22 - 00:26:27: of this and you'll see why but what we
00:26:24 - 00:26:29: need to do is once we pick a value we
00:26:27 - 00:26:31: need to remove it from this list so we
00:26:29 - 00:26:33: can't choose that value again right so
00:26:31 - 00:26:35: if there's only two a's we shouldn't be
00:26:33 - 00:26:36: able to select three a's we should only
00:26:35 - 00:26:38: be able to select at most two so if we
00:26:36 - 00:26:40: select 1a we need to remove it so then
00:26:38 - 00:26:41: the next selection doesn't have that as
00:26:40 - 00:26:43: a chance
00:26:41 - 00:26:45: so that means we need to make a copy of
00:26:43 - 00:26:47: this all symbols list because if i start
00:26:45 - 00:26:49: removing from this all symbols list then
00:26:47 - 00:26:51: when i try to do the next column it's
00:26:49 - 00:26:52: going to have values removed so that's
00:26:51 - 00:26:54: what we need to do we need to make a
00:26:52 - 00:26:56: copy so i'm going to say
00:26:54 - 00:26:58: current underscore symbols is equal to
00:26:56 - 00:27:00: all underscore symbols and the way you
00:26:58 - 00:27:03: copy a list
00:27:00 - 00:27:04: is you do this you put a colon here this
00:27:03 - 00:27:06: operator here is referred to as the
00:27:04 - 00:27:09: slice operator because if i just did
00:27:06 - 00:27:11: this and made it equal to all symbols
00:27:09 - 00:27:14: what happens is current symbols stores
00:27:11 - 00:27:16: the same object as all symbols now that
00:27:14 - 00:27:18: means anything i do to all symbols
00:27:16 - 00:27:20: affects current symbols and anything i
00:27:18 - 00:27:22: do to current symbols affects all
00:27:20 - 00:27:23: symbols so this is not what we want we
00:27:22 - 00:27:25: don't want what's referred to as a
00:27:23 - 00:27:28: reference we want a copy so the way you
00:27:25 - 00:27:29: do the copy is you put a colon here make
00:27:28 - 00:27:30: sure you add this otherwise it's not
00:27:29 - 00:27:32: going to work
00:27:30 - 00:27:35: okay continuing here now what we're
00:27:32 - 00:27:37: going to do is select from our current
00:27:35 - 00:27:39: symbols and then we're going to remove
00:27:37 - 00:27:40: whatever this value is from our current
00:27:39 - 00:27:43: symbols list so we're going to set
00:27:40 - 00:27:45: current underscore symbols dot remove
00:27:43 - 00:27:47: and then value now when you do dot
00:27:45 - 00:27:48: remove it's just going to find the first
00:27:47 - 00:27:50: instance of this value in the list and
00:27:48 - 00:27:51: get rid of it
00:27:50 - 00:27:53: okay
00:27:51 - 00:27:56: now that we've done that we want to add
00:27:53 - 00:27:57: this value to our column so we're going
00:27:56 - 00:28:00: to say
00:27:57 - 00:28:02: column dot push
00:28:00 - 00:28:04: and sorry not push i'm not in javascript
00:28:02 - 00:28:07: right now i'm in python dot append the
00:28:04 - 00:28:09: value all right and i just realized here
00:28:07 - 00:28:10: we don't actually need the column and we
00:28:09 - 00:28:13: don't need the row
00:28:10 - 00:28:14: so we can just put underscores there
00:28:13 - 00:28:16: now what we're going to do after this is
00:28:14 - 00:28:18: we're going to say columns
00:28:16 - 00:28:20: dot append and we are going to append
00:28:18 - 00:28:21: our current column
00:28:20 - 00:28:23: now let me run through this because i
00:28:21 - 00:28:25: understand it's a little bit confusing
00:28:23 - 00:28:28: we start by defining our columns list
00:28:25 - 00:28:29: then we are going to generate a column
00:28:28 - 00:28:31: for every single column that we have so
00:28:29 - 00:28:32: if we have three columns we need to do
00:28:31 - 00:28:34: everything inside of here three times
00:28:32 - 00:28:36: that's why we have this first for loop
00:28:34 - 00:28:38: then inside of here what all this code
00:28:36 - 00:28:41: is doing is it's picking random values
00:28:38 - 00:28:43: for each i guess row in our column right
00:28:41 - 00:28:45: for each value that we're going to have
00:28:43 - 00:28:47: so we say column is equal to an empty
00:28:45 - 00:28:48: list we see our current symbols which
00:28:47 - 00:28:51: are the ones we can currently select
00:28:48 - 00:28:53: from is equal to a copy of all symbols
00:28:51 - 00:28:55: then we loop through the number of
00:28:53 - 00:28:56: values that we need to generate which is
00:28:55 - 00:28:58: equal to the number of rows that we have
00:28:56 - 00:29:00: in our slot machine then we say the
00:28:58 - 00:29:03: first value we're going to get here or a
00:29:00 - 00:29:05: value we're picking is random not choice
00:29:03 - 00:29:07: current symbols this picks a random
00:29:05 - 00:29:09: value from this list
00:29:07 - 00:29:10: okay we then say current symbols dot
00:29:09 - 00:29:12: remove the value so we don't pick it
00:29:10 - 00:29:13: again and then we add the value to our
00:29:12 - 00:29:14: column
00:29:13 - 00:29:16: okay once all of that's done so this
00:29:14 - 00:29:19: four loop is finished we now should have
00:29:16 - 00:29:21: however many rows there are symbols
00:29:19 - 00:29:23: inside of our column we now add our
00:29:21 - 00:29:25: column to our columns list
00:29:23 - 00:29:27: then finally we can go here
00:29:25 - 00:29:30: and we can return
00:29:27 - 00:29:32: our columns okay and remember that when
00:29:30 - 00:29:34: we're looking at this list here every
00:29:32 - 00:29:36: interior list gives us the value of the
00:29:34 - 00:29:38: items inside of our column
00:29:36 - 00:29:39: i know a little bit confusing this was
00:29:38 - 00:29:41: quite a bit of logic especially if
00:29:39 - 00:29:43: you're a beginner programmer but i told
00:29:41 - 00:29:44: you i wanted to make this challenging
00:29:43 - 00:29:46: enough to be interesting for you and
00:29:44 - 00:29:48: show you some new stuff so don't worry
00:29:46 - 00:29:50: if this doesn't make complete entire
00:29:48 - 00:29:51: sense maybe read through this a few
00:29:50 - 00:29:54: times pause the video go back and listen
00:29:51 - 00:29:56: to the explanation again but this is
00:29:54 - 00:29:58: you know how we generate the items that
00:29:56 - 00:30:01: are going to be in our slot machine
00:29:58 - 00:30:02: now that we have this we want a way to
00:30:01 - 00:30:04: print this out we want to look at this
00:30:02 - 00:30:06: because i can't even really test this
00:30:04 - 00:30:07: yet until i can print out what's inside
00:30:06 - 00:30:09: of all of my columns and i want to print
00:30:07 - 00:30:12: this in like a nice way so i'm going to
00:30:09 - 00:30:13: make a function here and say define
00:30:12 - 00:30:15: print
00:30:13 - 00:30:16: underscore slot machine
00:30:15 - 00:30:18: and what we're going to take here is our
00:30:16 - 00:30:21: columns
00:30:18 - 00:30:23: now when we have our columns it's not
00:30:21 - 00:30:25: really in a format that's easy for us to
00:30:23 - 00:30:27: print because we have
00:30:25 - 00:30:29: all of our columns kind of laid out as
00:30:27 - 00:30:30: rows almost right like we have maybe
00:30:29 - 00:30:33: actually this isn't going to be good but
00:30:30 - 00:30:36: we would have like a b
00:30:33 - 00:30:39: c and one maybe we have like a a a
00:30:36 - 00:30:40: and again these are our columns not our
00:30:39 - 00:30:42: rows so what i need to do is kind of
00:30:40 - 00:30:46: flip these around so rather than having
00:30:42 - 00:30:48: like a b c a a it would go a
00:30:46 - 00:30:50: b
00:30:48 - 00:30:52: c right in the first column and then
00:30:50 - 00:30:53: this would say a
00:30:52 - 00:30:55: a
00:30:53 - 00:30:56: and then a like that i know that i kind
00:30:55 - 00:30:58: of butchered this example the way that i
00:30:56 - 00:31:00: wrote it out we need to change it from
00:30:58 - 00:31:02: being this way to be this way right
00:31:00 - 00:31:04: that's how we need to print it out so
00:31:02 - 00:31:05: how are we going to do that well this
00:31:04 - 00:31:07: operation is actually referred to as
00:31:05 - 00:31:10: transposing because we have what's known
00:31:07 - 00:31:12: as a matrix we don't need to get into
00:31:10 - 00:31:14: all the fancy words but understand this
00:31:12 - 00:31:15: is known as transposing so the way we're
00:31:14 - 00:31:17: going to do this is we're going to write
00:31:15 - 00:31:19: a for loop and we're going to say 4 and
00:31:17 - 00:31:20: then this is going to be
00:31:19 - 00:31:21: row
00:31:20 - 00:31:23: in
00:31:21 - 00:31:25: range and then we need to determine the
00:31:23 - 00:31:27: number of rows that we have based on our
00:31:25 - 00:31:29: columns now the number of rows that we
00:31:27 - 00:31:30: have is the number of elements in each
00:31:29 - 00:31:33: of our columns right so that's the
00:31:30 - 00:31:34: number of vertical spaces we have so we
00:31:33 - 00:31:35: need to look at a column and get the
00:31:34 - 00:31:37: length of that so we're going to say the
00:31:35 - 00:31:38: length
00:31:37 - 00:31:39: of columns
00:31:38 - 00:31:41: 0.
00:31:39 - 00:31:43: now this assumes that we have at least
00:31:41 - 00:31:44: one column and we should always have one
00:31:43 - 00:31:46: column so it's fine to put this here but
00:31:44 - 00:31:48: understand that if we did pass something
00:31:46 - 00:31:50: that had no columns this would crash
00:31:48 - 00:31:52: because there'd be no column at index 0
00:31:50 - 00:31:55: to access so i'm saying four row in
00:31:52 - 00:31:57: range the line of columns 0.
00:31:55 - 00:31:59: then what i'm going to do is i'm going
00:31:57 - 00:32:01: to loop through all of my columns and
00:31:59 - 00:32:04: only print the first value in it or
00:32:01 - 00:32:05: whatever the index of my current row is
00:32:04 - 00:32:07: again i'll explain this a second i know
00:32:05 - 00:32:10: this is a bit confusing so i'm going to
00:32:07 - 00:32:12: say 4 and this is going to be column in
00:32:10 - 00:32:13: and then columns like that and when i do
00:32:12 - 00:32:15: this
00:32:13 - 00:32:17: now i'm looping through all of the items
00:32:15 - 00:32:20: inside of columns so it's giving me
00:32:17 - 00:32:22: every individual column so now that i
00:32:20 - 00:32:25: have a column i'm just going to print
00:32:22 - 00:32:26: the value that's at the first row of
00:32:25 - 00:32:29: that column so i'm going to say
00:32:26 - 00:32:31: print and then i'm going to print
00:32:29 - 00:32:33: column at row
00:32:31 - 00:32:35: and i'm just going to put a comma here
00:32:33 - 00:32:36: and put a pipe operator and the reason
00:32:35 - 00:32:39: i'm going to put a pipe operator is so
00:32:36 - 00:32:40: we have some separation between the
00:32:39 - 00:32:42: different items right now i just want to
00:32:40 - 00:32:45: make sure though that i only put this
00:32:42 - 00:32:47: pipe operator here if we're not printing
00:32:45 - 00:32:49: the last column because if we're
00:32:47 - 00:32:51: printing the last column then we don't
00:32:49 - 00:32:52: want to have the pipe like off right we
00:32:51 - 00:32:55: only want to have two pipes in the
00:32:52 - 00:32:56: middle not one at the very end so the
00:32:55 - 00:32:58: way i need to check this i need to say
00:32:56 - 00:33:01: 4i comma column in
00:32:58 - 00:33:02: enumerate columns
00:33:01 - 00:33:06: now when you enumerate what this does is
00:33:02 - 00:33:09: give you the index so 0 1 2 3 as you
00:33:06 - 00:33:11: loop through as well as the item so now
00:33:09 - 00:33:12: that i have i what i can actually do
00:33:11 - 00:33:14: here
00:33:12 - 00:33:16: is i can say
00:33:14 - 00:33:19: there's a few ways to do this let's
00:33:16 - 00:33:21: actually go back to this we'll say if i
00:33:19 - 00:33:22: does not equal and then this is going to
00:33:21 - 00:33:25: be the len of
00:33:22 - 00:33:27: columns minus one
00:33:25 - 00:33:28: we'll do this
00:33:27 - 00:33:30: otherwise we'll print the same thing we
00:33:28 - 00:33:32: just won't print the pipe
00:33:30 - 00:33:33: now there's a bunch of different ways we
00:33:32 - 00:33:34: could have done this but this is just
00:33:33 - 00:33:36: the way that i think is going to be
00:33:34 - 00:33:38: easiest so that's how we'll do it so the
00:33:36 - 00:33:40: reason i'm checking if i is not equal to
00:33:38 - 00:33:42: len of columns minus one is because the
00:33:40 - 00:33:44: length of columns minus one is the
00:33:42 - 00:33:47: maximum index we have to access an
00:33:44 - 00:33:49: element in the columns list right if we
00:33:47 - 00:33:51: have a columns list with three items the
00:33:49 - 00:33:53: length is three the maximum index is 2.
00:33:51 - 00:33:55: so if i is not equal to the maximum
00:33:53 - 00:33:56: index print the pipe otherwise don't
00:33:55 - 00:33:58: print the pipe that's how it's going to
00:33:56 - 00:34:00: work okay so now we have print slot
00:33:58 - 00:34:02: machine and get slot machine spin that's
00:34:00 - 00:34:04: all this is all we need for printing the
00:34:02 - 00:34:06: slot machine so we loop through every
00:34:04 - 00:34:08: single row that we have
00:34:06 - 00:34:11: for every single row we loop through
00:34:08 - 00:34:13: every column and for every column we
00:34:11 - 00:34:15: only print the current row that we're on
00:34:13 - 00:34:17: so we're going to print um
00:34:15 - 00:34:19: what is it row zero so all of the
00:34:17 - 00:34:21: elements in row zero first then row one
00:34:19 - 00:34:23: then row two and this essentially
00:34:21 - 00:34:25: transposes or flips our columns from
00:34:23 - 00:34:27: being this way to be vertical this way
00:34:25 - 00:34:28: all right so let's try this now
00:34:27 - 00:34:29: and then we'll kind of finish the
00:34:28 - 00:34:31: program because we're actually getting
00:34:29 - 00:34:32: quite close though
00:34:31 - 00:34:35: all right so once we determine what
00:34:32 - 00:34:37: they're betting down here what we need
00:34:35 - 00:34:39: to do is generate the slot machine
00:34:37 - 00:34:41: so we're going to say slot
00:34:39 - 00:34:42: we'll save just slots is equal to and
00:34:41 - 00:34:44: then this is
00:34:42 - 00:34:47: what do we call this function we called
00:34:44 - 00:34:48: it get slot machine spin
00:34:47 - 00:34:50: okay so get
00:34:48 - 00:34:52: underscore
00:34:50 - 00:34:53: slot machine spin and then it auto
00:34:52 - 00:34:56: filled this for me we're passing the
00:34:53 - 00:34:58: rows columns and symbols so
00:34:56 - 00:34:59: rows is all capitals actually
00:34:58 - 00:35:01: calls is like this
00:34:59 - 00:35:03: and the symbols i believe we called this
00:35:01 - 00:35:04: the symbols count
00:35:03 - 00:35:06: or we call it symbol count so let's go
00:35:04 - 00:35:08: here
00:35:06 - 00:35:10: and make that symbol count okay so now
00:35:08 - 00:35:12: we should have all of the columns in our
00:35:10 - 00:35:12: slot spin right that's what that did for
00:35:12 - 00:35:15: us
00:35:12 - 00:35:16: now what we need to do is we need to
00:35:15 - 00:35:18: print this so we're going to say print
00:35:16 - 00:35:21: slot machine and we're going to pass to
00:35:18 - 00:35:22: this our slots and really this is the
00:35:21 - 00:35:24: columns but i'm just calling them slots
00:35:22 - 00:35:26: because each one is like what's in the
00:35:24 - 00:35:27: slot right
00:35:26 - 00:35:28: okay
00:35:27 - 00:35:30: let's give this a shot guys there
00:35:28 - 00:35:31: probably will be an error because that's
00:35:30 - 00:35:33: usually what happens when you write this
00:35:31 - 00:35:34: much code from scratch but let's see if
00:35:33 - 00:35:36: this works
00:35:34 - 00:35:38: okay so we are depositing let's deposit
00:35:36 - 00:35:41: a hundred dollars enter the number of
00:35:38 - 00:35:43: lines to bet on uh let's bet on
00:35:41 - 00:35:46: two and then how much we like to bet on
00:35:43 - 00:35:48: each line let's do ten dollars okay
00:35:46 - 00:35:49: now already we got a bit of an error
00:35:48 - 00:35:51: here because i forgot to do something
00:35:49 - 00:35:53: which i'll add in a second but if i
00:35:51 - 00:35:55: scroll here you can see that what's
00:35:53 - 00:35:58: happening is we're printing everything
00:35:55 - 00:36:00: correctly we're just not printing it
00:35:58 - 00:36:02: on the same line which is what we need
00:36:00 - 00:36:04: to do so ideally we want d a and d on
00:36:02 - 00:36:06: the same line c b and c on the same line
00:36:04 - 00:36:08: and b c and a on the same line so the
00:36:06 - 00:36:09: way that we fix that my apologies here
00:36:08 - 00:36:11: guys
00:36:09 - 00:36:14: is we go
00:36:11 - 00:36:16: back to print slot machine and here we
00:36:14 - 00:36:18: add this thing called end equals and we
00:36:16 - 00:36:20: just make this a um what do you call an
00:36:18 - 00:36:23: empty string
00:36:20 - 00:36:24: and in fact let's actually do this
00:36:23 - 00:36:27: end
00:36:24 - 00:36:30: is equal to a pipe with spaces all right
00:36:27 - 00:36:32: so what end does is it tells the print
00:36:30 - 00:36:34: statement what to end the line with now
00:36:32 - 00:36:37: by default end is equal to what's known
00:36:34 - 00:36:39: as the new line character or the return
00:36:37 - 00:36:41: character or whatever you want to call
00:36:39 - 00:36:42: this carriage return there's different
00:36:41 - 00:36:44: names for it i call it the new line
00:36:42 - 00:36:47: character now backslash n if you ever
00:36:44 - 00:36:49: print this out it's what tells the
00:36:47 - 00:36:50: console to go to the next line so we
00:36:49 - 00:36:52: don't want to print that because if we
00:36:50 - 00:36:54: print that at the end then that means
00:36:52 - 00:36:56: that we move to the next line after
00:36:54 - 00:36:58: every single row we only want to do this
00:36:56 - 00:36:59: sorry after every single column we only
00:36:58 - 00:37:01: want to do this after every single row
00:36:59 - 00:37:03: so i'm going to change this to be a pipe
00:37:01 - 00:37:05: so now we'll just print this pipe at the
00:37:03 - 00:37:07: end of our print statement so after we
00:37:05 - 00:37:09: print this here we're just not going to
00:37:07 - 00:37:12: print anything and now we need one more
00:37:09 - 00:37:14: check to see if we should go to the next
00:37:12 - 00:37:16: line or not because every row we want to
00:37:14 - 00:37:18: go down to the next line
00:37:16 - 00:37:21: so i'm actually going to say here
00:37:18 - 00:37:23: print and we can just do an empty print
00:37:21 - 00:37:24: statement now by doing an empty print
00:37:23 - 00:37:26: statement it just brings us down to the
00:37:24 - 00:37:28: next line because it prints a new line
00:37:26 - 00:37:30: character by default at the end of the
00:37:28 - 00:37:31: empty print statement
00:37:30 - 00:37:33: seems a bit weird that's kind of how
00:37:31 - 00:37:36: this works we're going to print the
00:37:33 - 00:37:37: first row this will go on the same line
00:37:36 - 00:37:38: then we're going to print a new line
00:37:37 - 00:37:40: character so it brings us down to the
00:37:38 - 00:37:42: next line print the next row new line
00:37:40 - 00:37:44: character next row new line character
00:37:42 - 00:37:46: next row etc right
00:37:44 - 00:37:49: so let's have a look at this now okay
00:37:46 - 00:37:51: let's go here let's run how much you
00:37:49 - 00:37:52: like to deposit a hundred dollars uh
00:37:51 - 00:37:55: let's bet on two lines how much would
00:37:52 - 00:37:57: you like to bet ten dollars and there we
00:37:55 - 00:37:59: go now we have our slot machine
00:37:57 - 00:38:01: excuse me and this is correct right so
00:37:59 - 00:38:03: we have all of our columns uh and then
00:38:01 - 00:38:07: all of our rows and what we'd now be
00:38:03 - 00:38:08: checking is if we have three in a row
00:38:07 - 00:38:09: right that's what we're going to have to
00:38:08 - 00:38:10: check
00:38:09 - 00:38:12: okay so we have our slot machine we've
00:38:10 - 00:38:14: spun it we probably should have some
00:38:12 - 00:38:15: input that asks like do you want to spin
00:38:14 - 00:38:16: the slot machine and then they can hit
00:38:15 - 00:38:18: spin
00:38:16 - 00:38:20: blah blah be a bit more interactive but
00:38:18 - 00:38:21: that's how it works and just be clear
00:38:20 - 00:38:23: here we're going to check if we have
00:38:21 - 00:38:25: three in a row
00:38:23 - 00:38:27: and if we do based on the value of the
00:38:25 - 00:38:29: symbol we're going to multiply their bet
00:38:27 - 00:38:30: and then give them that amount all right
00:38:29 - 00:38:33: so let's write a function that can do
00:38:30 - 00:38:36: this now when we're checking if they won
00:38:33 - 00:38:39: or not we need to know what their bet is
00:38:36 - 00:38:40: which lines they bet on right
00:38:39 - 00:38:42: and then we can actually check
00:38:40 - 00:38:44: now
00:38:42 - 00:38:45: the way the lines works again i know
00:38:44 - 00:38:47: this is not exactly how like a real
00:38:45 - 00:38:48: casino slot machine will work we're
00:38:47 - 00:38:50: going to make it so that if you bet on
00:38:48 - 00:38:52: one line you just bet on the top line if
00:38:50 - 00:38:53: you bet on two lines you put on the top
00:38:52 - 00:38:55: in the middle if you bet on three lines
00:38:53 - 00:38:56: you bet on all three i'm not going to
00:38:55 - 00:38:58: let the user pick like where the one
00:38:56 - 00:39:01: line is they want to bet on we'll just
00:38:58 - 00:39:03: say one is top two is both the top two
00:39:01 - 00:39:04: three is all of them and that's how
00:39:03 - 00:39:07: it'll work
00:39:04 - 00:39:09: okay so let's do this let's go define
00:39:07 - 00:39:11: check winnings
00:39:09 - 00:39:13: okay now to do this
00:39:11 - 00:39:15: we need the slot machine itself we need
00:39:13 - 00:39:17: the lines so we're gonna say lines and
00:39:15 - 00:39:18: we need the bet
00:39:17 - 00:39:20: okay
00:39:18 - 00:39:22: so how are we gonna do this well we just
00:39:20 - 00:39:24: need to look at the rows that the user
00:39:22 - 00:39:26: bet on so let's start with that and then
00:39:24 - 00:39:28: we can check each row and determine a
00:39:26 - 00:39:29: value also for the symbol so we're
00:39:28 - 00:39:31: actually going to take one more thing
00:39:29 - 00:39:32: we're going to say values now i'm also
00:39:31 - 00:39:35: going to make the values here so i'm
00:39:32 - 00:39:37: going to say symbol underscore value
00:39:35 - 00:39:39: and i don't know what actually makes
00:39:37 - 00:39:41: sense again to do for this but we're
00:39:39 - 00:39:45: going to say that d is going to be a two
00:39:41 - 00:39:47: times multiplier c is gonna be a
00:39:45 - 00:39:49: three times multiplier this will be four
00:39:47 - 00:39:50: and then this will be five so you know
00:39:49 - 00:39:52: the more rare the symbol is the higher
00:39:50 - 00:39:53: your bet gets multiplied again i don't
00:39:52 - 00:39:56: think this is a fair slot machine but
00:39:53 - 00:39:58: that's fine okay so check winnings now
00:39:56 - 00:39:59: we have columns lines bet and value now
00:39:58 - 00:40:01: let's look through only the rows that
00:39:59 - 00:40:02: they bet on so the lines that they bet
00:40:01 - 00:40:04: on
00:40:02 - 00:40:06: so to do this we're going to say 4
00:40:04 - 00:40:07: and we'll say
00:40:06 - 00:40:10: line
00:40:07 - 00:40:11: in range then this is going to be lines
00:40:10 - 00:40:13: like this
00:40:11 - 00:40:16: now the reason this will work is because
00:40:13 - 00:40:18: if they bet on one line then we're going
00:40:16 - 00:40:20: to go up to one line but not include it
00:40:18 - 00:40:21: so that means the line will be equal to
00:40:20 - 00:40:24: zero right
00:40:21 - 00:40:25: so if i bet one line then this is one
00:40:24 - 00:40:27: and that means this is only ever going
00:40:25 - 00:40:29: to be zero if they bet on two lines then
00:40:27 - 00:40:32: line will go to zero and one so we'll
00:40:29 - 00:40:34: check the zeroth row which is line one
00:40:32 - 00:40:36: and the first row which is line two
00:40:34 - 00:40:39: if they bet on all three lines then line
00:40:36 - 00:40:40: will be zero then one then two so we'll
00:40:39 - 00:40:42: check all three of those rows right and
00:40:40 - 00:40:43: this will work dynamically even if there
00:40:42 - 00:40:46: was more lines to bet on
00:40:43 - 00:40:48: so inside this for loop we need to check
00:40:46 - 00:40:50: that every single symbol in the line or
00:40:48 - 00:40:53: row that we're checking is the same so
00:40:50 - 00:40:54: we can get the first symbol that's in
00:40:53 - 00:40:56: this row and then just make sure it's
00:40:54 - 00:40:58: the same for the rest of the symbols so
00:40:56 - 00:41:01: to do that we're going to say symbol is
00:40:58 - 00:41:04: equal to columns 0 at the current line
00:41:01 - 00:41:04: now the reason we're using columns 0 is
00:41:04 - 00:41:07: because
00:41:04 - 00:41:08: we have all of the columns not all of
00:41:07 - 00:41:10: the rows it makes it a bit more
00:41:08 - 00:41:11: complicated so we need to look at the
00:41:10 - 00:41:13: first column because that's where the
00:41:11 - 00:41:15: first symbol is always going to be for
00:41:13 - 00:41:17: each row and then get whatever line
00:41:15 - 00:41:20: we're on so first column and then either
00:41:17 - 00:41:22: you know line 0 line one line two etc
00:41:20 - 00:41:24: going down that first column gives us
00:41:22 - 00:41:25: the first symbol and we're going to
00:41:24 - 00:41:27: assume that we always have at least you
00:41:25 - 00:41:28: know one reel right so at least one
00:41:27 - 00:41:30: column so now that we have the symbol
00:41:28 - 00:41:32: we're gonna loop through all of our
00:41:30 - 00:41:33: columns so we're gonna say four
00:41:32 - 00:41:35: column
00:41:33 - 00:41:38: in columns like that
00:41:35 - 00:41:39: now what we want to check so the symbol
00:41:38 - 00:41:42: to
00:41:39 - 00:41:45: underscore check is equal to the column
00:41:42 - 00:41:47: at whatever row we're looking at so if
00:41:45 - 00:41:48: we're looking at row 0 we're checking
00:41:47 - 00:41:50: the first symbol in the column if we're
00:41:48 - 00:41:53: looking at row one checking the second
00:41:50 - 00:41:55: symbol in the column etc symbol to check
00:41:53 - 00:41:56: we're then going to say if
00:41:55 - 00:41:58: the symbol
00:41:56 - 00:41:59: is equal
00:41:58 - 00:42:01: to the symbol to check and actually
00:41:59 - 00:42:03: we'll say if it is
00:42:01 - 00:42:04: not equal to the symbol to check
00:42:03 - 00:42:06: then
00:42:04 - 00:42:08: we are going to break okay and the
00:42:06 - 00:42:11: reason we're breaking is because if we
00:42:08 - 00:42:13: found one of the symbols is not equal to
00:42:11 - 00:42:16: the previous symbol uh or equal to all
00:42:13 - 00:42:18: of the symbols that should be in this
00:42:16 - 00:42:20: row then we just break out of the for
00:42:18 - 00:42:22: loop and what we'll do is we'll put an
00:42:20 - 00:42:23: else statement here
00:42:22 - 00:42:25: and what this else statement will do is
00:42:23 - 00:42:27: it will tell us if we didn't break out
00:42:25 - 00:42:28: of the for loop so i'm sure you probably
00:42:27 - 00:42:32: haven't seen this before but you can do
00:42:28 - 00:42:34: a four else where if you break this else
00:42:32 - 00:42:36: statement does not run but if no break
00:42:34 - 00:42:39: occurs within the for loop then this
00:42:36 - 00:42:41: else statement executes so in the else
00:42:39 - 00:42:42: statement here what we'll do is we'll
00:42:41 - 00:42:46: figure out how much they won so we'll
00:42:42 - 00:42:48: say winnings is equal to zero okay and
00:42:46 - 00:42:51: then here we're going to say
00:42:48 - 00:42:54: winnings plus equals and then this is
00:42:51 - 00:42:56: going to be the values
00:42:54 - 00:42:58: at the symbol
00:42:56 - 00:43:01: multiplied by the bet and then we can go
00:42:58 - 00:43:02: here and return
00:43:01 - 00:43:03: the winnings
00:43:02 - 00:43:05: okay so let's look at this because i'm
00:43:03 - 00:43:07: sure this is confusing
00:43:05 - 00:43:09: we have every line in the lines which
00:43:07 - 00:43:10: means we're looping through every row
00:43:09 - 00:43:12: essentially that we're going to be
00:43:10 - 00:43:14: checking that the user bet on we then
00:43:12 - 00:43:17: say the symbol that we want to check is
00:43:14 - 00:43:18: whatever symbol is in the first column
00:43:17 - 00:43:21: of the current row because all of the
00:43:18 - 00:43:22: symbols need to be the same right
00:43:21 - 00:43:23: we then say
00:43:22 - 00:43:25: 4 column in column so we now know the
00:43:23 - 00:43:27: symbol that we're going to check now we
00:43:25 - 00:43:29: need to loop through every single column
00:43:27 - 00:43:31: and check for that symbol so we go to
00:43:29 - 00:43:34: each column and we say the symbol to
00:43:31 - 00:43:36: check is equal to the column at the
00:43:34 - 00:43:37: current row that we are looking at so if
00:43:36 - 00:43:39: it's row zero we're doing row zero if
00:43:37 - 00:43:42: it's row one row one et cetera we then
00:43:39 - 00:43:44: check if these symbols are not the same
00:43:42 - 00:43:46: if they are not the same we break out
00:43:44 - 00:43:47: which means that we're going to go check
00:43:46 - 00:43:49: the next line because they didn't win
00:43:47 - 00:43:51: because symbols were not the same
00:43:49 - 00:43:52: if they are the same then we don't break
00:43:51 - 00:43:54: and if we get to the end of this for
00:43:52 - 00:43:56: loop and we've not broke out which means
00:43:54 - 00:43:58: all of the symbols were the same then
00:43:56 - 00:44:00: that means that the user won and what
00:43:58 - 00:44:03: they won is whatever the multiplier is
00:44:00 - 00:44:07: for that symbol times their bet right
00:44:03 - 00:44:08: and this bet is the bet on each line not
00:44:07 - 00:44:10: the total bet right
00:44:08 - 00:44:12: so they could win on one line but lose
00:44:10 - 00:44:14: on the other line that's how it works
00:44:12 - 00:44:17: okay hopefully that's clear i can't
00:44:14 - 00:44:19: explain it much more than that just
00:44:17 - 00:44:21: understand symbol values here right uh
00:44:19 - 00:44:23: gives us you know five four three two so
00:44:21 - 00:44:24: that's what i'm using i'm saying values
00:44:23 - 00:44:26: at whatever the symbol is multiplied by
00:44:24 - 00:44:27: the bet that's how we're adding to the
00:44:26 - 00:44:29: wings
00:44:27 - 00:44:32: okay so that's it for determining how
00:44:29 - 00:44:33: much they won so let's run the game one
00:44:32 - 00:44:35: full time now and then we'll figure out
00:44:33 - 00:44:37: how we can run it multiple times and
00:44:35 - 00:44:38: reduce the balance and all that which is
00:44:37 - 00:44:40: easier than what we just did okay so we
00:44:38 - 00:44:42: print the slot machine
00:44:40 - 00:44:44: and now we're going to say
00:44:42 - 00:44:47: winnings is equal to
00:44:44 - 00:44:50: and what did i call this
00:44:47 - 00:44:51: check winnings okay
00:44:50 - 00:44:54: check winnings
00:44:51 - 00:44:54: we need to pass this our slots
00:44:55 - 00:44:59: the number of lines so i think we called
00:44:57 - 00:45:01: that lines right
00:44:59 - 00:45:02: the bet which we have right here
00:45:01 - 00:45:04: and
00:45:02 - 00:45:06: the values which
00:45:04 - 00:45:08: is called symbol values so let's go
00:45:06 - 00:45:11: symbol underscore value
00:45:08 - 00:45:11: all right then we're going to print
00:45:13 - 00:45:16: u 1
00:45:15 - 00:45:19: and then whatever the amount is that
00:45:16 - 00:45:21: they want so let's make this an f string
00:45:19 - 00:45:23: okay and then you won and then this is
00:45:21 - 00:45:26: going to be
00:45:23 - 00:45:26: winnings like this
00:45:27 - 00:45:30: and this could potentially be zero
00:45:28 - 00:45:32: dollars right
00:45:30 - 00:45:34: okay so i think that's good i'm thinking
00:45:32 - 00:45:36: that we might want to also tell them how
00:45:34 - 00:45:38: many lines they want on or what lines
00:45:36 - 00:45:41: they want on so let's actually return
00:45:38 - 00:45:43: that as well from this function so get
00:45:41 - 00:45:44: uh check winnings we're going to do one
00:45:43 - 00:45:47: more thing here we're going to say
00:45:44 - 00:45:49: winning underscore lines is equal to an
00:45:47 - 00:45:53: empty list and if they win we're going
00:45:49 - 00:45:56: to say winning lines plus equals
00:45:53 - 00:45:57: uh actually not plus equals dot append
00:45:56 - 00:45:59: and then this is going to be whatever
00:45:57 - 00:46:01: the current line number is but we're
00:45:59 - 00:46:03: gonna have to add one to it because this
00:46:01 - 00:46:05: is an index and we want like line one
00:46:03 - 00:46:07: two three not zero one two so we say
00:46:05 - 00:46:09: winning lines dot append line plus one
00:46:07 - 00:46:11: then we go here and we put winning lines
00:46:09 - 00:46:12: and now we're returning two values the
00:46:11 - 00:46:14: total amount they won as well as what
00:46:12 - 00:46:17: lines they want on
00:46:14 - 00:46:20: okay now let's go here to winning lines
00:46:17 - 00:46:22: and now we're going to say winnings and
00:46:20 - 00:46:24: winning underscore lines
00:46:22 - 00:46:26: you won these winnings and then we'll
00:46:24 - 00:46:29: say
00:46:26 - 00:46:31: u1 we'll print another line
00:46:29 - 00:46:34: like this f
00:46:31 - 00:46:35: u 1 on and then this is going to seem a
00:46:34 - 00:46:37: little bit weird but i'm going to do
00:46:35 - 00:46:39: asterisks and then i'm going to pass my
00:46:37 - 00:46:40: winning lines
00:46:39 - 00:46:41: now again i promised i was going to show
00:46:40 - 00:46:43: you guys some new stuff so i'm showing
00:46:41 - 00:46:46: you some advanced syntax here but what
00:46:43 - 00:46:48: this does is actually called the splat
00:46:46 - 00:46:51: operator or the unpack operator and it's
00:46:48 - 00:46:54: going to pass every single line from
00:46:51 - 00:46:55: this winning lines list
00:46:54 - 00:46:57: to
00:46:55 - 00:46:59: this print function so what that means
00:46:57 - 00:47:01: is if we have lines like one and two
00:46:59 - 00:47:03: it's going to pass both one and two so
00:47:01 - 00:47:05: it's going to say u1 on and then one two
00:47:03 - 00:47:06: so i'm going to say you want on
00:47:05 - 00:47:08: lines like this and then it would say
00:47:06 - 00:47:10: one space two we want on all three lines
00:47:08 - 00:47:12: say one space two space three if we
00:47:10 - 00:47:13: didn't want any lines then it's not
00:47:12 - 00:47:15: going to say anything
00:47:13 - 00:47:17: okay you'll see when when we print this
00:47:15 - 00:47:19: out how this works so let's
00:47:17 - 00:47:20: run this here let's make this full
00:47:19 - 00:47:23: screen now and let's go through an
00:47:20 - 00:47:25: example so deposit 100
00:47:23 - 00:47:27: how many lines four invalid okay let's
00:47:25 - 00:47:29: bet on two lines how much would you like
00:47:27 - 00:47:31: to bet on each line ten dollars all
00:47:29 - 00:47:32: right so we won zero dollars because
00:47:31 - 00:47:33: none of the symbols are the same so
00:47:32 - 00:47:35: let's try again
00:47:33 - 00:47:38: all right pause it hundred dollars uh
00:47:35 - 00:47:41: two uh two lines sorry how much would
00:47:38 - 00:47:43: you like to bet ten dollars you won zero
00:47:41 - 00:47:45: dollars okay so this is going to happen
00:47:43 - 00:47:46: a few times so rather than continuing to
00:47:45 - 00:47:47: do this and hoping that we're going to
00:47:46 - 00:47:49: win
00:47:47 - 00:47:50: let's make it so we can run this
00:47:49 - 00:47:52: multiple times without having to
00:47:50 - 00:47:54: constantly rerun the program
00:47:52 - 00:47:56: so we have this main function we have
00:47:54 - 00:47:57: the balance and we have the lines now
00:47:56 - 00:47:59: the balance is going to stay the same
00:47:57 - 00:48:01: but all of this stuff here needs to
00:47:59 - 00:48:02: happen multiple times right and we'll
00:48:01 - 00:48:03: reduce from the balance and all that
00:48:02 - 00:48:05: stuff
00:48:03 - 00:48:07: so let's
00:48:05 - 00:48:10: copy all of this
00:48:07 - 00:48:12: into a function and let's say define
00:48:10 - 00:48:14: let's say game okay
00:48:12 - 00:48:17: we'll put this inside of here so this
00:48:14 - 00:48:17: kind of executes one game
00:48:17 - 00:48:19: now
00:48:17 - 00:48:21: what we can do is write a while loop
00:48:19 - 00:48:23: here
00:48:21 - 00:48:24: and this while loop can kind of handle
00:48:23 - 00:48:26: running the game all right so i'm just
00:48:24 - 00:48:29: thinking here if we do this we need some
00:48:26 - 00:48:31: way to determine like from this instance
00:48:29 - 00:48:33: of the games like per spin so actually
00:48:31 - 00:48:34: let's just say this is maybe spin we
00:48:33 - 00:48:36: need to know how much they won or they
00:48:34 - 00:48:39: lost so i'm just going to return here
00:48:36 - 00:48:41: the winnings minus the total bet and
00:48:39 - 00:48:44: that will tell us how much they won or
00:48:41 - 00:48:47: lost from this spin because if they want
00:48:44 - 00:48:49: 100 but they bet 15 then they only won
00:48:47 - 00:48:52: 85 so then here we would update and we
00:48:49 - 00:48:53: would add 85 right but if they didn't
00:48:52 - 00:48:54: win anything then it's going to be
00:48:53 - 00:48:56: negative whatever the total bet is so
00:48:54 - 00:48:58: like 15 bucks so we'd subtract 15 from
00:48:56 - 00:48:59: the balance okay so here i'm going to
00:48:58 - 00:49:02: say well true
00:48:59 - 00:49:03: and we'll print
00:49:02 - 00:49:05: um
00:49:03 - 00:49:07: current
00:49:05 - 00:49:09: balance is and then we can just put
00:49:07 - 00:49:11: comma actually let's do this as an f
00:49:09 - 00:49:13: string so we can put a dollar sign
00:49:11 - 00:49:17: current balance is and then we'll do
00:49:13 - 00:49:19: dollar sign and then balance okay and
00:49:17 - 00:49:20: then we'll play games we'll say
00:49:19 - 00:49:22: spin
00:49:20 - 00:49:23: equals
00:49:22 - 00:49:25: input
00:49:23 - 00:49:25: say
00:49:25 - 00:49:28: press
00:49:26 - 00:49:29: enter
00:49:28 - 00:49:30: to spin
00:49:29 - 00:49:32: okay so they'll press enter to spin so
00:49:30 - 00:49:33: actually we don't even need to put a
00:49:32 - 00:49:34: value here because we don't care what
00:49:33 - 00:49:37: they type in
00:49:34 - 00:49:39: or actually we can say this spin
00:49:37 - 00:49:41: is equal to press enter to spin and
00:49:39 - 00:49:42: we'll say q
00:49:41 - 00:49:45: to quit so if they type in q then we'll
00:49:42 - 00:49:47: quit so we can say if
00:49:45 - 00:49:50: spin
00:49:47 - 00:49:52: is equal to q then we will break the
00:49:50 - 00:49:55: while loop which will just end the game
00:49:52 - 00:49:58: okay otherwise we'll spin so we can say
00:49:55 - 00:50:00: spin like that and we'll say balance
00:49:58 - 00:50:02: plus equals spin
00:50:00 - 00:50:03: so the way this works now is that spin
00:50:02 - 00:50:05: is going to return to us however much
00:50:03 - 00:50:07: they won or lost it will tell them like
00:50:05 - 00:50:08: what they want or lost so then we'll
00:50:07 - 00:50:10: just update the balance based on the
00:50:08 - 00:50:11: result of that spin and then we'll run
00:50:10 - 00:50:13: this again and say okay current balance
00:50:11 - 00:50:14: is this press enter to spin blah blah
00:50:13 - 00:50:17: and then when they spin they're going to
00:50:14 - 00:50:19: have to enter this info and actually
00:50:17 - 00:50:21: press enter to spin
00:50:19 - 00:50:23: probably doesn't make sense to go here
00:50:21 - 00:50:24: right because you only want to spin
00:50:23 - 00:50:26: after you enter
00:50:24 - 00:50:28: your information although
00:50:26 - 00:50:30: we can just have this works we'll say
00:50:28 - 00:50:32: press enter to to play that's fine and
00:50:30 - 00:50:34: then they can do it inside of there
00:50:32 - 00:50:37: uh okay now that we have that i think
00:50:34 - 00:50:38: that's actually all that we need i'll
00:50:37 - 00:50:39: just make one last print statement here
00:50:38 - 00:50:41: that says
00:50:39 - 00:50:43: u
00:50:41 - 00:50:46: left with
00:50:43 - 00:50:48: and then we'll put inside dollars and
00:50:46 - 00:50:49: then this will be the balance and we'll
00:50:48 - 00:50:50: put an f string here
00:50:49 - 00:50:52: all right
00:50:50 - 00:50:54: let's run this and give it a shot okay
00:50:52 - 00:50:56: so run
00:50:54 - 00:50:58: go here how much do you like to deposit
00:50:56 - 00:50:59: let's suppose it a thousand dollars okay
00:50:58 - 00:51:02: current balance is a thousand dollars
00:50:59 - 00:51:03: press enter to play q to quit okay enter
00:51:02 - 00:51:05: uh and we got an object here balance
00:51:03 - 00:51:06: plus equals spin
00:51:05 - 00:51:09: all right looks like we need to fix this
00:51:06 - 00:51:11: so balance is equal to deposit balance
00:51:09 - 00:51:14: plus equals spin we have winning lines
00:51:11 - 00:51:16: subtracted by total bet
00:51:14 - 00:51:18: and what is the problem all right so the
00:51:16 - 00:51:20: issue here is that i accidentally have
00:51:18 - 00:51:21: the name my function
00:51:20 - 00:51:23: spin
00:51:21 - 00:51:24: the same name as this right here so
00:51:23 - 00:51:25: we're just going to change this to be
00:51:24 - 00:51:28: answer
00:51:25 - 00:51:29: so now this will work properly okay so
00:51:28 - 00:51:32: my apologies guys
00:51:29 - 00:51:34: let's go here and fix this and let's say
00:51:32 - 00:51:36: thousand dollars current balance is a
00:51:34 - 00:51:37: thousand press enter play okay enter the
00:51:36 - 00:51:40: number of lines to bet on let's bet on
00:51:37 - 00:51:42: two lines let's bet 10 bucks
00:51:40 - 00:51:44: okay balance is not defined
00:51:42 - 00:51:46: looks like we need to fix another error
00:51:44 - 00:51:48: so what we need to pass here
00:51:46 - 00:51:50: is balance to the spin function so that
00:51:48 - 00:51:51: it can actually check this when we make
00:51:50 - 00:51:53: a bet so of course that makes sense just
00:51:51 - 00:51:55: forgot to do that so let's pass
00:51:53 - 00:51:57: balance here and now we'll actually be
00:51:55 - 00:52:00: able to check that all right so let's
00:51:57 - 00:52:02: try it again third time's a charm
00:52:00 - 00:52:03: hundred dollars current balance hundred
00:52:02 - 00:52:06: dollars press enter to play okay number
00:52:03 - 00:52:07: of lines let's go three let's go ten
00:52:06 - 00:52:09: dollars
00:52:07 - 00:52:10: and you are betting on ten dollars
00:52:09 - 00:52:12: you're betting ten dollars on three
00:52:10 - 00:52:14: lines total is equal to thirty dollars
00:52:12 - 00:52:16: okay you want zero dollars you won
00:52:14 - 00:52:19: onlines and it has an issue here on
00:52:16 - 00:52:20: sport operands for list and int
00:52:19 - 00:52:22: okay
00:52:20 - 00:52:24: my apologies that's because i put
00:52:22 - 00:52:25: winning lines this needs to be
00:52:24 - 00:52:27: winnings
00:52:25 - 00:52:28: all right fourth time's a charm so let's
00:52:27 - 00:52:30: make sure our variable names are correct
00:52:28 - 00:52:33: that was just a silly mistake let's
00:52:30 - 00:52:34: clear and run
00:52:33 - 00:52:35: hundred dollars
00:52:34 - 00:52:36: enter
00:52:35 - 00:52:38: three lines
00:52:36 - 00:52:40: ten dollars okay you won zero dollars
00:52:38 - 00:52:43: you won on lines your current balance is
00:52:40 - 00:52:44: 70 okay let's play again
00:52:43 - 00:52:47: three lines
00:52:44 - 00:52:48: five dollars okay did we win anything no
00:52:47 - 00:52:50: we did not all right let's play again
00:52:48 - 00:52:52: i'd really like to try to win something
00:52:50 - 00:52:54: but as we can see the slot machine is
00:52:52 - 00:52:57: not in our favor today ten dollars you
00:52:54 - 00:53:00: won zero dollars okay current balance is
00:52:57 - 00:53:03: 25 all right three lines two dollars you
00:53:00 - 00:53:05: won four dollars okay nice so how did we
00:53:03 - 00:53:07: end up winning uh four dollars we bet
00:53:05 - 00:53:09: two dollars
00:53:07 - 00:53:11: and we got a line here of ds so that
00:53:09 - 00:53:13: gave us uh times two multipliers so two
00:53:11 - 00:53:14: times two four so we won four bucks
00:53:13 - 00:53:18: there you go and then our balance get up
00:53:14 - 00:53:19: gets updated sorry to 23 dollars because
00:53:18 - 00:53:22: we were at 25
00:53:19 - 00:53:23: uh subtracted six add four yes okay so
00:53:22 - 00:53:26: that makes sense all right so let's play
00:53:23 - 00:53:28: again let's go three lines one dollar
00:53:26 - 00:53:30: okay you won nothing let's play again
00:53:28 - 00:53:34: three lines one dollar you want nothing
00:53:30 - 00:53:36: three lines one dollar uh oops uh this
00:53:34 - 00:53:37: is let's go three dollars you won
00:53:36 - 00:53:41: nothing okay play again
00:53:37 - 00:53:42: one line three dollars you won nothing
00:53:41 - 00:53:43: all right well i won't continue to play
00:53:42 - 00:53:44: but
00:53:43 - 00:53:46: you get the point we've just created a
00:53:44 - 00:53:50: slot machine and now if i hit q and
00:53:46 - 00:53:52: enter we leave with 11 dollars all right
00:53:50 - 00:53:54: so i think i'm gonna wrap it up there
00:53:52 - 00:53:56: i'm gonna zoom out a bit so you guys can
00:53:54 - 00:53:57: read more of this code i'll just kind of
00:53:56 - 00:53:58: scroll through it i'll also put it in
00:53:57 - 00:54:00: the description in case you want to
00:53:58 - 00:54:02: reference it on github
00:54:00 - 00:54:05: but you can see this is what we wrote so
00:54:02 - 00:54:07: we did about 150 lines of code in i
00:54:05 - 00:54:08: guess about an hour now i walked you
00:54:07 - 00:54:10: through my thought process i showed you
00:54:08 - 00:54:12: a bunch of different python features
00:54:10 - 00:54:14: we did actually some fairly advanced
00:54:12 - 00:54:16: logic in terms of looking through rows
00:54:14 - 00:54:18: and columns and looking at nested lists
00:54:16 - 00:54:20: i showed you about functions i showed
00:54:18 - 00:54:21: you about the anonymous variable you saw
00:54:20 - 00:54:23: this
00:54:21 - 00:54:25: splat operator here and when we went on
00:54:23 - 00:54:27: a line you saw it said we won on
00:54:25 - 00:54:29: whatever the line number was
00:54:27 - 00:54:31: so hopefully this was helpful to you
00:54:29 - 00:54:33: guys hopefully this showed you kind of
00:54:31 - 00:54:35: how to structure a program notice that
00:54:33 - 00:54:36: we put everything in separate functions
00:54:35 - 00:54:38: we've kind of spread our code out we've
00:54:36 - 00:54:39: made it very readable and now we know if
00:54:38 - 00:54:41: there's a bug anywhere it's really easy
00:54:39 - 00:54:42: for us to go and kind of figure out
00:54:41 - 00:54:44: where that is because we've separated
00:54:42 - 00:54:46: everything into different units right
00:54:44 - 00:54:48: different blocks of code anyways i will
00:54:46 - 00:54:49: wrap it up here i hope you guys enjoyed
00:54:48 - 00:54:50: this video if you like this style of
00:54:49 - 00:54:52: teaching then make sure you check out
00:54:50 - 00:54:57: programmingexpert.io and i look forward
00:54:52 - 00:55:05: to seeing you in another youtube video
00:54:57 - 00:55:05: [Music]
