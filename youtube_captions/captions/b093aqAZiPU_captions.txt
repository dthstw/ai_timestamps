00:00:03 - 00:00:05: Hey everyone, Kevin here.
00:00:05 - 00:00:12: Today I want to show you the 
fundamentals of programming using Python.
00:00:12 - 00:00:17: In this video, I'm going to assume that 
you have no programming background at all.
00:00:18 - 00:00:23: We're going to start from the very basics and 
we're going to work our way up step-by-step,  
00:00:23 - 00:00:27: and we'll get a little bit more 
advanced. By the end of this video,  
00:00:27 - 00:00:31: you'll be able to write your very 
own source code and then run it.
00:00:31 - 00:00:32: Now, how exciting is that?
00:00:33 - 00:00:38: We're going to start with, well, why should you 
even learn how to program and then why Python?
00:00:38 - 00:00:41: There are so many different 
programming languages out there.  
00:00:41 - 00:00:46: Why should we choose Python? Then we're going 
to start with how do you even get Python?
00:00:46 - 00:00:48: Where do you write your code?
00:00:48 - 00:00:52: Then we'll go through things 
like operators, variables,  
00:00:52 - 00:00:56: we'll create a function, we'll even jump 
into things like creating an if statement,  
00:00:56 - 00:01:01: creating loops, so your code will run or 
execute until a certain condition is met.
00:01:02 - 00:01:06: We'll even leverage others’ code 
by importing libraries into Python.
00:01:07 - 00:01:12: By the end of this, you'll have a very solid 
understanding of how to get started with  
00:01:12 - 00:01:18: programming. Think of this as a 100-level course 
that'll give you all of the most essential tools.
00:01:19 - 00:01:23: If you want to jump around this video, 
I've included timestamps down below  
00:01:23 - 00:01:25: so you can jump to the section 
that interests you the most.
00:01:31 - 00:01:36: To get started, you might be wondering, 
well, why should I even learn how to program?
00:01:36 - 00:01:37: How is this going to benefit me?
00:01:38 - 00:01:42: Well, anytime you go on your phone 
or anytime you go on your PC,  
00:01:43 - 00:01:48: you're experiencing the output of 
something that someone has programmed.
00:01:48 - 00:01:49: So, you're realizing the benefit.
00:01:50 - 00:01:55: Think of it this way. To program allows you 
to take maybe an idea that's in your head,  
00:01:56 - 00:02:01: you can turn it into a series of steps that 
the computer can understand and execute.
00:02:01 - 00:02:02: How cool is that?
00:02:03 - 00:02:06: So, for example, maybe you have 
a game that you want to create.
00:02:06 - 00:02:12: Maybe you want to create an application at work 
to help simplify what you do on a daily basis.
00:02:12 - 00:02:15: By programming, you can do all of those things.
00:02:15 - 00:02:21: It's an incredibly powerful 
skill to learn how to use.
00:02:24 - 00:02:28: OK, so you want to learn how 
to program, but why Python?
00:02:29 - 00:02:34: There are so many different programming 
languages out there, you have C, C Sharp,  
00:02:34 - 00:02:38: C++, Java, JavaScript, PHP, 
and the list goes on and on.
00:02:39 - 00:02:45: Well, recently on my YouTube channel, I asked 
all of you what programming language do you  
00:02:45 - 00:02:51: most want to learn about? And overwhelmingly, 
far and away, Python was the clear winner.  
00:02:51 - 00:02:57: It was something like 65% of you wanted 
Python. And it kind of makes sense. When you  
00:02:57 - 00:03:02: look at the lists of the most popular programming 
languages, Python tends to be right near the top.
00:03:03 - 00:03:05: It's been around for a while.
00:03:05 - 00:03:08: It's also pretty easy to use and also understand.  
00:03:08 - 00:03:13: When you code using Python, it tends to 
be a very concise programming language.
00:03:14 - 00:03:17: It's also a good general 
purpose programming language,  
00:03:17 - 00:03:20: and what I mean by that, is you can 
write all sorts of applications.
00:03:20 - 00:03:23: Maybe you want to write a web 
app, an internal company tool,  
00:03:23 - 00:03:27: a game, or maybe you just want to 
conduct some scientific analysis.
00:03:27 - 00:03:29: You can do all of that with Python.
00:03:30 - 00:03:34: And all the things that you 
learn today related to Python,  
00:03:34 - 00:03:39: you can take these same concepts and you can 
apply it to other programming languages as well.
00:03:40 - 00:03:45: And really, fundamentally, you just 
want to take some idea you have,  
00:03:45 - 00:03:49: you want to turn it into a series of 
steps that the computer can execute.
00:03:49 - 00:03:53: And in a sense, it's kind of like a 
different language or a spoken language.
00:03:53 - 00:03:57: So, in English I say hello, 
in German I'll say hallo,  
00:03:57 - 00:03:59: and in French, I'll try my best, I'll say bonjour.
00:04:00 - 00:04:06: And all of those communicate the same idea. 
I'm just saying hello, but it's a slightly  
00:04:06 - 00:04:12: different way of saying it or speaking it, and 
that's the same with a programming language.
00:04:12 - 00:04:16: They have different syntaxes. 
They also have different rules,  
00:04:16 - 00:04:20: but at the end of the day, you're simply trying 
to communicate something to the computer,  
00:04:20 - 00:04:25: because you want the computer to do something 
for you. Now of course, each programming language  
00:04:25 - 00:04:29: might have its strengths or weaknesses, but 
you're really accomplishing the same objective.
00:04:30 - 00:04:34: All right, so why don't we jump on the 
PC and let's get started with Python.
00:04:39 - 00:04:46: Here I am now on my PC and first off I want 
to check if I already have Python installed.
00:04:46 - 00:04:49: To do that on Windows 10, simply go down to your  
00:04:49 - 00:04:53: taskbar and within the search 
field type in command prompt.
00:04:53 - 00:04:56: Once you type in command 
prompt, click on the best match.
00:04:57 - 00:05:00: This opens up your command 
prompt, and to check for Python,  
00:05:00 - 00:05:05: simply type in Python and then type in --version.
00:05:05 - 00:05:11: If you have Python installed, it'll tell you the 
version of Python that you have, and here you see,  
00:05:11 - 00:05:16: I just typed this in and it says Python was 
not found, so I need to go and install Python.
00:05:16 - 00:05:21: If you already have it, you can skip the 
next step. If you don't have Python like me,  
00:05:21 - 00:05:24: stick around and I'll show 
you how you can get Python.  
00:05:25 - 00:05:31: To get Python, head to the website python.org 
and that'll drop you on the Python home page.  
00:05:31 - 00:05:35: Right near the top, you'll see a 
button right here for downloads.
00:05:35 - 00:05:39: If you click on this, it'll identify 
what operating system you're on  
00:05:39 - 00:05:41: and it'll recommend the best option.
00:05:41 - 00:05:46: However, if you're on a different OS, you 
can also choose it down here. Now I'm running  
00:05:46 - 00:05:53: Windows today, so I'll download Python 3.9.2. 
This is currently the most recent version. If  
00:05:53 - 00:05:58: you're watching this video maybe a few months from 
now, there could be an even more recent version.
00:05:58 - 00:06:01: Go ahead and download whichever 
one it recommends to you.
00:06:01 - 00:06:04: I'll click on download and here it's 
kicked off the download process.
00:06:04 - 00:06:07: Once you finish downloading, click on the EXE.
00:06:07 - 00:06:11: This opens up the install prompt 
and right up here I could install.
00:06:11 - 00:06:13: However, before we do that,  
00:06:13 - 00:06:18: there’s an option right here at the 
bottom that says add Python to PATH.
00:06:18 - 00:06:21: Let's check that box and 
then click on install now.
00:06:21 - 00:06:25: This now runs through the installation 
process, and it looks like the setup  
00:06:25 - 00:06:28: was successful, so I'm going to click on close.
00:06:28 - 00:06:32: Let's now go down below and just like we 
did before, you can type in command prompt  
00:06:32 - 00:06:36: and then launch the command prompt. 
Once again, we can type in Python  
00:06:37 - 00:06:44: –version, hit enter, and you should now see that 
Python is installed. Here I have Python 3.9.2.
00:06:44 - 00:06:48: OK, now that we've verified that Python is 
successfully installed, let's close command  
00:06:48 - 00:06:53: prompt and once again, let's go down to the 
taskbar, except this time let's type in Python.
00:06:54 - 00:07:00: And here you should see the best match for Python. 
Here I see Python 3.9. Let's click on this.
00:07:00 - 00:07:05: This opens up the Python terminal, and I'll 
zoom in just a little bit, so it's a little  
00:07:05 - 00:07:12: bit easier to see, and we can type in code 
directly here and Python will interpret it.
00:07:12 - 00:07:14: So, what's an example of that?
00:07:14 - 00:07:21: So, what if we type in what is 1 + 2 and I'll 
put a question mark in and let's hit enter.
00:07:22 - 00:07:23: And this doesn't work.
00:07:23 - 00:07:27: I see something that says 
syntax error, invalid syntax.
00:07:28 - 00:07:34: Now the syntax is the rules of a programming 
language and when I typed in what is 1 + 2?
00:07:35 - 00:07:39: This doesn't align with what Python is expecting.
00:07:39 - 00:07:44: I need to type in a valid expression that 
the Python programming language understands.
00:07:44 - 00:07:49: So, instead of typing in what is 
1 + 2, well I could just type in 1  
00:07:49 - 00:07:53: and I'll type in + 2, and then I'll 
hit enter and there gives me 3 back,  
00:07:53 - 00:07:57: so this was a valid expression in 
the Python programming language.
00:07:59 - 00:08:04: Now, what's neat is when I type something 
into Python, like 1 + 2, Python takes each  
00:08:04 - 00:08:10: line of code that I enter. So the 1 + 2, 
it interprets it, and then it evaluates it.
00:08:10 - 00:08:12: So, it gave me 3.
00:08:12 - 00:08:15: There are other programming languages 
where you have to compile it first  
00:08:15 - 00:08:20: and then you can execute it, but with Python 
it'll interpret it as you’re going to.
00:08:20 - 00:08:25: Now, now that we've typed in just a very 
basic expression, and we've evaluated it,  
00:08:25 - 00:08:29: why don't we try a built-in function 
called print. Here I could type in print,  
00:08:29 - 00:08:34: I'm going to open the parentheses, insert double 
quotes, and then I'll type in Hello World,  
00:08:35 - 00:08:37: and I'll close my quotes and close my parentheses.
00:08:37 - 00:08:42: Now this is one of the go to examples anytime 
you're starting with a new programming language.
00:08:42 - 00:08:45: It's just hello world. Just testing it out.
00:08:45 - 00:08:51: I'll hit enter and here it says Hello World, so 
it's sending back exactly what we sent into this  
00:08:51 - 00:08:55: function. Now as we go throughout this, our 
programs are going to get a little bit more  
00:08:55 - 00:09:00: complex, but this is just showing you the basics 
of how you can already start executing some code.  
00:09:01 - 00:09:05: To exit out of the Python terminal, 
we can click on the X symbol up here  
00:09:05 - 00:09:08: or we can type in another function called exit.
00:09:08 - 00:09:10: Open your parentheses, close your parentheses,  
00:09:10 - 00:09:13: then hit enter and that'll 
close out the terminal window.
00:09:13 - 00:09:19: Now we executed some of our first code directly 
in the Python terminal, but you can also use  
00:09:19 - 00:09:25: a text editor to write code. On Windows, 
there's a text editor called Notepad.
00:09:25 - 00:09:28: Once again, go down to your taskbar and 
in the search field type in Notepad.
00:09:29 - 00:09:30: I'll click on this right here.
00:09:32 - 00:09:36: This opens up Notepad, and I'll zoom in 
just a little bit more. Now you probably  
00:09:36 - 00:09:38: never knew that you can 
write source code in Notepad.
00:09:38 - 00:09:43: It's actually a pretty powerful app. So right 
here, just like we did in the previous example,  
00:09:43 - 00:09:47: I'll type in print and then I'll open 
my parentheses, put in a quote, and then  
00:09:47 - 00:09:52: I'll type in Hello World once again, and then 
I'll close my quotes and close my parentheses.
00:09:52 - 00:09:54: So, here's my source code written in Notepad.
00:09:55 - 00:10:01: Now of course I want to be able to run this, so 
I need to save it as an appropriate file type.
00:10:01 - 00:10:06: I'll go up to the file menu, go down to save 
as, and this opens up the save as prompt.
00:10:06 - 00:10:12: Now maybe I'll just call this file, let's call 
it Hello World, and if I just leave it as that,  
00:10:12 - 00:10:17: it'll save it as a .txt or basically 
just a standard text document.
00:10:17 - 00:10:23: Now I want this to be a Python file and it 
turns out that the extension for Python is .py,  
00:10:23 - 00:10:29: just like the extension for text files .txt, 
Python is .py, so here I'll type in .py.
00:10:30 - 00:10:32: Depending on the programming 
language that you're using,  
00:10:32 - 00:10:35: different programming languages 
have different extensions.
00:10:35 - 00:10:40: For example, JavaScript is .js and every 
language will have its own extension.
00:10:40 - 00:10:44: Now that I've typed this in, I'll save 
it to my desktop and then click on save.
00:10:45 - 00:10:49: And here now I see the file on 
my desktop called Hello World.
00:10:49 - 00:10:54: You'll also notice that it has the Python 
logo on it. Because we installed Python,  
00:10:54 - 00:10:59: it correctly identifies that this is a .py 
file and so it sees that this is a Python file.
00:11:00 - 00:11:04: Now let's test this out to see if we 
can run this source code that we wrote.  
00:11:04 - 00:11:07: Down below on the taskbar, 
let's type in command prompt,  
00:11:08 - 00:11:11: just like we did earlier, and 
let's open up the command prompt.
00:11:11 - 00:11:14: I've adjusted the command prompt 
so it's a little bit easier to see,  
00:11:14 - 00:11:18: and now I want to run this file 
over here in command prompt.
00:11:18 - 00:11:20: To do that, let me type in Python.
00:11:20 - 00:11:24: So, this will let the computer know that 
this is a Python file that I want to run.
00:11:24 - 00:11:27: I'll put in a space, and I'll take my Python file,  
00:11:27 - 00:11:30: and then I'll simply drag and 
drop it over into command prompt.
00:11:30 - 00:11:32: Now this is a really cool trick  
00:11:32 - 00:11:36: where you can get the location of the file 
simply by dragging and dropping it in.
00:11:36 - 00:11:39: So here basically I'm saying I 
want to execute this Python file.
00:11:40 - 00:11:46: Next, I'll click on enter and here we see that 
it prints hello world into my command prompt.
00:11:46 - 00:11:50: This is exactly what I wanted it 
to do, so Python went through,  
00:11:50 - 00:11:55: and it interpreted the code in this file 
and then it printed it here on my screen.
00:11:55 - 00:12:00: You now know some of the basics of 
both writing and running Python code.
00:12:00 - 00:12:06: Congratulations, you just wrote your first 
bit of source code, and you also ran it.
00:12:06 - 00:12:08: You're making some good progress.
00:12:08 - 00:12:13: Now, so far, we've just been writing 
our code in a text editor like Notepad,  
00:12:13 - 00:12:17: and then we've been running it, 
and that works perfectly fine,  
00:12:17 - 00:12:23: but it's not the most efficient way to write 
code, and I just want to give a parallel example.
00:12:23 - 00:12:25: Let's say that maybe you're 
writing a document for school.
00:12:26 - 00:12:31: You could write your document in Notepad. 
Now of course it does have some downsides.
00:12:31 - 00:12:33: You don't have a spell check.
00:12:33 - 00:12:35: You don't have a grammar 
check. You can't do formatting.
00:12:35 - 00:12:39: So, although you can do it, it's 
going to require a lot more work.
00:12:39 - 00:12:43: And that same concept also applies to programming.
00:12:43 - 00:12:48: Sure, you could write your code in Notepad, 
or we can get what's called an IDE,  
00:12:48 - 00:12:51: and that stands for integrated 
development environment.
00:12:51 - 00:12:55: It'll just make writing code a 
lot more efficient and also easy,  
00:12:55 - 00:12:58: and in a few moments, we'll see why that is.
00:12:59 - 00:13:02: You have all sorts of IDEs 
that you can choose from.  
00:13:02 - 00:13:08: On Apple, you have Xcode. On Android, you have 
Android Studio. With Ruby, you have RubyMine,  
00:13:08 - 00:13:13: and there's also another one called Visual 
Studio Code and that works very well with Python.
00:13:13 - 00:13:17: It's a product made by Microsoft, so of 
course I like it. I used to work at Microsoft,  
00:13:17 - 00:13:21: but the great thing too is Visual 
Studio Code is entirely free,  
00:13:21 - 00:13:24: so let's go to Visual Studio 
Code and let's get this IDE.
00:13:25 - 00:13:31: To get Visual Studio Code, head to 
the website code.visualstudio.com  
00:13:31 - 00:13:36: and once you land on the homepage, you can 
choose the operating system that you have.  
00:13:36 - 00:13:38: Here when I click on the drop 
down, you can get it on Mac,  
00:13:38 - 00:13:42: Windows, or Linux, so it supports all of 
the different major operating systems.
00:13:42 - 00:13:44: I'm running Windows today,  
00:13:44 - 00:13:48: so I'll click on download for Windows 
and I'll go with the stable build.
00:13:48 - 00:13:52: Once the download completes, down in the 
bottom left-hand corner, click on the EXE.
00:13:52 - 00:13:54: This opens up the setup process.
00:13:54 - 00:13:58: I’ll agree, I'll Click to accept the 
agreement and then click on next.
00:13:58 - 00:14:00: I'll go with the default location.
00:14:00 - 00:14:01: I'll click on next.
00:14:01 - 00:14:04: You'll then get a screen that 
says select additional tasks.
00:14:04 - 00:14:07: I’d recommend checking all 
of these different boxes.
00:14:07 - 00:14:11: Next, let's go down and click on next. On 
the last screen, let's click on install.
00:14:12 - 00:14:15: This will now go through and install 
Visual Studio Code on your computer.
00:14:16 - 00:14:21: Once you're all done installing, let's click 
on finish and launch Visual Studio Code.
00:14:21 - 00:14:27: This now drops us into Visual Studio Code, and 
by default, we'll land on the welcome screen.  
00:14:27 - 00:14:30: If you ever want to get back to this screen again,  
00:14:30 - 00:14:34: you can click on the help menu and then click 
on welcome and that'll drop you right here.
00:14:34 - 00:14:40: There are a few things we want to do before we 
can start writing code in Visual Studio Code.  
00:14:40 - 00:14:44: Over on the left-hand side, there's 
an icon here for extensions.
00:14:44 - 00:14:45: Let's click on that.
00:14:46 - 00:14:50: This opens up extensions and up 
here in the search field type in  
00:14:50 - 00:14:53: Python. We want to install the Python extension.
00:14:53 - 00:14:56: When you type it in, you should 
see Python at the very top,  
00:14:56 - 00:15:00: and when you click on this, you'll 
see that it's Python by Microsoft.
00:15:00 - 00:15:02: It should have something 
over 30 million downloads,  
00:15:03 - 00:15:07: and right here, if you don't yet have 
it, you can install this extension.
00:15:07 - 00:15:12: We're going to need this, so click on 
install and make sure you add It. Once  
00:15:12 - 00:15:17: you finish installing the extension, we 
also want to select Python that we just  
00:15:17 - 00:15:23: installed as the interpreter for Visual 
Studio code, and this is really easy to do.
00:15:23 - 00:15:30: On your keyboard, press control, shift, and P at 
the same time, so that's control, shift, and P,  
00:15:30 - 00:15:38: and that'll open up this screen right here and 
up here, type in Python: select interpreter.
00:15:38 - 00:15:42: This will allow us to select the 
interpreter that we want to use.
00:15:42 - 00:15:47: Now if you remember in Notepad, when we 
wrote our code, it interprets that code.
00:15:47 - 00:15:52: So, we basically want to tell Visual Studio 
code what interpreter we want to use.
00:15:52 - 00:15:54: So, I'll select this option right here  
00:15:54 - 00:16:00: and now I can choose my interpreter, 
and here you'll see Python 3.9.2.
00:16:00 - 00:16:03: So, this is what we installed just a moment ago.
00:16:03 - 00:16:05: So here I'll select this as my interpreter,  
00:16:05 - 00:16:09: and now we're all set to start 
writing code in Visual Studio Code.
00:16:10 - 00:16:15: To get started, why don't we open up the 
Hello World file that we created previously.
00:16:15 - 00:16:19: Here I'll go up to the file 
menu and I'll go to open file.
00:16:19 - 00:16:25: This opens up my file picker and here 
on my desktop I see my hello world file.
00:16:25 - 00:16:30: Here you'll also see that this type of file 
is now associated with Visual Studio Code.
00:16:30 - 00:16:32: This is the Visual Studio Code logo.
00:16:32 - 00:16:35: I'll select this file and then click on open.
00:16:35 - 00:16:38: Now that I've opened the file, 
you should recognize this.
00:16:38 - 00:16:40: This is exactly what we wrote into Notepad,  
00:16:40 - 00:16:46: except this time we have it open in Visual 
Studio Code. Now you'll start to notice  
00:16:46 - 00:16:51: some of the benefits of using an IDE or 
an integrated development environment.
00:16:51 - 00:16:55: First off, I have line numbers now, so 
here if I add additional lines of code,  
00:16:55 - 00:16:58: here I get all the line numbers 
over on the left-hand side.
00:16:58 - 00:17:00: In Notepad, we didn't get that.
00:17:00 - 00:17:05: Also when I write in this function called 
print, it highlights it in different colors  
00:17:05 - 00:17:11: so I could identify what is the context or the 
text that it's printing and what is the function.
00:17:11 - 00:17:12: So here I get different colors.
00:17:13 - 00:17:18: Also, when I hover over print, it 
gives me some helpful suggestions  
00:17:18 - 00:17:22: on the type of content that I 
can enter within this function.
00:17:22 - 00:17:26: So, this will make it a lot easier 
as we start writing out our code.
00:17:26 - 00:17:30: Now I can run this code 
directly in Visual Studio Code.
00:17:30 - 00:17:32: I'll simply go up here and I can now right click.  
00:17:33 - 00:17:37: Right down here, there's an option 
that says run Python file in terminal.
00:17:37 - 00:17:42: When I select that, it'll open up a 
terminal on the bottom of the screen,  
00:17:42 - 00:17:48: and here I can see that it executed or interpreted 
this file and here it prints out hello world.
00:17:48 - 00:17:51: So, it gives me the output 
of this code right up here.
00:17:52 - 00:17:57: Along with right clicking on the screen and 
running the Python file in the terminal there,  
00:17:57 - 00:18:01: I can also go to the top right-hand 
corner and I can click on this play icon.
00:18:01 - 00:18:05: This will also run the Python file in 
the terminal, so when I click on this,  
00:18:05 - 00:18:08: here too, it ran this file and 
here too I see hello world.
00:18:08 - 00:18:14: So, this is just another way, probably a little 
bit easier to see the output of your code.
00:18:14 - 00:18:19: Now that we know some of the basics of how to 
start writing code and how to run that code,  
00:18:19 - 00:18:23: I want to show you how we can start working 
with operators to work with numbers.
00:18:24 - 00:18:29: And here I'm going to type directly into the 
terminal down below, so I'll go down here to  
00:18:29 - 00:18:33: the terminal and just like we did earlier 
in the Python terminal, I can type in here.
00:18:33 - 00:18:35: So here I'll type in 1 + 2  
00:18:36 - 00:18:40: and I'll hit enter and here it interprets 
that code, and it evaluates it to 3.
00:18:40 - 00:18:45: So just like we saw earlier. One of the 
things is you'll notice when I typed in 1 + 2,  
00:18:45 - 00:18:51: I didn't include any spaces and spaces or 
whitespace don't impact the calculation at all,  
00:18:51 - 00:18:56: so I could also type in 1, space, and I'll type 
in plus, and then another space, and hit 2,  
00:18:56 - 00:19:02: and then hit enter and there too it also evaluates 
it to 3, so using white space can actually make  
00:19:02 - 00:19:06: your code more readable, so you could type it 
in like this, or just include some white space.
00:19:06 - 00:19:12: It won't affect what the outcome is. With 
Python, I can use all of the standard  
00:19:12 - 00:19:18: operators. Right up above, I showed you how 
you can do addition, but here let's say 5 – 2,  
00:19:18 - 00:19:21: I can also do subtraction, and here 
it evaluates that to 3 as well.
00:19:22 - 00:19:24: I could do a multiplication, so let's say 4 * 4.
00:19:25 - 00:19:28: Now with multiplication, I enter in an asterisk.
00:19:28 - 00:19:30: That's the multiplication symbol.
00:19:30 - 00:19:36: Here I'll hit enter and it evaluates that to 16. I 
could also do division. Here I'll take 10 / 5 and  
00:19:36 - 00:19:42: here for division, division is the forward slash, 
and then I'll hit enter and that evaluates to 2.
00:19:42 - 00:19:46: Now with Python, let's say that 
you start using multiple operators,  
00:19:46 - 00:19:48: so maybe you're adding and 
then you're multiplying.
00:19:48 - 00:19:51: Python follows the default order of operations,  
00:19:51 - 00:19:56: so let's say I enter in 2 + 2 
and then I want to multiply by 5.
00:19:57 - 00:19:59: What do you think this will evaluate to?
00:19:59 - 00:20:02: Is it 2 + 2 which is 4 and 
then times 5 which is 20?
00:20:02 - 00:20:06: Or is it 2 * 5 which is 10, and 
then you add 2 to that which is 12.
00:20:06 - 00:20:09: Well here if I hit enter, it evaluates to 12,  
00:20:09 - 00:20:16: because it's following the default order of 
operations. Multiplication comes before addition.
00:20:16 - 00:20:22: If you've ever heard PEMDAS or Please Excuse 
My Dear Aunt Sally before, that's how you  
00:20:22 - 00:20:27: know what the order of operations is. First 
it'll evaluate whatever is in parentheses.
00:20:27 - 00:20:33: Then it'll look at any exponents followed by 
multiplication and division in the order of left  
00:20:33 - 00:20:38: to right, and then it'll look at addition and 
subtraction also in the order of left to right.
00:20:38 - 00:20:41: Up above, I could also enter 
in my expression up here,  
00:20:41 - 00:20:45: so here I'll get rid of hello world and 
here I'll say let's print out 2 + 2.
00:20:46 - 00:20:49: Here I'll click on run and here 
you'll see that it executes this  
00:20:49 - 00:20:51: code Thanks for the suggestion! I’ve added this 
to my list. Stay tuned. Cheers!and here this also  
00:20:51 - 00:20:57: evaluates to 4. If I want to use an exponent, 
I'll come up here. Let's remove the plus symbol,  
00:20:57 - 00:21:02: and here I'll enter 2 asterisks, so 
this will be 2 to the power of 2.
00:21:03 - 00:21:08: And here if I click on the play button, 
here that evaluates to four 2 * 2 is 4.
00:21:08 - 00:21:10: But let's say I want to do a 2 to the 3rd.
00:21:10 - 00:21:16: Here I'll evaluate and it comes out to 8. 
I also have access to the floor operator,  
00:21:16 - 00:21:23: so let's take an example here. Let's say I 
want to calculate 5 / 2, and here I'll play  
00:21:23 - 00:21:27: and right down here I see that's 
2.5, so I have a remainder of .5.
00:21:27 - 00:21:29: But let's say I don't want to 
know what the remainder is.
00:21:29 - 00:21:32: I just want to know how many times 
it goes in without a remainder.
00:21:32 - 00:21:34: This is also known as the floor.
00:21:34 - 00:21:39: I could insert another forward slash and then I 
could run it and here it tells me that it’s 2.
00:21:40 - 00:21:43: But let's say I just want to 
know what the remainder is,  
00:21:43 - 00:21:46: I can use the modulus operator for that.
00:21:46 - 00:21:50: I'll get rid of the forward slashes, and 
right here, I'll type in the percent symbol,  
00:21:51 - 00:21:55: then I'll hit go and here it 
tells me that the remainder is 1.
00:21:55 - 00:21:58: As I'm entering in numbers up above 
and as I'm working with numbers,  
00:21:58 - 00:22:02: let's say that I enter a very large number. 
So, let's say I enter in maybe 1,000,000.
00:22:03 - 00:22:08: Now I could go through here and I could 
enter a comma and then I'll type in the zeros  
00:22:08 - 00:22:13: and if I hit go here, you'll notice that 
it doesn't print what I expect it to.
00:22:13 - 00:22:16: That's because we don't want to use 
commas as we're entering numbers.
00:22:16 - 00:22:18: Instead, when you enter a number,  
00:22:18 - 00:22:23: just enter it in as is and then hit go, 
and here it prints exactly what we expect.
00:22:23 - 00:22:26: So, you don't want to use commas 
when you're entering in numbers.
00:22:26 - 00:22:30: Now that we've entered in some numbers, and 
we know a little bit about the basics of  
00:22:30 - 00:22:32: how you can work with numbers and operators,  
00:22:32 - 00:22:37: let's start working with some text 
or what's referred to as strings.
00:22:37 - 00:22:42: Let's say that I want to print what's up. 
Now earlier, we printed out hello world  
00:22:42 - 00:22:47: and it's the same concept here. I'll insert in 
double quotes and then I'll type in what's up.
00:22:47 - 00:22:50: So, here's what's up and I'll click on this play  
00:22:50 - 00:22:53: icon and down below you'll see 
that the output is what's up.
00:22:53 - 00:22:58: Now I surrounded what's up with double 
quotes. Now instead of using double quotes,  
00:22:58 - 00:23:01: I can also use single quotes up here.
00:23:01 - 00:23:06: So, if I enter in single quotes and then hit play, 
here too, you'll see that I get the same output,  
00:23:06 - 00:23:10: so I can choose whether I want to 
use double quotes or single quotes.
00:23:10 - 00:23:13: So why would I want to use 
one versus the other? Well,  
00:23:13 - 00:23:18: here, what's up should actually have a single 
quote, so I'll insert a single quote there.
00:23:18 - 00:23:22: Now one of the problems is when I enter 
a single quote here, it thinks that this  
00:23:22 - 00:23:27: is the end of the string, and so now if I try 
to run it, I get a syntax error down below.
00:23:27 - 00:23:31: So instead, I can use double quotes here 
and I'll use double quotes at the end,  
00:23:31 - 00:23:35: and I could use a single quote in the middle 
and then here I'll run it and it works properly.
00:23:36 - 00:23:39: Now let's say you wanted to use 
double quotes within your text.
00:23:39 - 00:23:44: Well, you could surround it with single quotes 
and that way the double quotes would show up.
00:23:44 - 00:23:49: Now here too, just like we saw before, 
whitespace doesn't impact how the code runs,  
00:23:49 - 00:23:53: so if I want to insert a space here and maybe 
insert a space there and another space here  
00:23:53 - 00:23:58: and I run this code, here you'll see 
that I get the exact same output.
00:23:58 - 00:24:00: So once again, by using white space,  
00:24:00 - 00:24:03: that can help make your code more 
readable as you're going through.
00:24:05 - 00:24:09: We now know some of the basics of 
working with numbers and also strings,  
00:24:09 - 00:24:13: but what if you want to make sure you 
explain what's happening in your code?
00:24:13 - 00:24:14: How do we do that?
00:24:14 - 00:24:18: Well, we can use something called a comment, 
so let's say that I have this code here and I  
00:24:18 - 00:24:24: want to explain to someone what this does. Here 
I’ll bring this code down to the second line and  
00:24:24 - 00:24:30: I can insert a comment by entering in the hash 
symbol or the number sign or the pound symbol,  
00:24:30 - 00:24:33: so I'll enter that and here I 
can say this prints some text.
00:24:36 - 00:24:39: I've now typed in my comment 
and let's run this now  
00:24:39 - 00:24:43: and here you'll see that this doesn't 
affect at all what appears down here.
00:24:43 - 00:24:44: I simply get what's up.
00:24:44 - 00:24:49: So just like we got before. Now I could also take 
a comment and I could put it on a line with code.
00:24:49 - 00:24:51: So here I'll put it after my code,  
00:24:51 - 00:24:55: I'll hit run, and here too you see 
that it just gives me what's up.
00:24:55 - 00:24:56: Now one of the neat things is,  
00:24:56 - 00:25:01: let's say I start writing a lot of code 
and it's starting to get fairly complex.
00:25:01 - 00:25:03: I can comment out a line of code.
00:25:03 - 00:25:08: I'll put the hash symbol in front of my 
code and here you see it turns green,  
00:25:08 - 00:25:11: so this is the IDE’s way of 
telling me that this is a comment.
00:25:11 - 00:25:16: And here now, if I hit run, you'll see that I 
get no output. That's because I commented out  
00:25:16 - 00:25:21: this line of code, so here I could bring it 
back by removing it and now here if I run it  
00:25:21 - 00:25:26: once again it shows me what’s up. So comments 
are pretty valuable as you're writing code.  
00:25:26 - 00:25:31: Not only to let other people know what's happening 
in your code and what different blocks of code do,  
00:25:31 - 00:25:34: but you can also use it when 
you're troubleshooting to  
00:25:34 - 00:25:38: cancel out certain areas of your code 
until you're ready to test them again.
00:25:38 - 00:25:42: Next, we're going to look at 
how you can use variables,  
00:25:42 - 00:25:49: and the easiest way to explain a variable is to 
use this red bucket that I have here from my son.
00:25:50 - 00:25:55: So, let's pretend that this red bucket here 
is a variable and we can name the variable.
00:25:55 - 00:25:58: Why don't we just call it red 
bucket, just to keep things simple.
00:25:59 - 00:26:04: Now I can assign a value to this 
variable, so let's take for instance.
00:26:04 - 00:26:07: Let's say I want the red 
bucket to equal my name Kevin.
00:26:07 - 00:26:09: So here I have my name.
00:26:09 - 00:26:13: I can take this value and I 
can assign it to this variable.
00:26:13 - 00:26:15: So now if you say well, what 
is the red bucket, well,  
00:26:15 - 00:26:18: right here the red bucket is currently Kevin.
00:26:18 - 00:26:20: So once again, I've assigned that value to it.
00:26:20 - 00:26:25: And this is a string or basically 
my name is referred to as a string.
00:26:25 - 00:26:26: It's just a set of characters.
00:26:27 - 00:26:31: Now I could assign other types of data to 
this variable as well, so maybe I say, well,  
00:26:31 - 00:26:36: actually I want the red bucket now to equal 
a number, so maybe I want it to equal #8.
00:26:36 - 00:26:40: So, I'm going to say red bucket, you're now 
equal to 8, so I'm going to take my name.
00:26:40 - 00:26:45: We're going to pull that out, and here I'll take 
the number 8 and we'll put it in the bucket.
00:26:45 - 00:26:47: So now if you ask me, well what is the red bucket?
00:26:47 - 00:26:49: Well, it's currently the number 8.
00:26:49 - 00:26:52: That's a general concept of a variable.
00:26:52 - 00:26:54: The variable can hold different values.
00:26:54 - 00:26:58: Let's jump in now and see how we can 
use variables. To create variables,  
00:26:58 - 00:27:04: there are some rules that we need to follow, 
or this is the syntax that Python looks for.
00:27:04 - 00:27:08: A variable should only contain 
letters, numbers or underscores.
00:27:08 - 00:27:11: And also, we just need to make sure 
that we don't start with a number.
00:27:12 - 00:27:14: We can't use any spaces in a variable name.
00:27:14 - 00:27:19: We also can't use any known keywords 
to Python like break or try.
00:27:19 - 00:27:24: And ideally, we want to make sure that a 
variable name is short and descriptive.
00:27:24 - 00:27:26: Those work best.
00:27:26 - 00:27:29: So, for example, with the red bucket, 
we'll now simply call the red bucket,  
00:27:29 - 00:27:31: so it's pretty short and also descriptive.
00:27:31 - 00:27:37: Also, variable names are case sensitive, so if 
I wrote red bucket with a capital R and another  
00:27:37 - 00:27:44: one with a lowercase r, Python would view those as 
separate variables, so case sensitivity matters.
00:27:45 - 00:27:49: OK, so let's create our first variable 
and just continuing the example,  
00:27:49 - 00:27:54: let's say I want the variable to be called 
red bucket, so I'll give it this name  
00:27:54 - 00:28:00: and now I need to assign a value to this variable, 
just like I did with the bucket. I'll type in  
00:28:00 - 00:28:06: red_bucket and I'll type in the equal sign and I'm 
going to assign it the value of Kevin, my name.
00:28:07 - 00:28:10: And here I'm using just a single equals sign. So,  
00:28:10 - 00:28:15: what this does is it will assign 
this value to this variable.
00:28:15 - 00:28:19: So now here I could hit enter and let me 
run this and here nothing shows up yet  
00:28:19 - 00:28:21: because I've assigned this value to this variable.
00:28:22 - 00:28:25: The next thing we could do 
is actually print this out.
00:28:25 - 00:28:28: So here let me say print and 
let's type in red bucket.
00:28:28 - 00:28:33: What's nice is because I'm using 
an IDE, it recognizes that I  
00:28:33 - 00:28:36: created a variable called red bucket 
and I can just click on it here.
00:28:37 - 00:28:41: Now if I click on the play icon, 
here it'll print out Kevin,  
00:28:41 - 00:28:45: so it's printing out the value 
that's assigned to the red bucket.
00:28:45 - 00:28:49: Now let's take another example here, 
let's say I add another line and  
00:28:49 - 00:28:52: let me copy this first line and 
I'll paste it into the second line.
00:28:53 - 00:28:56: And here I want to assign 10 to the red bucket.
00:28:56 - 00:29:00: So here I start out by assigning 
Kevin and then I assign 10.
00:29:00 - 00:29:01: What do you think will print out?
00:29:02 - 00:29:04: Let's click on the play icon 
and here it prints out 10.
00:29:05 - 00:29:08: And the reason why is, well, first 
it assigns Kevin to Red bucket,  
00:29:08 - 00:29:13: and so that's the current value. But then 
on the next line of code, it assigns a 10  
00:29:13 - 00:29:19: to the red bucket. So, the 10 overwrites Kevin, 
and then when I print out the red bucket,  
00:29:19 - 00:29:23: it's taking the last value that was assigned 
to it. So, the way to think of this back to  
00:29:23 - 00:29:28: the bucket example is I put Kevin in the bucket 
and then when I put 10 in, I have to take Kevin  
00:29:28 - 00:29:32: out and then I put 10 in, so at the very end 
when you ask well what's in the red bucket,  
00:29:32 - 00:29:36: well, the number 10 is the in the red bucket 
because that's the last item that I put in.
00:29:37 - 00:29:42: One thing that's really neat about Python 
is when you're defining your variables,  
00:29:42 - 00:29:45: you don't have to assign your variable a type.
00:29:45 - 00:29:48: So here for example, for the red 
bucket, I assigned it my name,  
00:29:48 - 00:29:50: and that's also known as a string.
00:29:51 - 00:29:55: And next I assigned a number, which is an 
integer, but I don't have to go and say,  
00:29:55 - 00:29:59: well, the red bucket is a string 
or a red bucket is an integer,  
00:29:59 - 00:30:04: it'll automatically know what data type 
that I'm assigning to that variable.
00:30:04 - 00:30:07: So down here in print, I can type in type  
00:30:07 - 00:30:11: and then I'll open and close the 
parentheses around this variable.
00:30:11 - 00:30:15: And so now let's run this and here 
it's telling me that it's an integer.
00:30:15 - 00:30:18: So basically here 10 is assigned to red bucket,  
00:30:18 - 00:30:20: and so it's telling me that 
that's currently an integer.
00:30:20 - 00:30:22: Let's get rid of this line right here.
00:30:22 - 00:30:25: So now Kevin will be assigned to Red Bucket.
00:30:25 - 00:30:30: And when I run this, here you'll see that a 
string data type is assigned to this variable.
00:30:30 - 00:30:33: Now let's say that I want 
to get rid of a variable,  
00:30:33 - 00:30:36: so maybe I don't have a need 
for the red bucket anymore.
00:30:36 - 00:30:41: Down here I can type in del, basically 
delete and this will delete a variable,  
00:30:41 - 00:30:45: and here I can type in red bucket 
again. I'll select the suggestion.
00:30:45 - 00:30:51: Let me get rid of the type in the print, so I just 
want to know what is red bucket? So if we run this  
00:30:51 - 00:30:56: now, I'll get an error because it says red bucket 
is not defined and that makes sense because here I  
00:30:56 - 00:31:01: created the variable, I assigned the value, here I 
deleted the variable, and here I try to print the  
00:31:01 - 00:31:05: variable, but there is no variable anymore called 
red bucket because I deleted it right up above.
00:31:06 - 00:31:10: Next, I want to show you an 
example of how you can request  
00:31:10 - 00:31:14: input and then you can take that 
input and assign it to a variable.
00:31:14 - 00:31:18: So right here I simply typed in Kevin 
and I assigned it to this red bucket,  
00:31:18 - 00:31:22: but I want to allow input. So right up here, 
let's delete Kevin or delete your name that  
00:31:22 - 00:31:28: you entered in and here we'll type in the input 
function. Here I'll open the parentheses and let  
00:31:28 - 00:31:33: me type in double quotes and maybe I'll ask the 
question what do you want to put in the bucket.  
00:31:33 - 00:31:37: I'll enter a question mark 
and then an additional space.  
00:31:37 - 00:31:40: Now right down here, I don't want to delete 
the variable, so I'll get rid of this.
00:31:40 - 00:31:45: So right now, I'm going to ask for input and 
then we'll print out whatever the input is.
00:31:45 - 00:31:49: So here let's click on the 
run icon and this will run it.  
00:31:49 - 00:31:51: Right down here it says what do 
you want to put in the bucket?
00:31:51 - 00:31:53: And so maybe I want to put a shovel in,  
00:31:53 - 00:31:57: so I'll click down in the terminal, 
type in shovel, and then hit enter.  
00:31:57 - 00:32:03: And here now it prints out shovel, because 
that's now the value of the red bucket variable.
00:32:04 - 00:32:09: Next, I want to show you how we can start 
using conditional logic in our code.
00:32:09 - 00:32:13: Basically, any expression that you enter 
in breaks down to either true or false,  
00:32:14 - 00:32:15: so let's just take an example.
00:32:15 - 00:32:21: I'll go down a few lines and let me enter in 
print and I'm going to ask is 5 equal to 4?
00:32:22 - 00:32:26: One of the things you'll notice is when 
I ask this question is 5 equals to 4,  
00:32:26 - 00:32:29: I entered in two equal 
signs and that's not a typo.
00:32:30 - 00:32:33: Up above, I just entered in one equal sign.
00:32:33 - 00:32:36: So why do I enter one here 
and down here I enter two?
00:32:36 - 00:32:41: Well up above, I'm taking this value or this 
input and I'm assigning it to this variable.
00:32:42 - 00:32:45: Here I want to run a test for equality.
00:32:45 - 00:32:48: I basically want to check are these two equal,  
00:32:48 - 00:32:52: and when you test or check for 
equality, you use two equal signs,  
00:32:53 - 00:32:57: so here let me remove the code up on top and 
I'm simply going to print out is 5 equal to 4.
00:32:58 - 00:33:01: Here when I run it, here 
we'll see that no, it's false.
00:33:01 - 00:33:02: 5 does not equal 4.
00:33:03 - 00:33:06: Now you might be saying, well 
of course 5 isn't equal to 4.
00:33:06 - 00:33:10: It's not equal to, so over here I can also 
check are they not equal to one another.
00:33:10 - 00:33:14: So here instead of the equal sign, 
I'll insert an exclamation mark.
00:33:14 - 00:33:17: So here I have an exclamation 
mark followed by an equal sign.
00:33:17 - 00:33:21: So, this is my way of asking the 
computer is 5 not equal to 4?
00:33:21 - 00:33:22: And I think we all know that's true.
00:33:22 - 00:33:25: So, when I run it, here I get true back.  
00:33:25 - 00:33:30: Along with equal to and not equal to, there 
are many other operators that I can also use.
00:33:30 - 00:33:35: I have less than, greater than, greater 
than or equal to, and less than or equal to.
00:33:35 - 00:33:40: And here you can see the symbol that you 
can use for these different operations  
00:33:40 - 00:33:44: and over on the right-hand side, you'll see a few 
examples of how you could use this, so I could  
00:33:44 - 00:33:49: insert any one of these into that print statement 
and you'll get this corresponding result.
00:33:49 - 00:33:53: We can now take these different 
operations and we can combine it with  
00:33:53 - 00:33:57: variables that we just learned about 
and so let's type in an example here.
00:33:58 - 00:34:02: So, I have a young son at home. His name 
is Thomas and he's just three years old,  
00:34:02 - 00:34:07: so let me create a variable and I'll call it 
Thomas age and it's currently equal to three,  
00:34:07 - 00:34:11: so I'm taking this value of three and 
I'm assigning it to this variable.
00:34:12 - 00:34:16: Now let's say I want to check, well, 
is he old enough for kindergarten.
00:34:16 - 00:34:19: So maybe I type in age at and 
I'll type in kindergarten.
00:34:21 - 00:34:25: And maybe age at kindergarten 
is 5, so I'll enter in equals 5,  
00:34:25 - 00:34:29: so I now have two different variables and I've 
assigned a value to each of those variables.
00:34:30 - 00:34:33: Now down here I can check the equality of these,  
00:34:33 - 00:34:42: so maybe I'll say print and let's check is Thomas 
age, is that equivalent to the age at kindergarten  
00:34:42 - 00:34:47: and so then I'll hit run and here we'll see 
that's false because basically Thomas age is  
00:34:47 - 00:34:52: coming back as three, age at kindergarten 
is 5, and those don't equal one another.
00:34:52 - 00:34:56: So, we can do this same type of check 
except we could do it using variables.  
00:34:57 - 00:35:00: Now with this expression here, I'm simply checking  
00:35:00 - 00:35:05: is Thomas’ age equal to the age at 
kindergarten and it comes back as false.
00:35:05 - 00:35:08: But what if I want to do something 
a little bit more complex?
00:35:08 - 00:35:12: What if I want to check, well if Thomas is 
less than the age at kindergarten, well,  
00:35:12 - 00:35:16: he should probably be in preschool or daycare. 
And if he is 5, he should be in kindergarten.
00:35:16 - 00:35:19: But if he's older than five, he 
should be in some other class.
00:35:19 - 00:35:23: And right now, this is just doing one 
check, it's just looking at one point,  
00:35:23 - 00:35:25: is he at the age for kindergarten?
00:35:25 - 00:35:29: The easiest way to think of this is like 
a flow chart, so here I have the current  
00:35:29 - 00:35:33: age and depending on his age, any one of 
these different scenarios could be true.
00:35:34 - 00:35:37: Now I won't be able to do that with 
the simple expression that we wrote.
00:35:37 - 00:35:39: That's just checking one thing.
00:35:39 - 00:35:45: If I want to check multiple different criteria, 
this is when I can use an if statement.
00:35:45 - 00:35:49: So, let's jump back into Visual Studio 
Code and let's look at how we can use this.  
00:35:49 - 00:35:54: Back in Visual Studio, I'm going to delete this 
last line and I'll keep these two variables.
00:35:54 - 00:35:57: The one with Thomas' age and the 
other one with the age at kindergarten  
00:35:58 - 00:36:02: and I'll enter down a few lines. Once 
again, the white space doesn't matter,  
00:36:02 - 00:36:05: so don't worry, you could enter 
down a few lines and now we want to  
00:36:05 - 00:36:11: enter in an if statement. An if statement is 
really easy to write, you simply type in if.
00:36:12 - 00:36:14: And here now I can do my check.
00:36:15 - 00:36:19: So first I want to know is Thomas’ 
age less than the age at kindergarten?
00:36:19 - 00:36:21: So here I can type in my variable.
00:36:21 - 00:36:27: Once again it gives me this helpful suggestion 
of using Thomas’ age and first I can check if  
00:36:27 - 00:36:31: he's younger than the age at kindergarten, 
so let me enter in the age at kindergarten.
00:36:31 - 00:36:33: So, this is going to be my first check.
00:36:34 - 00:36:38: Once I finish entering in this 
statement, I need to enter in a colon.
00:36:38 - 00:36:41: And when I hit enter, this 
drops me down to the next line.
00:36:41 - 00:36:45: One thing you'll notice is it 
automatically indented the line.
00:36:45 - 00:36:51: What will happen is it will check this and if it 
turns out that Thomas’ age is less than the age  
00:36:51 - 00:36:56: at kindergarten. In this case, Thomas is 3, the 
age of kindergarten is 5, so this would be true.
00:36:56 - 00:37:01: It's going to evaluate this code, 
so whatever code I enter in here,  
00:37:01 - 00:37:03: it'll go through and it'll execute that.
00:37:04 - 00:37:07: So, let's test this out and let me type 
in print, so I'll enter in this function  
00:37:08 - 00:37:11: and maybe we say something like 
Thomas should be in preschool.
00:37:12 - 00:37:16: Once I finish typing that in, I'll go to 
the end of this line and hit enter again.
00:37:17 - 00:37:20: Here you see that it continues to indent it.
00:37:20 - 00:37:26: So basically, I can type in additional code 
and whatever I type in in this indented space,  
00:37:26 - 00:37:30: it'll go through and it'll 
execute all of this code.
00:37:30 - 00:37:32: Now I don't have anything else I want to run.
00:37:32 - 00:37:34: I simply want to print out this message.
00:37:34 - 00:37:36: Let's now test this out to see how it works.
00:37:36 - 00:37:42: I'll go up here and click on run and here we get 
the text that says Thomas should be in preschool.
00:37:42 - 00:37:44: Now let's say that maybe Thomas is 10 now.
00:37:44 - 00:37:48: So here Thomas’ age is 10 and that is 
not less than the age of kindergarten.
00:37:48 - 00:37:55: So, when I run, here I get nothing back because 
it evaluates this, and it comes back as false,  
00:37:55 - 00:37:57: so it doesn't execute this code.
00:37:57 - 00:38:01: Now there's nothing else here, 
so it simply returns nothing.  
00:38:01 - 00:38:06: Now let's say I want some fall back, so let's say 
if this is false, I want to say something else.  
00:38:06 - 00:38:11: Down here I can use else, so it'll check 
this, and it'll check if this is true,  
00:38:11 - 00:38:16: but if it turns out being false, 
then it'll fall back to else.
00:38:16 - 00:38:20: So here I'll enter an else, a colon, 
and here again it indents out.
00:38:20 - 00:38:25: So here I could say, well if this isn't 
true then execute this block of code.
00:38:25 - 00:38:28: So here maybe I'll insert another print function.
00:38:28 - 00:38:29: So let me type in print.
00:38:29 - 00:38:35: I'll open up the parentheses and let me type in 
Thomas should be in kindergarten or another class.
00:38:36 - 00:38:40: So, I've now typed in my else statement, so 
let's try running it to see what it will happen.
00:38:40 - 00:38:42: So, it'll check the first if statement,  
00:38:42 - 00:38:46: that'll evaluates a false, and 
then it should fall back to else.
00:38:46 - 00:38:50: Let's test this out. So when I hit 
run, here it says Thomas should be  
00:38:50 - 00:38:55: in kindergarten or another class, so this 
logic is working exactly as we expect it to.
00:38:56 - 00:38:58: Right now, I have two conditions here.
00:38:58 - 00:39:03: I basically checked the first condition and if 
this is false, it just falls back to this one.
00:39:03 - 00:39:07: But let's say I want to check 
for additional conditions.
00:39:07 - 00:39:11: Here I'll enter down and let me get out of this 
block of code, so I'll hit the backspace key,  
00:39:12 - 00:39:16: and right here, I can enter something 
called elif, basically else if,  
00:39:16 - 00:39:19: so, you can go through and 
check any number of conditions.
00:39:19 - 00:39:21: It'll start at the top and 
when it finds one that's true,  
00:39:21 - 00:39:24: it'll display that message and then exit.
00:39:24 - 00:39:27: But if this is false, it'll go to the 
next one and check that condition,  
00:39:27 - 00:39:30: and I can add any number of else ifs in here.
00:39:31 - 00:39:36: So I'll type in elif and maybe for this 
condition I want to know if Thomas is 5,  
00:39:36 - 00:39:38: well he should be in kindergarten.
00:39:38 - 00:39:41: So here I'll say Thomas age and here once again,  
00:39:41 - 00:39:44: I want to check if it's equal 
to the age at kindergarten.
00:39:44 - 00:39:46: And remember, we don't enter in one equal sign,  
00:39:46 - 00:39:50: we enter in two and here I'll enter in 
the other variable age at kindergarten.
00:39:50 - 00:39:51: So, this is going to be my check.
00:39:52 - 00:39:56: And if this is true, we now want to evaluate 
some code. Now just like we did before where  
00:39:56 - 00:40:00: I entered the colon, let's make sure 
we enter in a colon here at the end.
00:40:00 - 00:40:02: That's part of Python syntax.
00:40:02 - 00:40:04: I'll hit enter and this automatically indents me.  
00:40:05 - 00:40:10: Here I'll type in print, and I'll type in 
some text that says enjoy kindergarten.
00:40:10 - 00:40:14: Now I've added this else if statement that 
checks to see if he's in kindergarten.
00:40:14 - 00:40:19: So, this last statement no longer makes sense 
where I say Thomas should be in kindergarten or  
00:40:19 - 00:40:26: another class, so maybe I simply remove this 
and I say Thomas should be in another class,  
00:40:26 - 00:40:28: so this will just be my catch all at the end.
00:40:28 - 00:40:30: So, let's test this out to see how it works.
00:40:30 - 00:40:33: So, let's say Thomas is 3 and I run it.
00:40:33 - 00:40:36: In this case, the first condition here is true.
00:40:36 - 00:40:39: So, Thomas should be in preschool 
and here I get the text down below.
00:40:39 - 00:40:41: Thomas should be in preschool.  
00:40:41 - 00:40:44: Now let's say Thomas is equal to five, 
or maybe he's five years old now.
00:40:44 - 00:40:48: When we run it, here the first condition 
is false, so it skips over that one.
00:40:48 - 00:40:50: It looks at the second condition,  
00:40:50 - 00:40:54: this elif, and here Thomas is 5 
and that's the age at kindergarten.
00:40:54 - 00:40:57: So here I get the text saying enjoy kindergarten.
00:40:57 - 00:40:59: And let's say now that maybe Thomas is 10.
00:41:00 - 00:41:03: So here when I run it, it evaluates 
the first statement and, well,  
00:41:03 - 00:41:05: he's older than the age of 
kindergarten, so that's false.
00:41:05 - 00:41:09: His age is not equal to the age of 
kindergarten, so that's also false,  
00:41:09 - 00:41:13: and then it falls back to the else statement, 
and so Thomas should be in another class.
00:41:13 - 00:41:17: So here we've just tested that this 
is working just like we expect it to.
00:41:17 - 00:41:23: Next, I want to show you how we can use 
functions in Python and if you've ever  
00:41:23 - 00:41:28: used any other programming language before, you 
might know them as a subroutine or a method,  
00:41:28 - 00:41:31: but it's all the same thing, so 
we're going to use functions.
00:41:31 - 00:41:34: And you've actually already been using a function.
00:41:34 - 00:41:39: We used the print function. Right here you see 
that we've been using print multiple times.
00:41:39 - 00:41:43: This is a function. You call this 
function, you pass in some text,  
00:41:43 - 00:41:45: and then it prints it out on the screen.
00:41:45 - 00:41:49: So that's just a basic example of a 
function that we've already been using.
00:41:49 - 00:41:52: Now the cool thing is we 
can create our own function.
00:41:53 - 00:41:55: So, what is a function?
00:41:55 - 00:41:58: Well, it's basically a block of code  
00:41:58 - 00:42:01: that you can package together 
with a name and it does something.
00:42:01 - 00:42:07: So, in this case anytime you call print 
or input, it takes some action depending  
00:42:07 - 00:42:13: on what that function is. The neat thing is it 
makes your code more modular and also reusable.
00:42:13 - 00:42:16: So here for example, every time we 
want to print something on the screen,  
00:42:16 - 00:42:19: we simply call this function 
and then it takes that action.
00:42:19 - 00:42:24: We don't have to enter in all the different code 
associated with printing your text on the screen.
00:42:24 - 00:42:26: We simply rely on this function.
00:42:26 - 00:42:29: So, it makes your code a lot more reuseable.
00:42:29 - 00:42:31: So let's go through and create our own function.
00:42:32 - 00:42:37: Right now, I'll go through and delete all of this 
code that we had and let's say just to show the  
00:42:37 - 00:42:42: value of functions, let me just enter in print 
and then Kevin Stratvert has a great channel.
00:42:42 - 00:42:44: I'm going to enter this in three times.
00:42:44 - 00:42:47: I figure the more I say it 
maybe the more it sticks,  
00:42:47 - 00:42:50: then the more you read it, 
you might start to believe it.
00:42:50 - 00:42:54: So here I've typed it in three different 
times and now I'm going to run it.  
00:42:55 - 00:42:59: Here I'll expand the terminal just so we 
could see it and here printed out three times.
00:43:00 - 00:43:02: Oh, but actually, look at that.
00:43:02 - 00:43:06: It looks like I spelled Stratvert 
wrong. Stratvert has a T in the middle,  
00:43:06 - 00:43:11: and here I just say Stravord. Now because 
I'm not using a function for this, well,  
00:43:11 - 00:43:15: I'm using the print function, but I haven't 
created a function to print this out three times,  
00:43:15 - 00:43:20: so I'd have to go through, and I'd have to 
correct every single Stravert throughout my code  
00:43:20 - 00:43:24: to correct this and imagine that 
you referenced something many,  
00:43:24 - 00:43:28: many, many times in your code, and maybe you 
make an error, you need to update something.
00:43:28 - 00:43:32: It could be a pain to have to go 
through all of your code to update it.
00:43:32 - 00:43:36: So instead, you can create a function, and 
I'll show you how we can create a function  
00:43:36 - 00:43:41: to print this out multiple times, and 
then we can call it whenever we want.
00:43:41 - 00:43:42: OK, so let's create a function.
00:43:42 - 00:43:45: I'll simply go down a few lines.
00:43:45 - 00:43:47: To create a function, we have to type in def.
00:43:47 - 00:43:54: This basically stands for define, so I'll 
type in def and here we can type in a name  
00:43:54 - 00:43:59: for our function, and I'm going to call 
this function, let's say print Kevin.
00:44:00 - 00:44:04: So, I've typed in my function name and then all 
functions need to have parentheses at the end, so  
00:44:04 - 00:44:09: I'll open the parentheses, close the parentheses, 
and write down here, once again, just like we did  
00:44:09 - 00:44:15: with the if statement, I'll insert a colon. So, 
I now have my function. When I hit the enter key,  
00:44:15 - 00:44:19: here too, just like with the if statement, 
you see that it indents it automatically.
00:44:19 - 00:44:25: So once again, it indents and any of the code 
underneath here will be part of this function.
00:44:25 - 00:44:28: Next, I want to enter in some code in 
this function, so maybe I'll set up  
00:44:28 - 00:44:33: a variable and I'll call this text and 
let me insert some text here in quotes,  
00:44:33 - 00:44:39: and maybe I'll say Kevin Stratvert has a 
great channel, so that's going to be my text.
00:44:39 - 00:44:42: And here maybe I'll just make the 
error again where I don't have the T.
00:44:43 - 00:44:47: Now right beneath that, here I could use 
print and maybe I say let's print the text  
00:44:47 - 00:44:49: and I want to print this three times.
00:44:50 - 00:44:52: So, I'll insert it in three times right here.
00:44:52 - 00:44:56: I'm going to delete this earlier example 
here so we just have the function.
00:44:57 - 00:44:59: So, I have my function now, can I run it?
00:44:59 - 00:45:04: Let's try clicking on run. So I 
click on run, and I get nothing back.
00:45:04 - 00:45:08: And the reason why is right up 
here, we've defined a function,  
00:45:08 - 00:45:11: but we haven't actually called this function.
00:45:11 - 00:45:15: So, I've defined what should happen when 
I call this, but we haven't called it yet,  
00:45:15 - 00:45:20: so here I'll go down and I'll backspace, 
so I'm out of this block of code that's  
00:45:20 - 00:45:23: associated with this function, and 
here now I can call my function.
00:45:23 - 00:45:27: So just like we called the print 
function, here I could say print  
00:45:27 - 00:45:31: and let's type in underscore Kevin and 
then I'll open and close my parentheses.
00:45:31 - 00:45:37: So right now, this will call the function. 
So, when Python sees print Kevin,  
00:45:37 - 00:45:41: it'll look up to this definition for 
Kevin and then it'll execute this code.
00:45:41 - 00:45:44: So, let's click on run to see what happens.
00:45:44 - 00:45:48: Now look at that. Kevin Stravert has a great 
channel and it printed it out three times.
00:45:48 - 00:45:51: Oh, and look, there's that error in here.
00:45:51 - 00:45:53: So right up here, I could go to my function.
00:45:53 - 00:45:56: I could add the T and then 
I can hit run and it looks  
00:45:56 - 00:45:59: like that's now successfully updated in all cases.
00:45:59 - 00:46:02: Now I could go through, and I could 
call this function multiple times.
00:46:02 - 00:46:05: This will really boost my ego.
00:46:05 - 00:46:09: So now when I hit run, look how many times 
it's printed out, Kevin has a great channel,  
00:46:09 - 00:46:12: every single time I reference this 
function, it'll go back up here,  
00:46:12 - 00:46:17: it'll look at the function definition, and 
then it'll run this code within that function.  
00:46:17 - 00:46:23: Wth a function, to be able to call the function, 
I first need to define it before I can call it.
00:46:23 - 00:46:26: Here I'll remove these two 
references to the function  
00:46:26 - 00:46:30: and so let's take the call of the 
function and I'll move it to the very top.
00:46:30 - 00:46:32: So here I call the function and then I define it.
00:46:32 - 00:46:36: So, if I hit run now here you get an error 
because here it says we'll print Kevin.
00:46:36 - 00:46:41: Well, it doesn't know about that function 
yet because it comes up later on in the code.
00:46:41 - 00:46:45: So once again, I need to make sure I call 
this function after I've defined my function.
00:46:45 - 00:46:49: So typically in code, you'll see all 
the different definitions or all of the  
00:46:49 - 00:46:52: different definitions of the functions at the top.
00:46:52 - 00:46:56: One of the neat things too about 
using Visual Studio Code is here  
00:46:56 - 00:47:00: when I click over in the function and I 
hover over, I can collapse this function.
00:47:00 - 00:47:05: So let's say I'm writing code and I want to have a 
whole bunch of functions that do different things.
00:47:05 - 00:47:09: I can collapse it and then that way it 
clears up my view a little bit and here  
00:47:09 - 00:47:13: I could expand it if I need to jump into this 
function and update any of the code within.  
00:47:14 - 00:47:19: With this one function that I defined on 
top, currently I don't pass anything into  
00:47:19 - 00:47:23: the function and I also don't get 
anything back from the function.
00:47:23 - 00:47:26: If you remember the print 
example, here with print,  
00:47:26 - 00:47:28: I'm passing in certain text that I want to print.
00:47:28 - 00:47:31: So basically, I'm sending in 
an argument or a parameter,  
00:47:31 - 00:47:34: and I can do the same when I create a function.
00:47:34 - 00:47:39: So, let's say instead of entering the text here 
within the function, let me actually get rid of  
00:47:39 - 00:47:45: this line right here, and right up here as part 
of my function definition, I'll type in text.
00:47:45 - 00:47:49: So, as I define my function, it's 
expecting me to pass in some value.
00:47:50 - 00:47:55: So, let's now go down here and look at the 
position where I'm calling my function.
00:47:55 - 00:48:01: It says print Kevin and here I can now pass 
in a value or basically pass in a parameter.
00:48:01 - 00:48:05: So, I'll type in Kevin 
Stratvert has a great channel.
00:48:06 - 00:48:12: So here you'll see as I call this function, 
it's passing in this parameter or this argument.
00:48:12 - 00:48:18: When I pass this in, here in the definition, it 
says it's expecting some text to be passed in  
00:48:18 - 00:48:22: and down below the print is taking that 
text that I pass into this function.
00:48:23 - 00:48:25: So now when I hit run, here 
you'll see the same result.
00:48:25 - 00:48:27: Kevin Stratvert has a great channel  
00:48:27 - 00:48:31: and this is just an example of how you 
can pass values into your function.
00:48:31 - 00:48:36: Next, I want to show you how we can 
put an if statement within a function.
00:48:36 - 00:48:38: So here again I'll type in def.
00:48:38 - 00:48:43: This will define my function and I'm 
going to call this school age calculator.
00:48:43 - 00:48:46: So, I want to basically 
determine based on a child's age,  
00:48:46 - 00:48:50: where should they be in school, and 
I want to get two different values.
00:48:50 - 00:48:53: I want to get the child's age, 
so I'll type in age as one of the  
00:48:54 - 00:48:58: parameters or arguments I want to get, 
and I also want the name of the child.
00:48:58 - 00:49:01: Now, just like we did before, let's put in 
a colon here and then let's press enter.
00:49:02 - 00:49:05: Here once again, you'll see that 
it automatically indents me and  
00:49:05 - 00:49:09: so that shows that whatever code I 
write here is part of this function.
00:49:10 - 00:49:17: Now I want to insert my if statement, so I'm going 
to check first off if the age is less than five.
00:49:17 - 00:49:21: Once again, I'll insert the colon, and when I 
press enter, here it indents me even more so.
00:49:21 - 00:49:23: Now I'm within this if statement,  
00:49:23 - 00:49:27: so if this evaluates to true, 
we're going to execute this code.
00:49:27 - 00:49:31: If it's true, I want to display some text, 
so here I'll call the print function.  
00:49:31 - 00:49:35: Here I'll open it up and maybe 
I show some text that says  
00:49:35 - 00:49:39: enjoy the time. You're still a young 
guy, you don't need to be in school yet.
00:49:39 - 00:49:43: So I've typed in some text. Now earlier 
we've just been printing out text,  
00:49:43 - 00:49:46: but I can also print out 
variables together with text.
00:49:46 - 00:49:50: So here I could enter a comma 
and then I'll type in the name.
00:49:50 - 00:49:54: Here I'll type in another comma and let 
me enter in quotes again, and I'll say  
00:49:54 - 00:49:58: is only, here I'll enter another comma, 
and then I'll type in the variable age.
00:49:58 - 00:50:03: So here you can see what it'll do, let's 
say the age is 3 and the name is Thomas.
00:50:03 - 00:50:08: It'll say enjoy the time, Thomas is only three, 
so that's what will display if he's under 5.
00:50:09 - 00:50:12: Let me hit enter and here now I 
want to enter another condition,  
00:50:12 - 00:50:18: so I'll hit back space so I go back, and 
here I'll enter elif, basically else if  
00:50:18 - 00:50:23: and I want to say if age let's 
say, is equivalent to five,  
00:50:23 - 00:50:28: then I'll enter the colon and here maybe I'll say 
enjoy kindergarten, and then I'll show the name.
00:50:28 - 00:50:32: So here I'll type in print and 
then I'll open the parentheses  
00:50:32 - 00:50:36: and I'll type in the quotes and 
here we'll say enjoy kindergarten,  
00:50:36 - 00:50:41: and here I'll type in a comma and let me type in 
another comma here and then I'll display the name.
00:50:41 - 00:50:44: So here it'll say enjoy kindergarten, Thomas.
00:50:44 - 00:50:49: And lastly, I want to add one more condition, 
so I'll hit enter, backspace, and here I can  
00:50:49 - 00:50:55: say else, colon, and here, maybe I'll say print 
and this one, I'll just display text and I'll  
00:50:55 - 00:51:02: say they grow up so fast exclamation mark. 
I've now finished defining my function and I  
00:51:02 - 00:51:06: have all of the different conditions within 
the function, so here I could enter down,  
00:51:06 - 00:51:12: and I'll press backspace twice, so I exit out 
of both the conditions and also the function.
00:51:12 - 00:51:14: So now here I can call my function. So,  
00:51:14 - 00:51:20: I'll call school age calculator and here 
I need to pass in two different values.
00:51:20 - 00:51:24: I'll pass in the age, I'll enter a comma, 
and then I'll type in the name, Thomas.
00:51:25 - 00:51:29: So now if I run this, here you'll see that it 
calls the function and then it goes through  
00:51:29 - 00:51:34: all of these different conditions, and so here, 
while Thomas is less than five, he's only three,  
00:51:34 - 00:51:38: so it says enjoy the time, Thomas is 
only three, and here we can test it out,  
00:51:38 - 00:51:43: here I'll change it to five, and if I run 
it here, it says enjoy kindergarten, Thomas,  
00:51:43 - 00:51:48: and let's say Thomas is now 10, and I'll run 
it, and here it says they grow up so fast.
00:51:48 - 00:51:54: So here now you see how we can call a function 
and here we pass in values into that function,  
00:51:54 - 00:52:00: and it uses those values to run an if 
statement and to evaluate which one is true.
00:52:00 - 00:52:05: Next I want to show you how you can also 
get a parameter back from your function.
00:52:05 - 00:52:10: So so far, we've looked at how you could just run 
a function on its own, how you could pass values  
00:52:10 - 00:52:15: into the function, and now we're going to look at 
how you can get a value back from the function.
00:52:15 - 00:52:20: I'm going to go through, let's remove this code 
right here, and let's start again from scratch.
00:52:20 - 00:52:23: For this one, it's just going 
to be a really simple example.
00:52:23 - 00:52:28: I want to know what is your age going to be in 
10 years and we'll use a function to do this.
00:52:29 - 00:52:33: So here once again, let's define 
a function by typing in def  
00:52:33 - 00:52:35: and here the function name will be add ten to age.
00:52:36 - 00:52:38: Once I've typed in the function name,  
00:52:38 - 00:52:42: here I want to get one bit of input 
into my function or one parameter.
00:52:42 - 00:52:45: Here I'll type in the age, so 
someone will send in their age,  
00:52:45 - 00:52:47: and then the function will add 10 to that age.
00:52:48 - 00:52:52: At the end of the definition of the 
function, let's enter a colon and hit enter.
00:52:52 - 00:52:58: Here this automatically indents me and now right 
now I want to figure out what the new age is.
00:52:58 - 00:53:00: So here I'll create a variable called New Age  
00:53:01 - 00:53:05: and I want to set that equal to 
the age that's being passed in.
00:53:05 - 00:53:10: So, I'll type in age and I'm going to add 
10 to it, and right underneath that now  
00:53:10 - 00:53:15: once the function runs through and it does 
its magic, I want to return that value,  
00:53:15 - 00:53:20: so here I'll type in return, and I want to 
return the new age, so I'll select this.
00:53:20 - 00:53:25: This will send the value back or return the 
value once the function is done running.  
00:53:26 - 00:53:29: Here now, I want to call my function, 
and when I call the function,  
00:53:29 - 00:53:32: I can assign that return value to a variable.
00:53:32 - 00:53:36: So here maybe I create a new 
variable called How old will  
00:53:36 - 00:53:41: I be and I can set that equal to my function.
00:53:41 - 00:53:44: So here I'll call the function add ten to age  
00:53:44 - 00:53:49: and here I want to pass in let's say my 
son who’s three, so I'll pass in three.
00:53:50 - 00:53:53: So once again, if I run this right 
now, it won't actually do anything.
00:53:53 - 00:53:59: It's assigning the output, which is 13 to how 
old will I be, but now I need to print it out.
00:53:59 - 00:54:04: So right down here let me type in print and 
I'm going to print in how old will I be.
00:54:05 - 00:54:09: And now if I hit run, here we'll 
see that that comes back as 13.
00:54:10 - 00:54:14: Now once again, just to see how this 
works, here I'm saying how old will I be?
00:54:14 - 00:54:19: This is a variable and I'm assigning this value 
to it, which is basically my function of add  
00:54:19 - 00:54:26: ten to age, and I'm passing in three, so here 
it gets the age of three, it takes 3, adds 10,  
00:54:26 - 00:54:31: it assigns its new age and once it's done running 
through the function, it returns the new age.
00:54:31 - 00:54:37: So, the new age is 13 and it assigns 13 to how 
old will I be and then here it prints out 13.
00:54:37 - 00:54:43: So that's how it works, and that's how you can 
get or you could return a value from a function.
00:54:43 - 00:54:46: Next, we're going to look 
at how you can use loops.
00:54:46 - 00:54:47: What is a loop?
00:54:48 - 00:54:55: Basically, it allows you to execute a block of 
code multiple times, so think of it this way.
00:54:55 - 00:54:58: Every single week my wife 
comes to me and says, Kevin,  
00:54:58 - 00:55:03: can you take out the trash, and 
she asks me that every single week.
00:55:03 - 00:55:05: So, in a sense, that's kind of like a loop.
00:55:06 - 00:55:11: All right, let's jump on the PC and let's 
see how we can create a loop in Python.
00:55:11 - 00:55:15: So, let's now create a loop and there 
are two different types of loops.
00:55:15 - 00:55:20: One of them is called a while loop and 
the other one is called a for loop.
00:55:20 - 00:55:25: We're going to start with a while loop, 
and it's actually pretty easy to do.
00:55:25 - 00:55:30: I'm going to create a variable, just call 
it X and I'll assign it the value of 0.
00:55:31 - 00:55:33: And so here now I can type in a while loop.
00:55:33 - 00:55:38: So, I'll say, let's say while and 
let's say X is less than five.
00:55:38 - 00:55:45: So, while this value is less than five, I want it 
to execute some code, so here I'll insert a colon.
00:55:45 - 00:55:47: We do this with our if 
statements, with our functions.
00:55:47 - 00:55:51: Here when I hit enter now, it automatically 
indents me, so I'm now within the loop.
00:55:52 - 00:55:58: And here I could just say let's say print X, so 
I'll enter that in and then right after I print X,  
00:55:58 - 00:56:01: I want to make sure I increment X, 
otherwise it will be an infinite loop.
00:56:01 - 00:56:06: So here I'll type in X = X + 1, 
just a really simple example.
00:56:06 - 00:56:10: We start out at zero and here it 
will say if X is less than five,  
00:56:10 - 00:56:14: in which case it starts at zero. It is, so 
then it prints X, and then we add one. So  
00:56:14 - 00:56:20: now X is 1 and X is still less than five, 
so it'll keep executing until it reaches 4.
00:56:20 - 00:56:27: So, let's run this to see how it works. So 
here it prints out 01234 and then once X = 5,  
00:56:27 - 00:56:32: well, it's no longer less than five, so 
then we exit our loop and it's all done.
00:56:32 - 00:56:36: Note, that's the basics of how you 
can create just a very simple loop.
00:56:36 - 00:56:42: There's also another loop called a for loop, so 
I'll go down right here and let's type in for.
00:56:42 - 00:56:49: And this is also pretty simple. Here I can type 
in for and let's say 4 X in range, let's say five  
00:56:50 - 00:56:53: through 10, and then here 
I'll close the parentheses,  
00:56:53 - 00:56:56: enter a colon, and here too, 
I'll print the value of X.
00:56:56 - 00:57:02: Let me delete the code up above, and here 
what it'll do is it'll go through that range,  
00:57:02 - 00:57:07: so when I hit run here, you see that it starts 
at 5 and it goes all the way up until 10,  
00:57:07 - 00:57:12: but it doesn't include 10, so this is 
another form of a loop that you can use.
00:57:12 - 00:57:18: You can do some pretty neat things with loops. 
Here for example, I have the variable days and  
00:57:18 - 00:57:23: I have an array assigned to it and 
these are just all the days of the week.  
00:57:23 - 00:57:29: Here I can use a for loop to write out all the 
days of the week, so here I could say for d,  
00:57:29 - 00:57:34: here I'm creating a variable, and I'll say in 
days, so here I'm looking at this variable.
00:57:34 - 00:57:40: Here I'll insert a colon and maybe I just want to 
print out the value of d. So, as it goes through  
00:57:40 - 00:57:45: each day of the week, and here I can enter run 
and here it'll go through the variable of days,  
00:57:45 - 00:57:49: and here it prints out every single 
day of the week, so that's pretty cool.
00:57:49 - 00:57:54: Now, one of the neat things too is you can start 
using some of the logic that we learned up above  
00:57:54 - 00:57:59: in your loops, so let's say that I want 
to know what are all of the days before  
00:57:59 - 00:58:02: Thursday, and once we hit 
Thursday, I want you to stop.  
00:58:03 - 00:58:10: Here I can insert an if statement, so I'll say 
if and let's say if d is equivalent to let's say  
00:58:10 - 00:58:16: Thursday, so I'll type in Thursday, and at this 
point I want it to stop. So I'll type in break.
00:58:17 - 00:58:21: So here if we click on run, here you'll 
see it goes through Monday, Tuesday,  
00:58:21 - 00:58:26: Wednesday and then it looks like it hits 
Thursday, and at that point we stop the loop.
00:58:26 - 00:58:28: So, at that point we break,  
00:58:28 - 00:58:34: and we no longer print any of the other days. 
With loops, we can also skip over items.
00:58:34 - 00:58:39: So, let's say that once we get to Thursday, I 
don't want it to include Thursday in the list,  
00:58:39 - 00:58:42: but I still want it to continue 
and look at Friday, Saturday,  
00:58:42 - 00:58:46: and Sunday. Instead of using break, 
I can use something called continue.
00:58:47 - 00:58:50: So now when I run the code, here 
you'll see Monday, Tuesday, Wednesday,  
00:58:50 - 00:58:53: and then it found Thursday, and we 
simply want to skip over that item.
00:58:53 - 00:58:54: So, we added continue.
00:58:54 - 00:58:58: So here you see it skips over and then 
we get Friday, Saturday and Sunday.
00:58:58 - 00:59:01: So once again you can use logic in your loops.
00:59:01 - 00:59:05: You could also have it break and 
continue. So far throughout this video,  
00:59:05 - 00:59:09: we've been looking at some of the fundamentals, 
and we've been writing all of our own code;  
00:59:10 - 00:59:15: however, one thing you can do is you can 
build on top of what others have already done  
00:59:15 - 00:59:21: using libraries and also modules, and there are 
lots of fantastic libraries that you can use.
00:59:21 - 00:59:25: Let's say for instance that we 
want to print out the value of Pi.
00:59:25 - 00:59:28: It turns out there's an 
existing library called math.
00:59:28 - 00:59:32: We could simply type in import and type in math,  
00:59:32 - 00:59:37: and right beneath that, let's use our standard 
print function, and here I'll type in print.
00:59:37 - 00:59:40: And why don't we say something like pi is,  
00:59:40 - 00:59:47: and then I'll insert a comma and here now I can 
refer to the math library and I'll type in .pi.
00:59:47 - 00:59:49: So, I want to get the pi value back  
00:59:49 - 00:59:53: and here as I'm typing that out, you'll see 
all sorts of suggestions of what I could use.
00:59:54 - 00:59:58: So here when I click on run now, 
here it'll print out the value of pi.
00:59:58 - 01:00:02: So once again, when you're programming, you don't 
necessarily have to write everything on your own.
01:00:02 - 01:00:08: Instead, you can build on top of what others 
have done. If you were following along today,  
01:00:08 - 01:00:13: you might have occasionally run into different 
errors as you were trying to execute your code  
01:00:13 - 01:00:15: and they can really be a pain to resolve.
01:00:15 - 01:00:21: I want to go through three of the key errors that 
you might run into and how you can resolve them.
01:00:22 - 01:00:23: So, let's take one example.
01:00:23 - 01:00:27: Here I'm going to type in print, 
and I'll type in Hello World.
01:00:27 - 01:00:31: Now if you've been following along, you probably 
know that every time I type in this function,  
01:00:31 - 01:00:35: and I type in text, I need to include my 
quotes around this, but I haven't done that.
01:00:36 - 01:00:39: When I hit run right now, here I get an error,  
01:00:39 - 01:00:44: and this is referred to as a syntax error 
and the reason why is, I didn't follow  
01:00:44 - 01:00:48: the rules of the print function, or I 
didn't follow the syntax rules for Python.
01:00:48 - 01:00:52: The best way to troubleshoot these 
is to simply look through your code  
01:00:52 - 01:00:54: to find out where the error might be.
01:00:54 - 01:00:57: So here I get name error 
hello world is not defined.
01:00:57 - 01:01:00: So here it thinks hello world is a variable.
01:01:00 - 01:01:03: So, this is one way where you can look at the 
error message down here and that'll help you  
01:01:03 - 01:01:09: troubleshoot up above what the problem is. Now you 
might run into another type of error, let's say I  
01:01:09 - 01:01:16: take 10 / 0 and then I try to run this, and we all 
know that you can't divide by zero. Right here I  
01:01:16 - 01:01:23: get a zero-division error division by zero. This 
is referred to as a runtime error. It just fails.
01:01:23 - 01:01:27: Now you could look down here at the error 
message to see what it was and that might  
01:01:27 - 01:01:32: help you troubleshoot where the problem is in your 
code, and typically when you get an error message,  
01:01:32 - 01:01:37: you could go to something like stackoverflow.com 
and you can look up your error message to see  
01:01:37 - 01:01:42: if other people have encountered similar errors 
and that'll help you get down to the root cause.  
01:01:42 - 01:01:46: And lastly, there's another type 
of error that you might encounter.
01:01:46 - 01:01:49: Let's say I type in name equals. Let's say Kevin,  
01:01:49 - 01:01:54: just like we did earlier and here now, let's 
say I want to print, and I'll say hello name.
01:01:54 - 01:01:58: So, let's say I want to print the 
name that I assigned to this variable.
01:01:58 - 01:02:01: Here let me insert the 
parentheses and then I'll hit run.
01:02:02 - 01:02:08: So down here, it just says hello name, and it's 
not printing out Kevin. Now these errors here  
01:02:08 - 01:02:16: these are referred to as semantic errors and 
these are notoriously hard to troubleshoot and  
01:02:16 - 01:02:20: the reason why is because everything is working 
as it should based on how you programmed it.
01:02:20 - 01:02:23: But you're not getting the expected result.
01:02:23 - 01:02:27: So, for these you typically have to sit 
down, look through your code, evaluate  
01:02:27 - 01:02:32: is everything working how it should, 
so these will tend to take more time.
01:02:32 - 01:02:36: All right, well that now brings 
us to the end of this video.
01:02:36 - 01:02:41: Hopefully by now you understand the 
fundamentals of programming using Python.
01:02:42 - 01:02:47: If you enjoyed this video, please give it 
a thumbs up. Also, if you enjoyed this and  
01:02:47 - 01:02:52: maybe you'd like to see more content like this 
in the future, please consider subscribing.
01:02:52 - 01:02:57: Also, if you have any feedback or if you want to 
see me cover any other video topics in the future,  
01:02:57 - 01:02:59: please leave a comment down below.
01:03:00 - 01:03:02: All right, well that's all I had for you today,  
01:03:02 - 01:03:15: I hope you enjoyed and as always, 
I hope to see you next time, bye.
