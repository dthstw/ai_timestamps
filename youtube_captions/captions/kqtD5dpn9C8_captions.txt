00:00:02 - 00:00:05: in this python tutorial you're going to
00:00:03 - 00:00:07: learn everything you need to know to
00:00:05 - 00:00:08: start programming in python if you want
00:00:07 - 00:00:10: to learn python programming for data
00:00:08 - 00:00:12: science machine learning or web
00:00:10 - 00:00:14: development this python tutorial is the
00:00:12 - 00:00:16: perfect place to learn python you don't
00:00:14 - 00:00:18: need any prior knowledge in python or
00:00:16 - 00:00:19: programming in general i'm going to
00:00:18 - 00:00:21: teach you everything from scratch i'm
00:00:19 - 00:00:23: mosh hamadani and i've taught millions
00:00:21 - 00:00:25: of people how to code through this
00:00:23 - 00:00:27: channel if you're new here make sure to
00:00:25 - 00:00:30: subscribe as i upload new videos every
00:00:27 - 00:00:31: week now let's jump in and get started
00:00:30 - 00:00:32: all right before we get started let me
00:00:31 - 00:00:34: give you some ideas about what you can
00:00:32 - 00:00:36: do with python that's a very common
00:00:34 - 00:00:38: question python is a multi-purpose
00:00:36 - 00:00:40: programming language so you can use it
00:00:38 - 00:00:42: for a variety of different tasks you can
00:00:40 - 00:00:44: use python for machine learning and ai
00:00:42 - 00:00:45: in fact python is the number one
00:00:44 - 00:00:47: language for machine learning and data
00:00:45 - 00:00:50: science projects python is also very
00:00:47 - 00:00:51: popular in web development using python
00:00:50 - 00:00:54: and a framework called django you can
00:00:51 - 00:00:56: build amazing websites here are five
00:00:54 - 00:01:00: websites powered with python and django
00:00:56 - 00:01:02: youtube instagram spotify dropbox and
00:01:00 - 00:01:04: pinterest you can also use python in
00:01:02 - 00:01:06: automation with python you can save your
00:01:04 - 00:01:09: time and increase your productivity by
00:01:06 - 00:01:10: automating repetitive tasks so why are
00:01:09 - 00:01:12: you learning python are you learning it
00:01:10 - 00:01:14: for automation for data science or web
00:01:12 - 00:01:17: development let me know in the comment
00:01:14 - 00:01:17: section below
00:01:19 - 00:01:23: all right the first thing i want you to
00:01:20 - 00:01:26: do is to head over to python.org to
00:01:23 - 00:01:28: download the latest version of python so
00:01:26 - 00:01:31: you go to downloads and select the
00:01:28 - 00:01:31: latest version of python
00:01:33 - 00:01:37: here in your downloads folder you should
00:01:34 - 00:01:38: see this package simply double click it
00:01:37 - 00:01:41: you're going to see this python
00:01:38 - 00:01:44: installer if you're on windows you will
00:01:41 - 00:01:46: see this checkbox over here add python
00:01:44 - 00:01:48: to path make sure to check it it's
00:01:46 - 00:01:50: really important otherwise you're not
00:01:48 - 00:01:52: going to be able to follow this tutorial
00:01:50 - 00:01:53: simply click on continue
00:01:52 - 00:01:55: again
00:01:53 - 00:01:57: one more time
00:01:55 - 00:02:00: i agree with the terms
00:01:57 - 00:02:02: and install the latest version of python
00:02:00 - 00:02:03: now here you need to enter the username
00:02:02 - 00:02:04: password of your computer
00:02:03 - 00:02:08: so
00:02:04 - 00:02:08: let's do that real quick
00:02:08 - 00:02:13: next you need to install a code editor
00:02:11 - 00:02:15: we use a code editor to write our code
00:02:13 - 00:02:18: and execute it the most popular code
00:02:15 - 00:02:20: editor for python is pycharm you can get
00:02:18 - 00:02:21: it from jetbrains.com
00:02:20 - 00:02:23: pycharm
00:02:21 - 00:02:25: so on this page
00:02:23 - 00:02:27: click on download
00:02:25 - 00:02:29: you should see two different editions
00:02:27 - 00:02:31: one is the professional edition which is
00:02:29 - 00:02:33: commercial and we also have this
00:02:31 - 00:02:35: community edition which is free and open
00:02:33 - 00:02:37: source so we're going to download the
00:02:35 - 00:02:37: community edition
00:02:39 - 00:02:45: now in your downloads folder you should
00:02:41 - 00:02:45: have this package let's double click it
00:02:45 - 00:02:49: if you're on windows you're going to see
00:02:47 - 00:02:51: an installation wizard so simply click
00:02:49 - 00:02:53: on the next button until you install
00:02:51 - 00:02:56: pycharm if you're on a mac you need to
00:02:53 - 00:02:58: drag this pycharm and drop it onto the
00:02:56 - 00:02:58: applications folder
00:03:00 - 00:03:02: now
00:03:01 - 00:03:04: let's open it
00:03:02 - 00:03:06: the first time you open pycharm you have
00:03:04 - 00:03:09: to configure a few settings we don't
00:03:06 - 00:03:11: want to spend time on this so over here
00:03:09 - 00:03:14: we're going to click on skip remaining
00:03:11 - 00:03:16: and set defaults
00:03:14 - 00:03:18: now let's create a new project
00:03:16 - 00:03:22: over here we can specify the location
00:03:18 - 00:03:25: and the name of our python project so
00:03:22 - 00:03:26: let's append hello world to this path
00:03:25 - 00:03:29: this is where our python project is
00:03:26 - 00:03:32: going to be saved so let's click on
00:03:29 - 00:03:32: create
00:03:32 - 00:03:36: in this window you can see the content
00:03:34 - 00:03:38: of our project so here's our hello world
00:03:36 - 00:03:40: project currently we have only one
00:03:38 - 00:03:42: folder inside this project that is vn
00:03:40 - 00:03:44: which is short for virtual environment
00:03:42 - 00:03:46: we'll talk about virtual environments in
00:03:44 - 00:03:49: the future so currently we don't have
00:03:46 - 00:03:51: any python files inside this project a
00:03:49 - 00:03:53: real application can consist of tens or
00:03:51 - 00:03:55: hundreds or even thousands of python
00:03:53 - 00:03:57: files so let's right click on the
00:03:55 - 00:04:00: project name
00:03:57 - 00:04:03: and go to new python file we're going to
00:04:00 - 00:04:03: call this file up
00:04:04 - 00:04:08: now we can collapse this project window
00:04:05 - 00:04:10: by clicking on this icon so now we have
00:04:08 - 00:04:12: more space let's write our first python
00:04:10 - 00:04:15: code we're going to write print all in
00:04:12 - 00:04:18: lowercase then add parentheses
00:04:15 - 00:04:20: then add quotes either single quotes or
00:04:18 - 00:04:21: double quotes
00:04:20 - 00:04:23: and inside this code we're going to
00:04:21 - 00:04:25: write hello world
00:04:23 - 00:04:28: so this is what we call a string a
00:04:25 - 00:04:30: string means a string or sequence of
00:04:28 - 00:04:33: characters in simple words that means
00:04:30 - 00:04:35: textual data so in python and in many
00:04:33 - 00:04:37: other programming languages whenever
00:04:35 - 00:04:39: we're dealing with textual data we
00:04:37 - 00:04:40: should always surround our text with
00:04:39 - 00:04:42: quotes
00:04:40 - 00:04:43: in python we can use single or double
00:04:42 - 00:04:45: quotes
00:04:43 - 00:04:48: now this print you see here is a
00:04:45 - 00:04:49: function built into python and we can
00:04:48 - 00:04:52: use it to print a message on our
00:04:49 - 00:04:54: application window so let me show you
00:04:52 - 00:04:56: how to run this code
00:04:54 - 00:04:58: on the top we go to the run menu and
00:04:56 - 00:05:00: then select run
00:04:58 - 00:05:02: note that there is a shortcut associated
00:05:00 - 00:05:05: with this command i always use shortcuts
00:05:02 - 00:05:07: because they increase my productivity so
00:05:05 - 00:05:09: let's click on this
00:05:07 - 00:05:10: now select app
00:05:09 - 00:05:12: and over here
00:05:10 - 00:05:14: you can see this little window this is
00:05:12 - 00:05:16: what we call the terminal window and it
00:05:14 - 00:05:18: shows the output of our program
00:05:16 - 00:05:20: so here's the hello world message
00:05:18 - 00:05:22: printed in the terminal window now as
00:05:20 - 00:05:23: you learn more python you will learn how
00:05:22 - 00:05:25: to build applications that have a
00:05:23 - 00:05:27: graphical user interface that's an
00:05:25 - 00:05:30: advanced topic so for now let's not
00:05:27 - 00:05:30: worry about it
00:05:34 - 00:05:38: alright now let's talk about variables
00:05:36 - 00:05:41: we use variables to temporarily store
00:05:38 - 00:05:43: data in a computer's memory for example
00:05:41 - 00:05:46: we can store the price of a product or
00:05:43 - 00:05:48: someone's name their email their age and
00:05:46 - 00:05:50: so on let me show you so
00:05:48 - 00:05:54: to declare a variable we start by typing
00:05:50 - 00:05:56: a name for that variable let's say age
00:05:54 - 00:05:59: then we add an equal sign
00:05:56 - 00:06:01: and then we type a value let's say 20.
00:05:59 - 00:06:03: so with this we're storing the number 20
00:06:01 - 00:06:05: somewhere in our computer's memory and
00:06:03 - 00:06:08: we're attaching this age as a label for
00:06:05 - 00:06:10: that memory location so now we can read
00:06:08 - 00:06:13: the value at this memory location and
00:06:10 - 00:06:15: print it on the terminal so instead of
00:06:13 - 00:06:17: printing hello world we want to print
00:06:15 - 00:06:19: the value of the age variable
00:06:17 - 00:06:21: so i'm going to delete what we have
00:06:19 - 00:06:25: inside parenthesis
00:06:21 - 00:06:27: and type age note that i'm not adding
00:06:25 - 00:06:29: quotes because if i run this program
00:06:27 - 00:06:31: we'll see the text h on the terminal we
00:06:29 - 00:06:35: don't want that we want the value of the
00:06:31 - 00:06:36: age variable so let's remove the quote
00:06:35 - 00:06:38: and
00:06:36 - 00:06:41: print the value of the age variable
00:06:38 - 00:06:43: now here on the toolbar you can click on
00:06:41 - 00:06:44: this play icon to run your program or
00:06:43 - 00:06:47: you can use the shortcut that i showed
00:06:44 - 00:06:51: you in the last video so the shortcut is
00:06:47 - 00:06:52: over here on a mac that's ctrl shift and
00:06:51 - 00:06:53: r
00:06:52 - 00:06:54: so
00:06:53 - 00:06:56: there you go
00:06:54 - 00:06:58: now you can see the value of the age
00:06:56 - 00:06:59: variable
00:06:58 - 00:07:02: now we can also change the value of a
00:06:59 - 00:07:05: variable for example on line 2
00:07:02 - 00:07:07: we can set 8 to 30.
00:07:05 - 00:07:10: now when we run our program
00:07:07 - 00:07:12: we see 30. so as you can see our program
00:07:10 - 00:07:14: gets executed from top to bottom
00:07:12 - 00:07:16: so this is how we can declare and use a
00:07:14 - 00:07:17: variable now let's look at a few more
00:07:16 - 00:07:19: examples
00:07:17 - 00:07:21: so i'm going to declare
00:07:19 - 00:07:24: another variable called price
00:07:21 - 00:07:26: and set it to 19.95
00:07:24 - 00:07:28: so in python we can use numbers with a
00:07:26 - 00:07:31: decimal point or
00:07:28 - 00:07:35: whole numbers we can also declare a
00:07:31 - 00:07:38: variable and assign it a string value so
00:07:35 - 00:07:40: let's say first underline name so if you
00:07:38 - 00:07:42: want to use multiple words in the name
00:07:40 - 00:07:45: of a variable we should separate them
00:07:42 - 00:07:47: using an underscore this makes our code
00:07:45 - 00:07:49: more readable see what would happen if i
00:07:47 - 00:07:53: didn't use this underline
00:07:49 - 00:07:56: this is not easily readable so we always
00:07:53 - 00:07:58: separate multiple words by an underscore
00:07:56 - 00:08:00: now we set this to a string so we can
00:07:58 - 00:08:02: use single quotes or
00:08:00 - 00:08:04: double quotes let's say march
00:08:02 - 00:08:07: we also have a special type of value
00:08:04 - 00:08:09: called a boolean value which can be true
00:08:07 - 00:08:12: or false that is like yes or no in
00:08:09 - 00:08:15: english let me show you so i'm going to
00:08:12 - 00:08:18: declare another variable called is
00:08:15 - 00:08:21: online and set it to true
00:08:18 - 00:08:23: we could also set it to false what we
00:08:21 - 00:08:26: have here is called a boolean value
00:08:23 - 00:08:28: now note that python is a case sensitive
00:08:26 - 00:08:31: language so it's sensitive to lowercase
00:08:28 - 00:08:34: and uppercase letters in this case if i
00:08:31 - 00:08:35: use a lowercase f
00:08:34 - 00:08:38: we can see an error over here because
00:08:35 - 00:08:40: this is not recognized in python
00:08:38 - 00:08:43: so false with a capital f is a special
00:08:40 - 00:08:45: keyword in python that represents the
00:08:43 - 00:08:47: boolean false value
00:08:45 - 00:08:48: so this is how we can declare and use
00:08:47 - 00:08:50: variables in python
00:08:48 - 00:08:51: all right now here's a little exercise
00:08:50 - 00:08:52: for you
00:08:51 - 00:08:54: imagine we want to write a program for a
00:08:52 - 00:08:57: hospital so we're going to check in a
00:08:54 - 00:08:59: patient named john smith he's 20 years
00:08:57 - 00:09:02: old and is a new patient i want you to
00:08:59 - 00:09:04: declare a few variables to store these
00:09:02 - 00:09:08: values use the comment box below to
00:09:04 - 00:09:08: share your code with others
00:09:12 - 00:09:16: in this tutorial i'm going to show you
00:09:13 - 00:09:18: how to receive input from the user so in
00:09:16 - 00:09:21: python we have another built-in function
00:09:18 - 00:09:23: called input we use this to read a value
00:09:21 - 00:09:26: from the terminal window let me show you
00:09:23 - 00:09:27: so we add parenthesis
00:09:26 - 00:09:31: then we type in a string here we can
00:09:27 - 00:09:34: type a message like what is your name we
00:09:31 - 00:09:35: had a question mark followed by a space
00:09:34 - 00:09:39: you will see why we need this space in a
00:09:35 - 00:09:41: second so let's run this program
00:09:39 - 00:09:44: we get this message now we have to enter
00:09:41 - 00:09:45: a value so we click over here
00:09:44 - 00:09:47: now you can see that the carrot is
00:09:45 - 00:09:49: separated from the question mark this is
00:09:47 - 00:09:50: because of the white space that we added
00:09:49 - 00:09:53: over here
00:09:50 - 00:09:56: so now we have to type a value let's say
00:09:53 - 00:09:58: john when we press enter
00:09:56 - 00:10:01: this function will return the value that
00:09:58 - 00:10:02: we entered in the terminal window so we
00:10:01 - 00:10:05: can get that value and store it in a
00:10:02 - 00:10:08: variable so let's declare a variable
00:10:05 - 00:10:10: called name and set it to the return
00:10:08 - 00:10:12: value of the input function
00:10:10 - 00:10:16: now we can print a greeting message for
00:10:12 - 00:10:18: this user so we use the print function
00:10:16 - 00:10:19: we say hello
00:10:18 - 00:10:22: we had a space
00:10:19 - 00:10:25: now after the string we want to add the
00:10:22 - 00:10:26: value of the name variable so we use a
00:10:25 - 00:10:27: plus sign
00:10:26 - 00:10:30: and then type name
00:10:27 - 00:10:32: what we are doing here is called string
00:10:30 - 00:10:35: concatenation so we're combining this
00:10:32 - 00:10:36: string with another string
00:10:35 - 00:10:39: now let's run our program and see what
00:10:36 - 00:10:40: happens so what is your name
00:10:39 - 00:10:41: mosh
00:10:40 - 00:10:43: now
00:10:41 - 00:10:44: we get this message hello mosh
00:10:43 - 00:10:47: so this is how we can use the input
00:10:44 - 00:10:47: function in python
00:10:52 - 00:10:56: you'll learn about the three types of
00:10:53 - 00:10:59: data in python we have numbers
00:10:56 - 00:11:01: strings and booleans now there are times
00:10:59 - 00:11:03: you want to convert the value of a
00:11:01 - 00:11:05: variable from one type to another let me
00:11:03 - 00:11:06: show you so we're going to use our input
00:11:05 - 00:11:10: function
00:11:06 - 00:11:13: to read the user's birth year so enter
00:11:10 - 00:11:15: your birth here
00:11:13 - 00:11:17: now this input function is going to
00:11:15 - 00:11:19: return a value so we can store it in a
00:11:17 - 00:11:21: variable called
00:11:19 - 00:11:22: birth underline year
00:11:21 - 00:11:24: okay
00:11:22 - 00:11:26: now let's write code to calculate the
00:11:24 - 00:11:28: age of this user so we write an
00:11:26 - 00:11:32: expression like this currently we are in
00:11:28 - 00:11:34: the year 2020 so 2020 minus
00:11:32 - 00:11:35: birth year
00:11:34 - 00:11:37: this expression or piece of code is
00:11:35 - 00:11:40: going to produce a value so once again
00:11:37 - 00:11:43: we can store that value in a variable
00:11:40 - 00:11:44: let's call that variable age
00:11:43 - 00:11:46: now let's print age
00:11:44 - 00:11:47: on the terminal
00:11:46 - 00:11:49: let's run our program and see what
00:11:47 - 00:11:50: happens
00:11:49 - 00:11:52: so
00:11:50 - 00:11:55: my birth year is 1982.
00:11:52 - 00:11:57: enter oops our program crashed so
00:11:55 - 00:11:59: whenever you see this red message that
00:11:57 - 00:12:01: indicates an error so this error
00:11:59 - 00:12:05: occurred in this file
00:12:01 - 00:12:07: that is our app.pi on line two
00:12:05 - 00:12:09: right below that you can see the piece
00:12:07 - 00:12:12: of code that generated this error
00:12:09 - 00:12:14: so that is this expression 2020 minus
00:12:12 - 00:12:17: birth year now below that you can see
00:12:14 - 00:12:21: the type of error so here we have
00:12:17 - 00:12:22: unsupported types for subtraction
00:12:21 - 00:12:26: we have int
00:12:22 - 00:12:28: and stir what are these well this end is
00:12:26 - 00:12:31: short for integer and that represents a
00:12:28 - 00:12:34: whole number in programming so
00:12:31 - 00:12:37: 2020 is an example of an integer
00:12:34 - 00:12:39: now birth year is an example of a string
00:12:37 - 00:12:41: because whenever we call the input
00:12:39 - 00:12:44: function this function would return a
00:12:41 - 00:12:46: value as a string even if we enter a
00:12:44 - 00:12:50: number in other words when i entered
00:12:46 - 00:12:53: 1982 this input function returned a
00:12:50 - 00:12:56: string with these characters 1982 so
00:12:53 - 00:12:59: this string is different from the number
00:12:56 - 00:13:00: 1982 they're completely different types
00:12:59 - 00:13:02: so in this case
00:13:00 - 00:13:04: let me delete these lines
00:13:02 - 00:13:07: the reason we got this error is that we
00:13:04 - 00:13:10: try to subtract a string from an integer
00:13:07 - 00:13:12: so our code looks like this
00:13:10 - 00:13:14: 1982
00:13:12 - 00:13:16: now python doesn't know how to subtract
00:13:14 - 00:13:18: a string from an integer
00:13:16 - 00:13:20: so to solve this problem we need to
00:13:18 - 00:13:22: convert this string to an integer
00:13:20 - 00:13:24: now in python we have a bunch of
00:13:22 - 00:13:26: built-in functions for converting the
00:13:24 - 00:13:29: types of our variables so
00:13:26 - 00:13:31: we have this end function
00:13:29 - 00:13:33: we can pass our burst here to it
00:13:31 - 00:13:35: and this will return the new numeric
00:13:33 - 00:13:38: representation of the birth year
00:13:35 - 00:13:39: so to solve this problem
00:13:38 - 00:13:42: we need to replace
00:13:39 - 00:13:43: the string
00:13:42 - 00:13:45: with the end function
00:13:43 - 00:13:47: so let's see what's going on here on the
00:13:45 - 00:13:49: first line we call the input function
00:13:47 - 00:13:52: this returns a string
00:13:49 - 00:13:54: on the second line we pass the string to
00:13:52 - 00:13:56: our end function the in function will
00:13:54 - 00:13:58: return the numeric representation of the
00:13:56 - 00:13:59: burst year
00:13:58 - 00:14:02: then
00:13:59 - 00:14:04: we subtract it from 2020 we get the age
00:14:02 - 00:14:06: and store it in the age variable now
00:14:04 - 00:14:07: let's run our program
00:14:06 - 00:14:08: so
00:14:07 - 00:14:11: 1982
00:14:08 - 00:14:14: and there you go i'm 38 years old
00:14:11 - 00:14:16: so this is how the in function works now
00:14:14 - 00:14:19: we also have another built-in function
00:14:16 - 00:14:21: called float that is for converting a
00:14:19 - 00:14:23: value to a floating point number a
00:14:21 - 00:14:25: floating point number in python and
00:14:23 - 00:14:28: other programming languages is a number
00:14:25 - 00:14:31: with a decimal point so
00:14:28 - 00:14:35: 10 is an integer and 10.1 is a float
00:14:31 - 00:14:38: so we have int we have float and we also
00:14:35 - 00:14:39: have bool for converting a value to a
00:14:38 - 00:14:42: boolean
00:14:39 - 00:14:44: and finally we have stir for converting
00:14:42 - 00:14:46: a value to a string so these are the
00:14:44 - 00:14:48: built-in functions for converting the
00:14:46 - 00:14:50: type of our variables
00:14:48 - 00:14:52: now here's a little exercise for you i
00:14:50 - 00:14:54: want you to write a basic calculator
00:14:52 - 00:14:57: program so here we have to enter two
00:14:54 - 00:15:00: numbers we can type a whole number or a
00:14:57 - 00:15:02: number with a decimal point
00:15:00 - 00:15:03: and then our program will print the sum
00:15:02 - 00:15:05: of these two numbers
00:15:03 - 00:15:09: so pause the video spend two minutes on
00:15:05 - 00:15:09: this exercise and then see my solution
00:15:10 - 00:15:14: all right first we're going to call our
00:15:12 - 00:15:16: input function to read the first number
00:15:14 - 00:15:18: we get the result and store it in a
00:15:16 - 00:15:21: variable called first
00:15:18 - 00:15:24: now let's declare
00:15:21 - 00:15:26: another variable called second and read
00:15:24 - 00:15:27: the second number
00:15:26 - 00:15:29: now
00:15:27 - 00:15:32: we calculate the sum
00:15:29 - 00:15:34: so that is first plus second
00:15:32 - 00:15:36: now let's see what happens when we print
00:15:34 - 00:15:39: sum on the terminal
00:15:36 - 00:15:42: so i enter 10 and 20
00:15:39 - 00:15:44: but instead of 30 we get 10 20. this is
00:15:42 - 00:15:47: because we're combining or concatenating
00:15:44 - 00:15:49: two strings so
00:15:47 - 00:15:52: as i told you before the input function
00:15:49 - 00:15:55: returns a string so
00:15:52 - 00:15:57: this line will be equivalent to first
00:15:55 - 00:15:59: equals 10. we're dealing with a string
00:15:57 - 00:16:00: not an integer
00:15:59 - 00:16:02: similarly
00:16:00 - 00:16:05: second is going to be
00:16:02 - 00:16:09: 20 as a string so when we combine two
00:16:05 - 00:16:11: strings 10 plus 20 will get
00:16:09 - 00:16:16: 10 20 because we're dealing with textual
00:16:11 - 00:16:18: data okay so to solve this problem
00:16:16 - 00:16:20: we need to convert the values we read to
00:16:18 - 00:16:22: their numeric representation so over
00:16:20 - 00:16:24: here
00:16:22 - 00:16:26: we're going to pass
00:16:24 - 00:16:28: first to our int function
00:16:26 - 00:16:30: and here as well
00:16:28 - 00:16:34: now let's run our program
00:16:30 - 00:16:38: so we enter 10 and 20 we get 30. what if
00:16:34 - 00:16:40: we enter a floating point number so 10.1
00:16:38 - 00:16:41: and 20.
00:16:40 - 00:16:44: we got an error
00:16:41 - 00:16:46: so to solve this problem
00:16:44 - 00:16:49: we need to treat both these values as
00:16:46 - 00:16:52: floats so instead of the in function
00:16:49 - 00:16:55: we're going to use the float function
00:16:52 - 00:16:58: now let's run our program one more time
00:16:55 - 00:17:00: we enter a whole number and a floating
00:16:58 - 00:17:05: point number so the result is correct
00:17:00 - 00:17:06: now let's add a label over here so sum
00:17:05 - 00:17:08: is
00:17:06 - 00:17:09: plus sum
00:17:08 - 00:17:12: let's run our program
00:17:09 - 00:17:14: one more time 10 and 20.
00:17:12 - 00:17:17: once again we got an error the error is
00:17:14 - 00:17:21: saying that python can only concatenate
00:17:17 - 00:17:23: strings not floats to strings
00:17:21 - 00:17:26: so on line four we have a string we're
00:17:23 - 00:17:28: concatenating this with a float because
00:17:26 - 00:17:30: the result of this expression is a
00:17:28 - 00:17:33: floating point number we're adding two
00:17:30 - 00:17:36: floats so the result is a float as well
00:17:33 - 00:17:38: so python doesn't know how to evaluate
00:17:36 - 00:17:40: code like this
00:17:38 - 00:17:42: it doesn't know how to concatenate a
00:17:40 - 00:17:45: float
00:17:42 - 00:17:47: to a string to solve this problem
00:17:45 - 00:17:48: we need to convert sum to your string so
00:17:47 - 00:17:51: this is where
00:17:48 - 00:17:54: we use the stir function
00:17:51 - 00:17:58: now let's run the program again so
00:17:54 - 00:17:59: 10 plus 20.1 and here's the result
00:17:58 - 00:18:01: and one last thing
00:17:59 - 00:18:03: in this example i'm calling the float
00:18:01 - 00:18:05: function at the time we want to
00:18:03 - 00:18:07: calculate the sum of these two numbers
00:18:05 - 00:18:09: but this is not a requirement we can
00:18:07 - 00:18:12: call the float function
00:18:09 - 00:18:14: over here so this input function returns
00:18:12 - 00:18:17: a string we can pass that string to our
00:18:14 - 00:18:20: float function take a look so float
00:18:17 - 00:18:22: parenthesis like this
00:18:20 - 00:18:24: so the value that we're passing to the
00:18:22 - 00:18:26: float function is the value that is
00:18:24 - 00:18:29: returned from the input function
00:18:26 - 00:18:32: similarly
00:18:29 - 00:18:33: we call the float function over here
00:18:32 - 00:18:35: now
00:18:33 - 00:18:38: we can change this expression to first
00:18:35 - 00:18:40: plus second that is another way to write
00:18:38 - 00:18:41: this piece of code
00:18:40 - 00:18:44: so type conversion is important in
00:18:41 - 00:18:45: python and other programming languages
00:18:44 - 00:18:49: there are times you need to convert the
00:18:45 - 00:18:49: type of variable to a different type
00:18:53 - 00:18:56: in this tutorial i'm going to show you a
00:18:55 - 00:18:59: bunch of cool things you can do with
00:18:56 - 00:19:01: strings in python so let's start by
00:18:59 - 00:19:04: declaring a variable called course
00:19:01 - 00:19:06: and set it to python for
00:19:04 - 00:19:07: beginners
00:19:06 - 00:19:10: now this string that we have over here
00:19:07 - 00:19:12: is technically an object an object in
00:19:10 - 00:19:14: python is like an object in the real
00:19:12 - 00:19:16: world as a metaphor think of the remote
00:19:14 - 00:19:18: control of your tv this remote control
00:19:16 - 00:19:20: is an object and it has a bunch of
00:19:18 - 00:19:23: capabilities it has a bunch of buttons
00:19:20 - 00:19:25: for turning your tv on turning it off
00:19:23 - 00:19:27: changing the volume and so on now in
00:19:25 - 00:19:29: this program this course variable is
00:19:27 - 00:19:31: storing a string object this string
00:19:29 - 00:19:32: object has a bunch of capabilities so if
00:19:31 - 00:19:35: we type
00:19:32 - 00:19:37: course dot you can see all the
00:19:35 - 00:19:39: capabilities available in a string
00:19:37 - 00:19:41: object these are basically functions
00:19:39 - 00:19:43: that you can call just like the print or
00:19:41 - 00:19:45: input functions the difference is that
00:19:43 - 00:19:47: the print and input functions are
00:19:45 - 00:19:49: general purpose functions they don't
00:19:47 - 00:19:51: belong to a particular object but the
00:19:49 - 00:19:54: functions you see over here are specific
00:19:51 - 00:19:56: to strings now more accurately we refer
00:19:54 - 00:19:59: to these as methods so when a function
00:19:56 - 00:20:00: is part of an object we refer to that
00:19:59 - 00:20:03: function as a method
00:20:00 - 00:20:06: so let's look at a few examples here we
00:20:03 - 00:20:07: have a function or a method called upper
00:20:06 - 00:20:10: and we use that to convert a string to
00:20:07 - 00:20:12: uppercase so if we print
00:20:10 - 00:20:14: course.upper
00:20:12 - 00:20:16: and run this program they can see our
00:20:14 - 00:20:17: course in uppercase
00:20:16 - 00:20:19: pretty useful
00:20:17 - 00:20:21: now what you need to understand here is
00:20:19 - 00:20:24: that this upper method does not change
00:20:21 - 00:20:27: our original string it will return a new
00:20:24 - 00:20:29: string so right after this if we print
00:20:27 - 00:20:31: course
00:20:29 - 00:20:34: you can see that our course variable is
00:20:31 - 00:20:36: not affected so the upper method returns
00:20:34 - 00:20:38: a new string
00:20:36 - 00:20:40: now similarly we have another method
00:20:38 - 00:20:43: called lower for converting a string to
00:20:40 - 00:20:45: lowercase we have a method called find
00:20:43 - 00:20:47: to see if our string contains a
00:20:45 - 00:20:50: character or a sequence of characters
00:20:47 - 00:20:50: for example here we can pass
00:20:50 - 00:20:53: y
00:20:50 - 00:20:57: and this will return the index of the
00:20:53 - 00:20:59: first occurrence of y in our string so
00:20:57 - 00:21:01: in python the index of the first
00:20:59 - 00:21:04: character in a string is 0. so here we
00:21:01 - 00:21:06: have 0 1 2 3 4 and so on so when we run
00:21:04 - 00:21:09: this program you're going to see one on
00:21:06 - 00:21:11: the terminal because the index of y is
00:21:09 - 00:21:14: 1. take a look first i'm going to delete
00:21:11 - 00:21:17: this line we don't need it anymore also
00:21:14 - 00:21:20: let's do this line let's run the program
00:21:17 - 00:21:20: there you go
00:21:20 - 00:21:24: now as i told you before python is
00:21:21 - 00:21:28: sensitive to lowercase and uppercase
00:21:24 - 00:21:31: letters so if i pass an uppercase y here
00:21:28 - 00:21:32: this find method returns negative 1
00:21:31 - 00:21:35: because we don't have an uppercase y in
00:21:32 - 00:21:38: this string we can also pass a sequence
00:21:35 - 00:21:41: of characters for example 4. so this
00:21:38 - 00:21:43: will return the index of the word 4.
00:21:41 - 00:21:44: take a look
00:21:43 - 00:21:46: so it's 7.
00:21:44 - 00:21:47: now there are times we want to replace
00:21:46 - 00:21:48: something in a string with something
00:21:47 - 00:21:51: else
00:21:48 - 00:21:52: to do that we use the replace method
00:21:51 - 00:21:54: replace
00:21:52 - 00:21:55: so we can replace 4
00:21:54 - 00:21:58: with
00:21:55 - 00:21:59: a string containing the number 4. take a
00:21:58 - 00:22:02: look
00:21:59 - 00:22:03: so python for beginners
00:22:02 - 00:22:04: obviously
00:22:03 - 00:22:06: if you look for a character or a
00:22:04 - 00:22:08: sequence of characters that don't exist
00:22:06 - 00:22:11: in our string nothing is going to happen
00:22:08 - 00:22:14: for example if we try to replace x with
00:22:11 - 00:22:16: 4 obviously we don't have x here so
00:22:14 - 00:22:18: nothing is going to happen
00:22:16 - 00:22:21: also just like the upper method the
00:22:18 - 00:22:22: replace method is not going to modify
00:22:21 - 00:22:25: our original string so it's going to
00:22:22 - 00:22:27: return a new string this is because
00:22:25 - 00:22:29: strings in python and many other
00:22:27 - 00:22:31: programming languages are immutable we
00:22:29 - 00:22:33: cannot change them once we create them
00:22:31 - 00:22:35: whenever we want to change your string
00:22:33 - 00:22:36: we'll end up with a new string object in
00:22:35 - 00:22:37: memory
00:22:36 - 00:22:39: now one last thing i want to cover in
00:22:37 - 00:22:41: this tutorial there are times you want
00:22:39 - 00:22:43: to see if your string contains a
00:22:41 - 00:22:45: character or a sequence of characters
00:22:43 - 00:22:48: one way to do that is using the find
00:22:45 - 00:22:50: method that we talked about so let's see
00:22:48 - 00:22:52: if our string
00:22:50 - 00:22:54: contains python
00:22:52 - 00:22:56: now when we run this program
00:22:54 - 00:22:58: that is the index of the first
00:22:56 - 00:23:01: occurrence of the word python in our
00:22:58 - 00:23:03: string now in python we can also use the
00:23:01 - 00:23:05: in operator so we can write an
00:23:03 - 00:23:07: expression like this
00:23:05 - 00:23:10: we type a string
00:23:07 - 00:23:13: python then we type in this is a special
00:23:10 - 00:23:15: keyword in python this is what we call
00:23:13 - 00:23:17: the in operator
00:23:15 - 00:23:18: so after that we type the name of our
00:23:17 - 00:23:20: variable
00:23:18 - 00:23:23: so with this expression we're checking
00:23:20 - 00:23:25: to see if we have python in course as
00:23:23 - 00:23:28: you can see python code is very readable
00:23:25 - 00:23:29: it's like plain english so when we run
00:23:28 - 00:23:31: this program
00:23:29 - 00:23:34: instead of seeing the index of the first
00:23:31 - 00:23:36: occurrence of python we see a boolean
00:23:34 - 00:23:37: value this is more desirable in a lot of
00:23:36 - 00:23:38: cases
00:23:37 - 00:23:41: next we're going to look at arithmetic
00:23:38 - 00:23:41: operations
00:23:45 - 00:23:49: in this tutorial i'm going to show you
00:23:47 - 00:23:51: the arithmetic operators that we have in
00:23:49 - 00:23:53: python these are the same arithmetic
00:23:51 - 00:23:55: operators that we have in math for
00:23:53 - 00:23:57: example we can add numbers we can
00:23:55 - 00:23:58: subtract them multiply them and so on so
00:23:57 - 00:24:02: let's print
00:23:58 - 00:24:03: 10 plus 3. let me run this program we
00:24:02 - 00:24:06: have 13.
00:24:03 - 00:24:07: so this is the addition operator we also
00:24:06 - 00:24:09: have subtraction
00:24:07 - 00:24:12: we have multiplication
00:24:09 - 00:24:14: and division now technically we have two
00:24:12 - 00:24:16: different types of division operators we
00:24:14 - 00:24:18: have a division with one slash and
00:24:16 - 00:24:20: another with two slashes let's look at
00:24:18 - 00:24:22: the differences if you use a single
00:24:20 - 00:24:24: slash
00:24:22 - 00:24:26: we get a floating point number that is a
00:24:24 - 00:24:28: number with a decimal point but if we
00:24:26 - 00:24:29: use double slashes
00:24:28 - 00:24:33: we get
00:24:29 - 00:24:35: an integer a whole number we also have
00:24:33 - 00:24:38: the modulus operator that is indicated
00:24:35 - 00:24:40: by a percent sign and this returns the
00:24:38 - 00:24:41: remainder of the division of ten by
00:24:40 - 00:24:44: three so
00:24:41 - 00:24:46: that is one and finally we have the
00:24:44 - 00:24:49: exponent operator that is indicated by
00:24:46 - 00:24:52: two asterisks so this is 10 to the power
00:24:49 - 00:24:54: of three so when we run this we get a
00:24:52 - 00:24:56: thousand
00:24:54 - 00:24:59: now for all these operators that you saw
00:24:56 - 00:25:01: we have an augmented assignment operator
00:24:59 - 00:25:03: let me explain what it means so let's
00:25:01 - 00:25:05: say we have a variable called x
00:25:03 - 00:25:07: and we set it to 10.
00:25:05 - 00:25:10: now we want to increment the value of x
00:25:07 - 00:25:10: by 3. so we have to write code like this
00:25:10 - 00:25:14: x
00:25:10 - 00:25:16: equals x plus 3. when python executes
00:25:14 - 00:25:18: this code it's going to evaluate this
00:25:16 - 00:25:20: expression or this piece of code the
00:25:18 - 00:25:23: result of this expression is 10 plus 3
00:25:20 - 00:25:24: which is 13. then it will store 13 in
00:25:23 - 00:25:26: the x
00:25:24 - 00:25:29: now there is another way to achieve the
00:25:26 - 00:25:32: same result using less code we can type
00:25:29 - 00:25:34: x plus equal three
00:25:32 - 00:25:36: what we have on line three is exactly
00:25:34 - 00:25:38: identical to what we have on line two so
00:25:36 - 00:25:41: what we have here is called the
00:25:38 - 00:25:43: augmented assignment operator so we have
00:25:41 - 00:25:46: this assignment operator but we have
00:25:43 - 00:25:48: augmented or enhanced it
00:25:46 - 00:25:50: now here we can also use
00:25:48 - 00:25:54: subtraction to decrease the value of x
00:25:50 - 00:25:56: by 3 we can use multiplication and so on
00:25:54 - 00:25:58: so these are the arithmetic operators in
00:25:56 - 00:25:58: python
00:26:03 - 00:26:07: all right let me ask you a question i'm
00:26:04 - 00:26:10: going to declare a variable called x and
00:26:07 - 00:26:12: set it to 10 plus 3 times 2. what do you
00:26:10 - 00:26:14: think is the result of this expression
00:26:12 - 00:26:16: this is a basic math question that
00:26:14 - 00:26:17: unfortunately a lot of people fail to
00:26:16 - 00:26:20: answer
00:26:17 - 00:26:22: the answer is 16. here's the reason in
00:26:20 - 00:26:24: math we have this concept called
00:26:22 - 00:26:26: operator precedence and that determines
00:26:24 - 00:26:30: the order in which these operators are
00:26:26 - 00:26:32: applied so multiplication and division
00:26:30 - 00:26:34: have a higher order so this part of the
00:26:32 - 00:26:36: expression gets evaluated first so 2
00:26:34 - 00:26:39: times 3 is 6
00:26:36 - 00:26:40: and then the result is added to 10. that
00:26:39 - 00:26:44: is why the result of this expression is
00:26:40 - 00:26:46: 16. now in python operator precedence is
00:26:44 - 00:26:48: exactly like math but we can always
00:26:46 - 00:26:51: change it using parenthesis for example
00:26:48 - 00:26:53: in this expression if you want 10 plus 3
00:26:51 - 00:26:55: to be evaluated first we can wrap it in
00:26:53 - 00:26:56: parenthesis
00:26:55 - 00:26:59: so
00:26:56 - 00:27:02: like this now when we execute this code
00:26:59 - 00:27:05: we're going to see 26 because 10 plus 3
00:27:02 - 00:27:08: is 13 and that divided by 2 is 26. let's
00:27:05 - 00:27:11: verify this so print x
00:27:08 - 00:27:11: and we get 26.
00:27:15 - 00:27:19: so you learn about the arithmetic
00:27:17 - 00:27:21: operators in python now in python we
00:27:19 - 00:27:24: have another set of operators called
00:27:21 - 00:27:26: comparison operators we use these
00:27:24 - 00:27:28: operators to compare values let me show
00:27:26 - 00:27:29: you so i'm going to declare a variable
00:27:28 - 00:27:32: called x
00:27:29 - 00:27:35: and set it to an expression like this 3
00:27:32 - 00:27:37: is greater than 2. so what we have here
00:27:35 - 00:27:39: this piece of code this expression is
00:27:37 - 00:27:42: called a boolean expression because it
00:27:39 - 00:27:44: produces a boolean value so in this case
00:27:42 - 00:27:47: because 3 is greater than 2 the result
00:27:44 - 00:27:51: of this expression is the boolean true
00:27:47 - 00:27:53: so if we print x
00:27:51 - 00:27:55: we get true on the terminal
00:27:53 - 00:27:58: so here is the greater than operator we
00:27:55 - 00:28:01: also have greater than or equal to we
00:27:58 - 00:28:02: have less than we have less than or
00:28:01 - 00:28:04: equal to
00:28:02 - 00:28:06: here is the equality operator which is
00:28:04 - 00:28:08: indicated by two equal signs do not
00:28:06 - 00:28:11: confuse this with the assignment
00:28:08 - 00:28:13: operator so here we're comparing three
00:28:11 - 00:28:15: and two for equality so if we run our
00:28:13 - 00:28:17: program
00:28:15 - 00:28:19: we see false because 3
00:28:17 - 00:28:21: does not equal to 2.
00:28:19 - 00:28:22: so here's the equality operator we also
00:28:21 - 00:28:24: have
00:28:22 - 00:28:26: the not equality operator that is
00:28:24 - 00:28:28: indicated by an exclamation mark
00:28:26 - 00:28:30: followed by an equal sign
00:28:28 - 00:28:32: so let's quickly recap
00:28:30 - 00:28:35: here are the comparison operators we
00:28:32 - 00:28:38: have in python greater than greater than
00:28:35 - 00:28:39: or equal to less than less than or equal
00:28:38 - 00:28:41: to
00:28:39 - 00:28:43: equal and not equal
00:28:41 - 00:28:45: these operators are extremely important
00:28:43 - 00:28:47: in real python programs because quite
00:28:45 - 00:28:49: often we have to compare values to
00:28:47 - 00:28:51: evaluate certain conditions you're going
00:28:49 - 00:28:51: to see that soon
00:28:56 - 00:29:00: in python we have another set of
00:28:58 - 00:29:02: operators called logical operators we
00:29:00 - 00:29:05: use these operators to build complex
00:29:02 - 00:29:06: rules and conditions let me show you so
00:29:05 - 00:29:09: i'm going to declare a variable called
00:29:06 - 00:29:10: price and set it to 25.
00:29:09 - 00:29:12: now let's print
00:29:10 - 00:29:15: a boolean expression like this
00:29:12 - 00:29:17: price is greater than 10.
00:29:15 - 00:29:20: now let's say we want to check to see if
00:29:17 - 00:29:23: the price is between 10 and 30. this is
00:29:20 - 00:29:26: where we use the logical and operator so
00:29:23 - 00:29:29: we type and and right after that we type
00:29:26 - 00:29:33: another boolean expression surprise less
00:29:29 - 00:29:35: than 30. so with this and operator if
00:29:33 - 00:29:37: both these boolean expressions return
00:29:35 - 00:29:41: true the result of this entire
00:29:37 - 00:29:43: expression will be true take a look so
00:29:41 - 00:29:45: in this case we get true
00:29:43 - 00:29:46: because the price is between 10 and 30
00:29:45 - 00:29:48: dollars
00:29:46 - 00:29:49: we also have
00:29:48 - 00:29:52: the or operator
00:29:49 - 00:29:54: with the or operator if at least one of
00:29:52 - 00:29:56: these boolean expressions returns true
00:29:54 - 00:29:57: then the result of this entire
00:29:56 - 00:29:59: expression will be true
00:29:57 - 00:30:02: to demonstrate this i'm going to change
00:29:59 - 00:30:04: price to 5. let's see how python is
00:30:02 - 00:30:06: going to execute this code so first it's
00:30:04 - 00:30:10: going to look at this boolean expression
00:30:06 - 00:30:11: is price greater than 10 no it's not so
00:30:10 - 00:30:13: it will keep going
00:30:11 - 00:30:16: then it will look at the second boolean
00:30:13 - 00:30:18: expression is price less than 30 it sure
00:30:16 - 00:30:22: is so the result of this entire
00:30:18 - 00:30:23: expression will be true take a look
00:30:22 - 00:30:25: there you go
00:30:23 - 00:30:27: we also have the not operator which
00:30:25 - 00:30:30: basically inverses any values that you
00:30:27 - 00:30:32: give it let me show you so
00:30:30 - 00:30:34: we're going to have one boolean
00:30:32 - 00:30:37: expression price greater than 10. the
00:30:34 - 00:30:40: result of this expression is false
00:30:37 - 00:30:43: now if you apply the not operator
00:30:40 - 00:30:46: this will inverse false to true so when
00:30:43 - 00:30:48: we run the program we get true
00:30:46 - 00:30:51: so let's quickly recap in python we have
00:30:48 - 00:30:53: three logical operators we have logical
00:30:51 - 00:30:55: and which returns true if both
00:30:53 - 00:30:57: expressions return true
00:30:55 - 00:31:00: we have logical or which returns true if
00:30:57 - 00:31:03: at least one expression returns true and
00:31:00 - 00:31:05: we have not which inverses any value
00:31:03 - 00:31:05: that we give it
00:31:10 - 00:31:14: in this tutorial we're going to talk
00:31:11 - 00:31:15: about if statements in python we use if
00:31:14 - 00:31:18: statements to make decisions in our
00:31:15 - 00:31:19: programs for example we can declare a
00:31:18 - 00:31:21: variable called temperature and
00:31:19 - 00:31:23: depending on the value of this variable
00:31:21 - 00:31:25: we can print different messages on the
00:31:23 - 00:31:27: terminal let me show you
00:31:25 - 00:31:29: so here's our temperature variable
00:31:27 - 00:31:32: we set it to 35.
00:31:29 - 00:31:34: now let's say if temperature is greater
00:31:32 - 00:31:37: than 30 we want to print a message
00:31:34 - 00:31:39: saying it's a hot day so we type if
00:31:37 - 00:31:42: then we type a condition and this is
00:31:39 - 00:31:44: where we use our comparison operators so
00:31:42 - 00:31:46: we type temperature
00:31:44 - 00:31:48: greater than 30.
00:31:46 - 00:31:51: then so we add a colon and see what
00:31:48 - 00:31:53: happens when i press enter now
00:31:51 - 00:31:56: the character is indented and this
00:31:53 - 00:31:58: represents a block of code so the code
00:31:56 - 00:32:00: that we write over here will be executed
00:31:58 - 00:32:03: if this condition is true otherwise it's
00:32:00 - 00:32:04: not going to be executed let me show you
00:32:03 - 00:32:06: so
00:32:04 - 00:32:08: we're going to print
00:32:06 - 00:32:09: it's a hot day
00:32:08 - 00:32:12: and by the way note that here i've
00:32:09 - 00:32:15: surrounded the string with double quotes
00:32:12 - 00:32:17: because here we have a single quote as
00:32:15 - 00:32:20: an apostrophe so i couldn't declare a
00:32:17 - 00:32:22: string like this with single quotes if i
00:32:20 - 00:32:25: typed it's a hot day
00:32:22 - 00:32:27: look python gets confused because it
00:32:25 - 00:32:29: thinks this single code represents the
00:32:27 - 00:32:32: end of our string so it doesn't
00:32:29 - 00:32:34: recognize the subsequent characters okay
00:32:32 - 00:32:36: so that's why we use
00:32:34 - 00:32:38: double quotes here
00:32:36 - 00:32:39: so we can have an apostrophe in our
00:32:38 - 00:32:41: string
00:32:39 - 00:32:43: so it's a hot day
00:32:41 - 00:32:46: now if i press enter again
00:32:43 - 00:32:48: the carrot is indented so the code that
00:32:46 - 00:32:50: right here will be part of our if block
00:32:48 - 00:32:53: and it will get executed if this
00:32:50 - 00:32:57: condition is true so here we can print
00:32:53 - 00:32:59: a second message drink plenty of water
00:32:57 - 00:33:02: now to terminate this block we press
00:32:59 - 00:33:05: enter and then press shift and tab
00:33:02 - 00:33:07: the carrot is no longer indented so the
00:33:05 - 00:33:09: code that we write here will always get
00:33:07 - 00:33:11: executed no matter what whether this
00:33:09 - 00:33:13: condition is true or not
00:33:11 - 00:33:17: now in c based programming languages
00:33:13 - 00:33:19: like c plus c sharp java and javascript
00:33:17 - 00:33:21: we present a block of code using curly
00:33:19 - 00:33:23: braces so
00:33:21 - 00:33:24: you start a block of code using a left
00:33:23 - 00:33:27: brace
00:33:24 - 00:33:29: and then end it using a right brace in
00:33:27 - 00:33:31: python we don't have curly braces so we
00:33:29 - 00:33:33: use indentation to represent a block of
00:33:31 - 00:33:34: code okay
00:33:33 - 00:33:35: so
00:33:34 - 00:33:37: in this case
00:33:35 - 00:33:40: these two lines are indented and that
00:33:37 - 00:33:40: means they are part of this block of
00:33:40 - 00:33:42: code
00:33:40 - 00:33:44: now let's run the program and see what
00:33:42 - 00:33:46: happens
00:33:44 - 00:33:48: so we see these two messages because the
00:33:46 - 00:33:49: temperature is greater than 30.
00:33:48 - 00:33:52: now
00:33:49 - 00:33:54: if i change the temperature to 25
00:33:52 - 00:33:57: and run the program again we don't see
00:33:54 - 00:33:57: anything okay
00:33:57 - 00:34:00: now
00:33:57 - 00:34:01: after this block let's print
00:34:00 - 00:34:03: done
00:34:01 - 00:34:05: because this code is not indented it
00:34:03 - 00:34:09: will always get executed it's not part
00:34:05 - 00:34:11: of our if block okay so take a look
00:34:09 - 00:34:11: here's the down message
00:34:11 - 00:34:14: now
00:34:11 - 00:34:17: let's add a second condition so if
00:34:14 - 00:34:20: temperature is not greater than 30 that
00:34:17 - 00:34:23: means it's less than or equal to 30. so
00:34:20 - 00:34:25: i'm gonna add a second condition so if
00:34:23 - 00:34:28: the temperature is between 20 and 30 i
00:34:25 - 00:34:30: want to print it's a nice day
00:34:28 - 00:34:32: so here we type l if
00:34:30 - 00:34:35: that is short for else if
00:34:32 - 00:34:39: and here we type a second condition
00:34:35 - 00:34:42: so temperature greater than 20.
00:34:39 - 00:34:43: we add a colon press enter now we have a
00:34:42 - 00:34:45: new block
00:34:43 - 00:34:48: so here we can print
00:34:45 - 00:34:50: it's a nice day
00:34:48 - 00:34:52: so if this condition is true that means
00:34:50 - 00:34:54: the temperature
00:34:52 - 00:34:57: is greater than 20 and less than or
00:34:54 - 00:34:59: equal to 30. now what we have here is
00:34:57 - 00:35:01: called a comment that is why it's grayed
00:34:59 - 00:35:03: out it's not real code it's just some
00:35:01 - 00:35:06: note that we add to our program python
00:35:03 - 00:35:08: is not going to execute this so whenever
00:35:06 - 00:35:11: we type a pound sign what we have after
00:35:08 - 00:35:12: is treated as a comment okay
00:35:11 - 00:35:14: so
00:35:12 - 00:35:15: if this condition is true then we're
00:35:14 - 00:35:17: going to see this message on the
00:35:15 - 00:35:19: terminal let's run our program and
00:35:17 - 00:35:21: verify this
00:35:19 - 00:35:23: there you go the temperature is 25
00:35:21 - 00:35:25: that's why we see this message
00:35:23 - 00:35:28: now we can have as many conditions as we
00:35:25 - 00:35:30: want there are no limitations okay
00:35:28 - 00:35:31: so let's add another condition
00:35:30 - 00:35:34: l if
00:35:31 - 00:35:35: temperature is greater than 10
00:35:34 - 00:35:37: then
00:35:35 - 00:35:39: we're going to print
00:35:37 - 00:35:41: it's a bit cold
00:35:39 - 00:35:44: now in this case if this condition is
00:35:41 - 00:35:45: true that means the temperature is
00:35:44 - 00:35:48: greater than 10
00:35:45 - 00:35:49: and less than or equal to 20.
00:35:48 - 00:35:51: now finally if the temperature is less
00:35:49 - 00:35:53: than 10 let's print a message saying
00:35:51 - 00:35:54: it's a cold day
00:35:53 - 00:35:57: so
00:35:54 - 00:35:59: here we type else then we add a colon
00:35:57 - 00:36:02: and now we have a new block
00:35:59 - 00:36:04: so this code will get executed if none
00:36:02 - 00:36:07: of the above conditions are true
00:36:04 - 00:36:07: so here we can print
00:36:07 - 00:36:12: it's called
00:36:10 - 00:36:15: so this is how we use if statements to
00:36:12 - 00:36:15: make decisions in our programs
00:36:20 - 00:36:23: here's a great exercise for you to
00:36:21 - 00:36:25: practice what you have learned so far i
00:36:23 - 00:36:27: want you to write a weight converter
00:36:25 - 00:36:29: program like this
00:36:27 - 00:36:31: so this program is asking me my weight i
00:36:29 - 00:36:34: enter 170.
00:36:31 - 00:36:37: next it's asking me if the weight is in
00:36:34 - 00:36:40: kilograms or pounds so i can type k for
00:36:37 - 00:36:42: kilograms or l for pounds i can type a
00:36:40 - 00:36:46: lowercase l or an uppercase l it doesn't
00:36:42 - 00:36:49: matter so let's go with a lowercase l
00:36:46 - 00:36:51: now it tells me weight in kilogram is
00:36:49 - 00:36:52: 76.5
00:36:51 - 00:36:54: so go ahead and spend 5 minutes on this
00:36:52 - 00:36:57: exercise you can use the comment box
00:36:54 - 00:36:58: below to share your code with others and
00:36:57 - 00:37:00: then when you're done come back see my
00:36:58 - 00:37:00: solution
00:37:02 - 00:37:06: so first we call our input function to
00:37:05 - 00:37:09: ask the first question
00:37:06 - 00:37:12: wait we get the result and store it in a
00:37:09 - 00:37:14: variable called weight
00:37:12 - 00:37:16: next we call the input function one more
00:37:14 - 00:37:18: time to ask the second question
00:37:16 - 00:37:20: is this in kilogram
00:37:18 - 00:37:20: or
00:37:20 - 00:37:25: pounds we get the result and store it in
00:37:23 - 00:37:27: a variable called unit
00:37:25 - 00:37:28: this is where we're going to use an if
00:37:27 - 00:37:29: statement
00:37:28 - 00:37:31: so
00:37:29 - 00:37:32: we want to check to see if unit
00:37:31 - 00:37:34: equals
00:37:32 - 00:37:36: k
00:37:34 - 00:37:38: then we should convert the weight to
00:37:36 - 00:37:39: pounds and print it on a terminal
00:37:38 - 00:37:41: however
00:37:39 - 00:37:43: with this code if i type a lowercase k
00:37:41 - 00:37:45: this condition is not going to be true
00:37:43 - 00:37:47: because earlier i told you that python
00:37:45 - 00:37:48: is a case sensitive language
00:37:47 - 00:37:50: so
00:37:48 - 00:37:52: we need to convert this string to
00:37:50 - 00:37:55: uppercase earlier we talked about string
00:37:52 - 00:37:57: methods so if we type dot we can see all
00:37:55 - 00:38:01: the functions or methods available in a
00:37:57 - 00:38:04: string object so we use the upper method
00:38:01 - 00:38:06: and this returns a new string in case
00:38:04 - 00:38:08: now if this condition is true first we
00:38:06 - 00:38:10: need to convert the weight to pounds so
00:38:08 - 00:38:12: we declare a new variable called
00:38:10 - 00:38:17: converted
00:38:12 - 00:38:19: get the weight and divide it by 0.45
00:38:17 - 00:38:21: and then we can print this on a terminal
00:38:19 - 00:38:22: so
00:38:21 - 00:38:24: we say weight
00:38:22 - 00:38:27: in pounds is
00:38:24 - 00:38:29: then we append converted
00:38:27 - 00:38:31: now to terminate this block we press
00:38:29 - 00:38:33: shift and tab
00:38:31 - 00:38:35: else colon
00:38:33 - 00:38:37: so if this condition is not true that
00:38:35 - 00:38:39: means the weight was entered in pounds
00:38:37 - 00:38:41: so we need to convert it to kilograms
00:38:39 - 00:38:45: once again we declare a variable
00:38:41 - 00:38:47: converted and set it to weight times
00:38:45 - 00:38:49: 0.45
00:38:47 - 00:38:52: and then we print
00:38:49 - 00:38:54: weight in kilograms
00:38:52 - 00:38:57: and here we concatenate
00:38:54 - 00:38:59: this string with converter all right now
00:38:57 - 00:39:02: we need to terminate this block so we
00:38:59 - 00:39:04: press enter then shift and tab good
00:39:02 - 00:39:06: now if we run this program we're going
00:39:04 - 00:39:07: to see an error let me show you so let's
00:39:06 - 00:39:10: run it
00:39:07 - 00:39:13: here i'm going to enter 170
00:39:10 - 00:39:15: then i type a lowercase l
00:39:13 - 00:39:17: okay here's an error
00:39:15 - 00:39:21: can't multiply sequence by non-end of
00:39:17 - 00:39:23: type float so this is where we got this
00:39:21 - 00:39:26: error when we try to multiply the weight
00:39:23 - 00:39:27: by 0.45
00:39:26 - 00:39:29: so
00:39:27 - 00:39:31: that is line seven in our code now the
00:39:29 - 00:39:34: reason this is happening is because the
00:39:31 - 00:39:36: wait variable is storing a string object
00:39:34 - 00:39:39: because earlier i told you the input
00:39:36 - 00:39:41: function always returns a string so here
00:39:39 - 00:39:44: we need to convert the weight
00:39:41 - 00:39:46: to a number we can either use the end or
00:39:44 - 00:39:48: the float function
00:39:46 - 00:39:49: let's run the program one more time
00:39:48 - 00:39:52: so
00:39:49 - 00:39:53: 170
00:39:52 - 00:39:55: in pounds
00:39:53 - 00:39:59: here's the second error can only
00:39:55 - 00:40:01: concatenate string not float to string
00:39:59 - 00:40:02: and that error occurred
00:40:01 - 00:40:04: over here
00:40:02 - 00:40:06: when we try to print the weight in
00:40:04 - 00:40:07: kilograms so
00:40:06 - 00:40:10: look at line seven
00:40:07 - 00:40:12: in this case weight as an integer we are
00:40:10 - 00:40:14: multiplying an integer by a float and
00:40:12 - 00:40:16: the result of this operation is going to
00:40:14 - 00:40:18: be a float
00:40:16 - 00:40:21: now on line eight we are trying to
00:40:18 - 00:40:23: concatenate or combine a string with a
00:40:21 - 00:40:24: float and python doesn't know how to
00:40:23 - 00:40:26: execute this code
00:40:24 - 00:40:29: to solve this problem we need to convert
00:40:26 - 00:40:32: this flow to a string so here we use the
00:40:29 - 00:40:33: built-in stir function
00:40:32 - 00:40:34: let's run the program and see what
00:40:33 - 00:40:36: happens
00:40:34 - 00:40:40: so
00:40:36 - 00:40:42: 170 in pounds and here's my weight in
00:40:40 - 00:40:44: kilograms now let's try entering a
00:40:42 - 00:40:45: weight in kilograms so run it one more
00:40:44 - 00:40:47: time
00:40:45 - 00:40:49: let's say 76
00:40:47 - 00:40:52: kilos
00:40:49 - 00:40:55: here we get a familiar error can only
00:40:52 - 00:40:57: concatenate string to string not float
00:40:55 - 00:41:01: so this error occurred on line five
00:40:57 - 00:41:03: where we try to concatenate a string
00:41:01 - 00:41:06: to a float so once again we need to
00:41:03 - 00:41:09: convert this to a string object now
00:41:06 - 00:41:10: let's run the program one more time
00:41:09 - 00:41:11: 76
00:41:10 - 00:41:16: kilos
00:41:11 - 00:41:17: is equal to 168 pounds
00:41:16 - 00:41:19: hey guys i just wanted to let you know
00:41:17 - 00:41:21: that i have an online coding school at
00:41:19 - 00:41:22: codewoodmosh.com where you can find
00:41:21 - 00:41:24: plenty of courses on web and mobile
00:41:22 - 00:41:26: development in fact i have a
00:41:24 - 00:41:28: comprehensive python course that teaches
00:41:26 - 00:41:30: you everything about python from the
00:41:28 - 00:41:32: basics to more advanced concepts so
00:41:30 - 00:41:33: after you watch this tutorial if you
00:41:32 - 00:41:35: want to learn more you may want to look
00:41:33 - 00:41:36: at my python course it comes with a 30
00:41:35 - 00:41:38: day money back guarantee and a
00:41:36 - 00:41:40: certificate of completion you can add to
00:41:38 - 00:41:43: your resume in case you're interested
00:41:40 - 00:41:43: the link is below this video
00:41:46 - 00:41:50: in this tutorial we're going to talk
00:41:47 - 00:41:52: about while loops in python we use while
00:41:50 - 00:41:54: loops to repeat a block of code multiple
00:41:52 - 00:41:57: times for example let's say we want to
00:41:54 - 00:41:59: print the numbers one to five a poor way
00:41:57 - 00:42:02: of doing this is writing code like this
00:41:59 - 00:42:05: print one then print two print 3
00:42:02 - 00:42:07: print 4 and print 5.
00:42:05 - 00:42:09: now why is this a bad approach well what
00:42:07 - 00:42:12: if we wanted to print the numbers 1 to 1
00:42:09 - 00:42:14: million we don't want to write 1 million
00:42:12 - 00:42:16: lines of code each line printing a
00:42:14 - 00:42:17: number this is where we use while loops
00:42:16 - 00:42:19: so
00:42:17 - 00:42:21: we'll start off by declaring a variable
00:42:19 - 00:42:23: like i and set it to our initial number
00:42:21 - 00:42:25: let's say one
00:42:23 - 00:42:27: then we type while and here we type a
00:42:25 - 00:42:29: condition so once again we can use our
00:42:27 - 00:42:32: comparison operators
00:42:29 - 00:42:34: let's say i less than 5 less than or
00:42:32 - 00:42:36: equal to 5.
00:42:34 - 00:42:38: as long as this condition is true then
00:42:36 - 00:42:40: the code that we write inside of the
00:42:38 - 00:42:43: while block will get executed so here we
00:42:40 - 00:42:45: type a colon then press enter now we
00:42:43 - 00:42:48: have a block of code
00:42:45 - 00:42:50: in this block we can print i
00:42:48 - 00:42:53: and then we need to increment i y one so
00:42:50 - 00:42:56: we set i to i plus one if you don't do
00:42:53 - 00:42:57: this i will always be one and this block
00:42:56 - 00:43:00: of code
00:42:57 - 00:43:02: will get executed indefinitely it will
00:43:00 - 00:43:04: never terminate basically our program
00:43:02 - 00:43:05: will continue running until it runs out
00:43:04 - 00:43:06: of memory
00:43:05 - 00:43:08: so
00:43:06 - 00:43:11: in the first iteration i is 1 is less
00:43:08 - 00:43:13: than 5 so python is going to execute
00:43:11 - 00:43:16: this block of code it will print 1 on
00:43:13 - 00:43:18: the terminal and then i becomes 2.
00:43:16 - 00:43:21: then the control moves back over here so
00:43:18 - 00:43:23: python evaluates this condition
00:43:21 - 00:43:26: 2 is less than or equal to 5 so the
00:43:23 - 00:43:27: condition is true and once again python
00:43:26 - 00:43:30: is going to execute this block one more
00:43:27 - 00:43:32: time in the second iteration we're going
00:43:30 - 00:43:34: to see two on the terminal and then i
00:43:32 - 00:43:37: will become three so this will continue
00:43:34 - 00:43:39: until this condition is no longer true
00:43:37 - 00:43:40: let me show you so
00:43:39 - 00:43:43: let's run this program
00:43:40 - 00:43:45: now we see the numbers one to five so
00:43:43 - 00:43:47: this is the beauty of while loops
00:43:45 - 00:43:49: i can easily change five
00:43:47 - 00:43:51: to one
00:43:49 - 00:43:53: thousand and by the way i'm separating
00:43:51 - 00:43:55: these three digits using an underscore
00:43:53 - 00:43:56: this makes my number more readable we
00:43:55 - 00:43:58: don't have to add this but it just makes
00:43:56 - 00:44:00: our code more readable
00:43:58 - 00:44:03: so let's run the program
00:44:00 - 00:44:06: now we see the numbers 1 to 1000. it's
00:44:03 - 00:44:08: much easier than 1000 lines of code each
00:44:06 - 00:44:10: printing a number okay now let me show
00:44:08 - 00:44:12: you something really cool
00:44:10 - 00:44:14: so i'm going to change this
00:44:12 - 00:44:17: to 10.
00:44:14 - 00:44:19: now instead of printing i i want to
00:44:17 - 00:44:20: print an expression so i'm going to
00:44:19 - 00:44:23: multiply i
00:44:20 - 00:44:25: by a string an asterisk
00:44:23 - 00:44:27: now you might be confused here because
00:44:25 - 00:44:30: earlier i told you that in python we
00:44:27 - 00:44:32: cannot concatenate a number to a string
00:44:30 - 00:44:34: but here i'm using the multiplication
00:44:32 - 00:44:37: operator well this is different we can
00:44:34 - 00:44:39: multiply a number by a string and this
00:44:37 - 00:44:42: will repeat that string based on the
00:44:39 - 00:44:45: value of that number so if i is one
00:44:42 - 00:44:47: we're gonna see one asterisk if i is
00:44:45 - 00:44:49: five we're going to see five asterisks
00:44:47 - 00:44:51: let me show you so when we run this
00:44:49 - 00:44:53: program
00:44:51 - 00:44:56: we see this triangle shape because in
00:44:53 - 00:44:59: the first iteration i is one so we see
00:44:56 - 00:45:02: one asterisk in every iteration i is
00:44:59 - 00:45:04: incremented by one so we see one extra
00:45:02 - 00:45:07: asterisk and finally in the last
00:45:04 - 00:45:10: iteration i is 10 and we see 10
00:45:07 - 00:45:10: asterisks on the terminal
00:45:15 - 00:45:19: so you have learned about three types of
00:45:16 - 00:45:21: data in python we have numbers which can
00:45:19 - 00:45:24: be integers or floats
00:45:21 - 00:45:26: we have booleans and strings
00:45:24 - 00:45:29: these are what we refer to as primitive
00:45:26 - 00:45:31: or basic types in python now in python
00:45:29 - 00:45:34: we have a bunch of complex types as well
00:45:31 - 00:45:35: these complex types are very useful in
00:45:34 - 00:45:37: building real applications
00:45:35 - 00:45:40: in this tutorial we're going to talk
00:45:37 - 00:45:42: about lists we use lists whenever we
00:45:40 - 00:45:44: want to represent a list of objects like
00:45:42 - 00:45:45: a list of numbers or a list of names let
00:45:44 - 00:45:47: me show you
00:45:45 - 00:45:49: so i'm going to declare a variable
00:45:47 - 00:45:51: called names
00:45:49 - 00:45:53: and set it to a list of names
00:45:51 - 00:45:55: so here we add square brackets to
00:45:53 - 00:45:58: represent a list and now we can add one
00:45:55 - 00:46:01: or more objects inside this list in this
00:45:58 - 00:46:02: list we add a bunch of names like john
00:46:01 - 00:46:04: bob
00:46:02 - 00:46:05: marsh
00:46:04 - 00:46:07: sam
00:46:05 - 00:46:10: and mary so we separate this element
00:46:07 - 00:46:11: these items using a comma okay
00:46:10 - 00:46:15: now
00:46:11 - 00:46:16: let's print our list so print names
00:46:15 - 00:46:18: take a look
00:46:16 - 00:46:19: it comes out exactly like how we wrote
00:46:18 - 00:46:21: it
00:46:19 - 00:46:23: now we can also get individual elements
00:46:21 - 00:46:26: in this list for example if we want to
00:46:23 - 00:46:29: get the first element in this list here
00:46:26 - 00:46:31: we type a pair of square brackets and
00:46:29 - 00:46:33: inside the square brackets we type an
00:46:31 - 00:46:36: index the index of the first element in
00:46:33 - 00:46:38: this list is zero so now when we run
00:46:36 - 00:46:39: this program we're going to see john on
00:46:38 - 00:46:40: the terminal
00:46:39 - 00:46:41: there you go
00:46:40 - 00:46:43: now
00:46:41 - 00:46:45: in python we can also use a negative
00:46:43 - 00:46:47: index this is a feature that i
00:46:45 - 00:46:48: personally have not seen in other
00:46:47 - 00:46:52: programming languages
00:46:48 - 00:46:54: so if 0 represents the first element in
00:46:52 - 00:46:57: this list what do you think
00:46:54 - 00:46:59: negative 1 represents it represents the
00:46:57 - 00:47:02: last element in this list let's verify
00:46:59 - 00:47:03: it so let's run the program and here's
00:47:02 - 00:47:06: mary
00:47:03 - 00:47:09: what about
00:47:06 - 00:47:10: negative 2 well that represents the
00:47:09 - 00:47:12: second element
00:47:10 - 00:47:15: from the end of the list
00:47:12 - 00:47:17: so let's run the program and here's some
00:47:15 - 00:47:20: then we can also change an object at a
00:47:17 - 00:47:22: given index for example let's say here
00:47:20 - 00:47:24: we made a mistake and this john should
00:47:22 - 00:47:28: not be spelled with an h
00:47:24 - 00:47:29: so we need to reset it we type names of
00:47:28 - 00:47:30: zero
00:47:29 - 00:47:33: now we treat this like a regular
00:47:30 - 00:47:36: variable so we set it to a new value
00:47:33 - 00:47:38: we set it to john without an h now let's
00:47:36 - 00:47:41: print our list
00:47:38 - 00:47:44: and here's our updated list beautiful
00:47:41 - 00:47:46: we can also select a range of values for
00:47:44 - 00:47:48: example let's say we're only interested
00:47:46 - 00:47:51: in the first three names
00:47:48 - 00:47:54: so over here we type square brackets
00:47:51 - 00:47:56: and here we need to type two indexes a
00:47:54 - 00:47:58: start index and an end index
00:47:56 - 00:48:00: our start index is a zero because we
00:47:58 - 00:48:03: want to start from here
00:48:00 - 00:48:06: and our end index is going to be zero
00:48:03 - 00:48:10: one two plus one that's going to be
00:48:06 - 00:48:12: three so we add a colon three so python
00:48:10 - 00:48:15: is going to return all the elements from
00:48:12 - 00:48:17: the start index up to the end index but
00:48:15 - 00:48:22: excluding the end index so it's going to
00:48:17 - 00:48:24: return the elements at index 0 1 and 2.
00:48:22 - 00:48:27: take a look
00:48:24 - 00:48:29: here are the first three names
00:48:27 - 00:48:31: and by the way
00:48:29 - 00:48:35: this expression does not modify our
00:48:31 - 00:48:37: original list it returns a new list so
00:48:35 - 00:48:40: right after this print statement if we
00:48:37 - 00:48:42: print our original list
00:48:40 - 00:48:47: you can see that it's not changed
00:48:42 - 00:48:47: so this is how we use lists in python
00:48:51 - 00:48:55: earlier i told you that strengths in
00:48:52 - 00:48:57: python are objects objects in
00:48:55 - 00:48:59: programming are kind of like objects in
00:48:57 - 00:49:01: the real world like your mobile phone
00:48:59 - 00:49:02: your bicycle the remote control of your
00:49:01 - 00:49:06: tv and so on they have certain
00:49:02 - 00:49:08: capabilities so if we type a string here
00:49:06 - 00:49:10: and then press dot we can see all the
00:49:08 - 00:49:12: functions or methods available in a
00:49:10 - 00:49:15: string object in python
00:49:12 - 00:49:17: now lists are also objects so they have
00:49:15 - 00:49:19: a bunch of methods for adding items or
00:49:17 - 00:49:20: removing them and so on let me show you
00:49:19 - 00:49:22: so i'm going to declare
00:49:20 - 00:49:25: a list of numbers
00:49:22 - 00:49:27: let's say 1 2 3 4 and 5.
00:49:25 - 00:49:30: now to add a new element at the end of
00:49:27 - 00:49:31: this list we can use the append method
00:49:30 - 00:49:33: so we type numbers
00:49:31 - 00:49:35: that append
00:49:33 - 00:49:39: and here we type 6.
00:49:35 - 00:49:41: now let's print our list
00:49:39 - 00:49:43: so here's our updated list beautiful
00:49:41 - 00:49:45: now what if you want to insert a number
00:49:43 - 00:49:46: somewhere in the middle or at the
00:49:45 - 00:49:49: beginning
00:49:46 - 00:49:52: for that we use the insert method
00:49:49 - 00:49:53: so we're going to call the insert method
00:49:52 - 00:49:55: now on the top
00:49:53 - 00:49:56: go to the view menu
00:49:55 - 00:49:58: and
00:49:56 - 00:50:01: look at parameter info look at the
00:49:58 - 00:50:02: shortcut on a mac computer it's command
00:50:01 - 00:50:05: and p
00:50:02 - 00:50:07: on windows it's probably control and p
00:50:05 - 00:50:10: if we use this shortcut we can see the
00:50:07 - 00:50:12: values that this method expects
00:50:10 - 00:50:14: so the first value that this method
00:50:12 - 00:50:16: expects is an index value and the type
00:50:14 - 00:50:18: of this value is an integer
00:50:16 - 00:50:21: so if i want to insert a value at the
00:50:18 - 00:50:23: beginning of this list i should pass 0
00:50:21 - 00:50:25: as the index of the first element right
00:50:23 - 00:50:26: so let's pass 0.
00:50:25 - 00:50:29: now
00:50:26 - 00:50:31: the second value is highlighted so the
00:50:29 - 00:50:34: second value is an object and the type
00:50:31 - 00:50:36: of this is t that basically means this
00:50:34 - 00:50:38: can be any type we can pass a number we
00:50:36 - 00:50:40: can pass a boolean we can pass a string
00:50:38 - 00:50:42: we can pass a list or any type of
00:50:40 - 00:50:45: objects in python
00:50:42 - 00:50:47: so i'm going to pass negative 1. now
00:50:45 - 00:50:49: let's run our program
00:50:47 - 00:50:50: you can see negative 1 appeared at the
00:50:49 - 00:50:52: beginning of our list
00:50:50 - 00:50:55: we also have a method for removing items
00:50:52 - 00:50:56: so let's call
00:50:55 - 00:50:57: remove
00:50:56 - 00:50:59: three
00:50:57 - 00:51:01: let's run the program
00:50:59 - 00:51:02: three is gone we only have one two four
00:51:01 - 00:51:04: and five
00:51:02 - 00:51:07: now if you wanna remove all the items in
00:51:04 - 00:51:08: the list we call the clear method so
00:51:07 - 00:51:11: clear
00:51:08 - 00:51:13: this method doesn't expect any values
00:51:11 - 00:51:14: so let's run our program our list is
00:51:13 - 00:51:16: empty
00:51:14 - 00:51:18: now sometimes you want to know if a
00:51:16 - 00:51:21: given item exists in our list or not to
00:51:18 - 00:51:23: do that we use the in operator so
00:51:21 - 00:51:26: let's remove this line
00:51:23 - 00:51:28: instead of printing our numbers list i'm
00:51:26 - 00:51:29: going to print an expression
00:51:28 - 00:51:30: one
00:51:29 - 00:51:31: in
00:51:30 - 00:51:33: numbers
00:51:31 - 00:51:35: so here we're using the in operator
00:51:33 - 00:51:37: we're checking to see if one is in the
00:51:35 - 00:51:40: numbers list so this is a boolean
00:51:37 - 00:51:41: expression it returns a boolean value
00:51:40 - 00:51:43: take a look
00:51:41 - 00:51:45: so we get true
00:51:43 - 00:51:47: obviously if we search for a value that
00:51:45 - 00:51:48: doesn't exist in this list
00:51:47 - 00:51:50: like 10
00:51:48 - 00:51:52: we get false okay
00:51:50 - 00:51:54: now finally there are times you want to
00:51:52 - 00:51:57: know how many items you have in the list
00:51:54 - 00:51:58: to do that you can use the built-in lend
00:51:57 - 00:52:00: function
00:51:58 - 00:52:03: so let's print
00:52:00 - 00:52:05: len of numbers so len
00:52:03 - 00:52:07: is a built-in function just like the
00:52:05 - 00:52:09: print function that is why it's
00:52:07 - 00:52:12: highlighted as purple it returns the
00:52:09 - 00:52:17: number of elements in a list take a look
00:52:12 - 00:52:17: so we have five elements in this list
00:52:20 - 00:52:25: when writing python programs there are
00:52:22 - 00:52:27: times you want to iterate over a list
00:52:25 - 00:52:29: and access each item individually let me
00:52:27 - 00:52:31: show you so i'm going to declare
00:52:29 - 00:52:33: a list of numbers
00:52:31 - 00:52:36: one two three four five
00:52:33 - 00:52:38: now if we print this list
00:52:36 - 00:52:41: it comes out exactly like how we wrote
00:52:38 - 00:52:42: it using the square bracket notation but
00:52:41 - 00:52:45: what if we wanted to print each item on
00:52:42 - 00:52:48: a separate line that is where we use the
00:52:45 - 00:52:50: for loop let me show you so we're not
00:52:48 - 00:52:52: going to print the entire list
00:52:50 - 00:52:53: instead we're going to type 4
00:52:52 - 00:52:55: now we declare a variable which is
00:52:53 - 00:52:57: called a loop variable
00:52:55 - 00:52:59: let's call it item
00:52:57 - 00:53:00: then we type in
00:52:59 - 00:53:03: numbers
00:53:00 - 00:53:06: next we add a colon to start a block of
00:53:03 - 00:53:08: code so this is what we call a for loop
00:53:06 - 00:53:10: with this for loop we can iterate over
00:53:08 - 00:53:13: all the items in this list
00:53:10 - 00:53:15: in each iteration this item variable is
00:53:13 - 00:53:18: going to hold one value so in the first
00:53:15 - 00:53:19: iteration item is going to be equal to 1
00:53:18 - 00:53:22: and the second iteration is going to be
00:53:19 - 00:53:25: equal to 2 and so on so
00:53:22 - 00:53:26: now if we print item
00:53:25 - 00:53:28: and run our program
00:53:26 - 00:53:31: we see each item on a new line
00:53:28 - 00:53:33: so this is how we use a for loop now we
00:53:31 - 00:53:34: could also achieve the same thing using
00:53:33 - 00:53:37: a while loop but our code would be a
00:53:34 - 00:53:39: little bit longer let me show you so
00:53:37 - 00:53:42: we would have to start by declaring a
00:53:39 - 00:53:44: loop variable outside of our while loop
00:53:42 - 00:53:47: let's say i we set it to zero
00:53:44 - 00:53:49: now we say while i is less than
00:53:47 - 00:53:51: here we need to find out how many items
00:53:49 - 00:53:53: we have in this list
00:53:51 - 00:53:54: so we use the len function
00:53:53 - 00:53:58: len of
00:53:54 - 00:53:59: numbers as long as i is less than the
00:53:58 - 00:54:00: length of the list
00:53:59 - 00:54:02: print
00:54:00 - 00:54:04: now we can use the square bracket
00:54:02 - 00:54:06: notation to get the element at this
00:54:04 - 00:54:08: index so
00:54:06 - 00:54:13: numbers of
00:54:08 - 00:54:15: i now we need to increment i by one so i
00:54:13 - 00:54:16: equals i plus one
00:54:15 - 00:54:19: let's run the program and see what we
00:54:16 - 00:54:19: get
00:54:19 - 00:54:23: so we get the numbers one to five these
00:54:21 - 00:54:25: are coming out from our for loop and
00:54:23 - 00:54:27: then we get the numbers one to five one
00:54:25 - 00:54:29: more time these are coming out from our
00:54:27 - 00:54:31: while loop now if you compare these two
00:54:29 - 00:54:33: approaches you can definitely see that
00:54:31 - 00:54:35: the implementation using the for loop is
00:54:33 - 00:54:37: shorter and easier to understand we
00:54:35 - 00:54:39: don't have to use the square bracket
00:54:37 - 00:54:41: notation we don't have to call the len
00:54:39 - 00:54:43: function we don't have to declare a
00:54:41 - 00:54:45: variable a loop variable and then
00:54:43 - 00:54:48: increment it explicitly
00:54:45 - 00:54:50: so with the for loop in each iteration
00:54:48 - 00:54:54: the item variable will automatically
00:54:50 - 00:54:54: hold one value in this list
00:54:58 - 00:55:02: in this tutorial we're going to talk
00:55:00 - 00:55:04: about the range function in python we
00:55:02 - 00:55:07: use the range function to generate a
00:55:04 - 00:55:08: sequence of numbers let me show you so
00:55:07 - 00:55:10: you type range
00:55:08 - 00:55:12: this is a built-in function just like
00:55:10 - 00:55:15: the print and input functions here we
00:55:12 - 00:55:17: can pass a value like 5 and this will
00:55:15 - 00:55:19: return a range object
00:55:17 - 00:55:21: a range object is an object that can
00:55:19 - 00:55:23: store a sequence of numbers let me show
00:55:21 - 00:55:25: you so
00:55:23 - 00:55:27: let's call that numbers
00:55:25 - 00:55:28: so this is a range object
00:55:27 - 00:55:32: in this object we're going to have the
00:55:28 - 00:55:34: numbers 0 to 5 but excluding 5.
00:55:32 - 00:55:37: now if we print
00:55:34 - 00:55:39: numbers
00:55:37 - 00:55:41: we're going to see this message range of
00:55:39 - 00:55:42: zero to five not the actual numbers
00:55:41 - 00:55:45: because this is the default
00:55:42 - 00:55:47: representation of a range object to see
00:55:45 - 00:55:49: the actual numbers we need to iterate
00:55:47 - 00:55:51: over this range object using a for loop
00:55:49 - 00:55:53: in the last video you learned how to
00:55:51 - 00:55:56: iterate over a list using a for loop but
00:55:53 - 00:55:58: we can also iterate over a range object
00:55:56 - 00:56:00: using a for loop basically we can use
00:55:58 - 00:56:02: the for loop with any object that
00:56:00 - 00:56:05: represents a sequence of objects
00:56:02 - 00:56:07: so instead of printing numbers
00:56:05 - 00:56:08: we're going to use a for loop
00:56:07 - 00:56:11: for number
00:56:08 - 00:56:13: in numbers colon
00:56:11 - 00:56:15: we're going to print
00:56:13 - 00:56:17: number
00:56:15 - 00:56:20: take a look
00:56:17 - 00:56:21: now we see the numbers zero to four
00:56:20 - 00:56:22: so
00:56:21 - 00:56:24: range of five
00:56:22 - 00:56:27: generates a sequence of numbers starting
00:56:24 - 00:56:28: from zero up to the number we specify
00:56:27 - 00:56:30: here
00:56:28 - 00:56:31: now if we supply two values
00:56:30 - 00:56:34: the first value is going to be
00:56:31 - 00:56:36: considered the starting value
00:56:34 - 00:56:37: and the second value is going to be
00:56:36 - 00:56:40: considered the ending value and it's
00:56:37 - 00:56:43: going to be excluded so range of 5 to 10
00:56:40 - 00:56:45: is going to generate the numbers 5 to 9.
00:56:43 - 00:56:46: take a look
00:56:45 - 00:56:49: there you go
00:56:46 - 00:56:52: now we can also supply a third value and
00:56:49 - 00:56:53: that will be used as a step so let's say
00:56:52 - 00:56:56: instead of having a sequence of numbers
00:56:53 - 00:56:59: like five six seven eight nine we wanna
00:56:56 - 00:57:03: jump two numbers at a time so 5 7 9 and
00:56:59 - 00:57:05: so on so here we pass 2 as the step take
00:57:03 - 00:57:10: a look
00:57:05 - 00:57:12: so we get these odd numbers 5 7 and 9.
00:57:10 - 00:57:13: so this is the range function in python
00:57:12 - 00:57:16: like quite often you see the range
00:57:13 - 00:57:17: function used as part of a for loop
00:57:16 - 00:57:20: because we don't really need to store
00:57:17 - 00:57:22: the result in a separate variable we can
00:57:20 - 00:57:24: call the range function right here where
00:57:22 - 00:57:27: we are using the numbers variable so we
00:57:24 - 00:57:29: can type range of five and this will
00:57:27 - 00:57:32: return a range object holding the
00:57:29 - 00:57:33: numbers zero to four take a look
00:57:32 - 00:57:35: there you go
00:57:33 - 00:57:37: so we don't really need to store the
00:57:35 - 00:57:39: result in a separate variable like
00:57:37 - 00:57:42: numbers
00:57:39 - 00:57:42: there you go
00:57:47 - 00:57:51: in this tutorial we're going to talk
00:57:48 - 00:57:53: about tuples in python tuples are kind
00:57:51 - 00:57:55: of like lists we use them to store a
00:57:53 - 00:57:57: sequence of objects but tuples are
00:57:55 - 00:58:00: immutable which means we cannot change
00:57:57 - 00:58:02: them once we create them let me show you
00:58:00 - 00:58:04: so i'm going to start by defining a list
00:58:02 - 00:58:06: of numbers 1 2 3.
00:58:04 - 00:58:07: now we use square brackets to define a
00:58:06 - 00:58:10: list
00:58:07 - 00:58:13: and parenthesis to define a tuple so now
00:58:10 - 00:58:14: this numbers variable is storing a tuple
00:58:13 - 00:58:18: if we try
00:58:14 - 00:58:20: to reassign let's say the first element
00:58:18 - 00:58:22: we're going to get an error
00:58:20 - 00:58:24: topple object does not support item
00:58:22 - 00:58:26: assignment so this is what i meant by
00:58:24 - 00:58:28: tuples are immutable they're
00:58:26 - 00:58:29: unchangeable
00:58:28 - 00:58:32: also
00:58:29 - 00:58:34: if you type numbers dot
00:58:32 - 00:58:37: you don't see any methods like append
00:58:34 - 00:58:39: insert remove and so on we only have
00:58:37 - 00:58:41: count and index
00:58:39 - 00:58:43: count returns the number of occurrences
00:58:41 - 00:58:44: of an element for example
00:58:43 - 00:58:45: if we have
00:58:44 - 00:58:47: let's say
00:58:45 - 00:58:50: two threes in this tuple
00:58:47 - 00:58:51: and call count of three this will return
00:58:50 - 00:58:53: 2.
00:58:51 - 00:58:56: the other method we have here is index
00:58:53 - 00:58:58: and this returns the index of the first
00:58:56 - 00:58:59: occurrence of the given element
00:58:58 - 00:59:00: now
00:58:59 - 00:59:03: these other methods you see here that
00:59:00 - 00:59:05: start with an underscore they're called
00:59:03 - 00:59:07: magic methods it's an advanced topic and
00:59:05 - 00:59:09: i've covered it in detail in my complete
00:59:07 - 00:59:11: python programming course if you're
00:59:09 - 00:59:12: interested the link is down below this
00:59:11 - 00:59:14: video
00:59:12 - 00:59:16: so tuples are immutable we cannot change
00:59:14 - 00:59:18: them once we create them
00:59:16 - 00:59:20: now practically speaking most of the
00:59:18 - 00:59:21: time you would be using lists but there
00:59:20 - 00:59:23: are times that once you create a list of
00:59:21 - 00:59:25: objects you want to make sure that
00:59:23 - 00:59:28: somewhere in your program you or someone
00:59:25 - 00:59:30: else is not going to accidentally modify
00:59:28 - 00:59:33: that list if that's the case then you
00:59:30 - 00:59:34: should use a tuple
00:59:33 - 00:59:36: hey guys i just wanted to let you know
00:59:34 - 00:59:38: that i have an online coding school at
00:59:36 - 00:59:40: codewoodmarch.com where you can find
00:59:38 - 00:59:41: plenty of courses on web and mobile
00:59:40 - 00:59:44: development in fact i have a
00:59:41 - 00:59:45: comprehensive python course that teaches
00:59:44 - 00:59:47: you everything about python from the
00:59:45 - 00:59:49: basics to more advanced concepts so
00:59:47 - 00:59:50: after you watch this tutorial if you
00:59:49 - 00:59:52: want to learn more you may want to look
00:59:50 - 00:59:54: at my python course it comes with a 30
00:59:52 - 00:59:55: day money back guarantee and a
00:59:54 - 00:59:57: certificate of completion you can add to
00:59:55 - 01:00:01: your resume in case you're interested
00:59:57 - 01:00:04: the link is below this video
01:00:01 - 01:00:04: hey
